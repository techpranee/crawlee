{
  "openapi": "3.1.1",
  "info": {
    "title": "Twenty Api",
    "description": "Use this page to explore and call the **REST API**. \n\n## Authentication\n\nSend a Bearer token with each request:\n\n```http\nAuthorization: Bearer \u003Ctoken\u003E\n```\n\nExample cURL:\n\n```bash\ncurl -H 'Authorization: Bearer \u003Ctoken\u003E' \u003Cserver\u003E/rest/core/companies\n```\n\nTokens can be generated in Settings â†’ Playground and are workspace-scoped.\n\n\n## Filters\n\nUse the `filter` query parameter to narrow results.\n\n- Format: `field[COMPARATOR]:value`\n- Multiple conditions: `field1[eq]:1,field2[gte]:10` (root conjunction is AND)\n- Composite fields: `field.subField[COMPARATOR]:value`\n- Common comparators: `eq`, `neq`, `in`, `containsAny`, `is`, `gt`, `gte`, `lt`, `lte`, `startsWith`, `like`, `ilike`\n\nExamples:\n\n```text\nfilter=status[eq]:\"open\"\nfilter=createdAt[gte]:\"2024-01-01\"\nfilter=owner.name[ilike]:\"%smith%\"\nfilter=id[in]:[\"id-1\",\"id-2\"]\nfilter=deletedAt[is]:NULL\nfilter=isActive[eq]:true\n```\n\nAdvanced (optional): `and(...)`, `or(...)`, `not(...)` (`not` wraps one condition)\n\n```text\nfilter=or(status[eq]:\"open\",assigneeId[is]:NULL)\n```\n\nNotes: Strings and dates are quoted; numbers are not.\n\n## Pagination and ordering\n\nAll list endpoints use cursor-based pagination.\n\n- Use **limit** to cap page size (default: 60, max: 60).\n- Use **starting_after** to fetch the next page (forward).\n- Use **ending_before** to fetch the previous page (backward).\n- Responses include **pageInfo** with `hasNextPage`, `startCursor`, and `endCursor`.\n\nExamples:\n\n```bash\n# First page\ncurl -H 'Authorization: Bearer \u003Ctoken\u003E' \\\n  '\u003Cserver\u003E/rest/core/companies?limit=60'\n\n# Next page\ncurl -H 'Authorization: Bearer \u003Ctoken\u003E' \\\n  '\u003Cserver\u003E/rest/core/companies?limit=60&starting_after=\u003CendCursorFromPreviousPage\u003E'\n\n# Previous page\ncurl -H 'Authorization: Bearer \u003Ctoken\u003E' \\\n  '\u003Cserver\u003E/rest/core/companies?limit=60&ending_before=\u003CstartCursorFromCurrentPage\u003E'\n```\n\nYou can combine pagination with filters and ordering.\n\nOrdering with `order_by`:\n- Shape: `field1,field2[DIRECTION2]`\n- Directions: AscNullsFirst, AscNullsLast, DescNullsFirst, DescNullsLast\n- Default per-field direction: AscNullsFirst\n\nExamples:\n```text\norder_by=createdAt\norder_by=id[AscNullsFirst],createdAt[DescNullsLast]\n```\n\n## Usage with LLMs\n\nYou can use AI to generate code based on the OpenAPI schema with the following URLs:\n\n```text\nCore: https://20.techpranee.com/rest/open-api/core?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI0YTU5NmViMi1iMWJjLTQyZTgtODhhOS0wYTc3YTRiZTNkM2UiLCJ0eXBlIjoiQVBJX0tFWSIsIndvcmtzcGFjZUlkIjoiNGE1OTZlYjItYjFiYy00MmU4LTg4YTktMGE3N2E0YmUzZDNlIiwiaWF0IjoxNzU5NjkwNzM4LCJleHAiOjQ5MTMyOTA3MzcsImp0aSI6IjE3ZDMyZmRlLTNhNDgtNGI3Ny04NWE1LTI3NGZhYzc0ZTE5YiJ9.UKk8s9LBc_zWOBbyZh_djFj2pGSmBknD1QVSNclWJ3Q\nMetadata: https://20.techpranee.com/rest/open-api/metadata?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI0YTU5NmViMi1iMWJjLTQyZTgtODhhOS0wYTc3YTRiZTNkM2UiLCJ0eXBlIjoiQVBJX0tFWSIsIndvcmtzcGFjZUlkIjoiNGE1OTZlYjItYjFiYy00MmU4LTg4YTktMGE3N2E0YmUzZDNlIiwiaWF0IjoxNzU5NjkwNzM4LCJleHAiOjQ5MTMyOTA3MzcsImp0aSI6IjE3ZDMyZmRlLTNhNDgtNGI3Ny04NWE1LTI3NGZhYzc0ZTE5YiJ9.UKk8s9LBc_zWOBbyZh_djFj2pGSmBknD1QVSNclWJ3Q\n```\n\nQuick prompt example (Cursor or any agent):\n\n```text\nHere is an OpenAPI schema for the Twenty REST API:\nhttps://20.techpranee.com/rest/open-api/core?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI0YTU5NmViMi1iMWJjLTQyZTgtODhhOS0wYTc3YTRiZTNkM2UiLCJ0eXBlIjoiQVBJX0tFWSIsIndvcmtzcGFjZUlkIjoiNGE1OTZlYjItYjFiYy00MmU4LTg4YTktMGE3N2E0YmUzZDNlIiwiaWF0IjoxNzU5NjkwNzM4LCJleHAiOjQ5MTMyOTA3MzcsImp0aSI6IjE3ZDMyZmRlLTNhNDgtNGI3Ny04NWE1LTI3NGZhYzc0ZTE5YiJ9.UKk8s9LBc_zWOBbyZh_djFj2pGSmBknD1QVSNclWJ3Q\n\nUse it to list companies created after 2024-01-01, ordered by createdAt desc, and include only 20 results.\n```\n\nNotes:\n- Treat the token like a secret; prefer a short-lived Playground token.\n- Most editors can fetch and process the schema even if it's large.\n",
    "termsOfService": "https://github.com/twentyhq/twenty?tab=coc-ov-file#readme",
    "contact": {
      "email": "felix@twenty.com"
    },
    "license": {
      "name": "AGPL-3.0",
      "url": "https://github.com/twentyhq/twenty?tab=License-1-ov-file#readme"
    },
    "version": "v0.1"
  },
  "servers": [
    {
      "url": "https://20.techpranee.com/rest/",
      "description": "Production Development"
    }
  ],
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "description": "Enter the token with the `Bearer: ` prefix, e.g. \"Bearer abcde12345\"."
      }
    },
    "schemas": {
      "Attachment": {
        "type": "object",
        "description": "An attachment",
        "properties": {
          "fullPath": {
            "type": "string",
            "description": "Attachment full path"
          },
          "opportunityId": {
            "type": "string",
            "format": "uuid"
          },
          "workflowId": {
            "type": "string",
            "format": "uuid"
          },
          "leadsLinkedinScrapingId": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "description": "Attachment name"
          },
          "type": {
            "type": "string",
            "description": "Attachment type"
          },
          "noteId": {
            "type": "string",
            "format": "uuid"
          },
          "taskId": {
            "type": "string",
            "format": "uuid"
          },
          "authorId": {
            "type": "string",
            "format": "uuid"
          },
          "personId": {
            "type": "string",
            "format": "uuid"
          },
          "companyId": {
            "type": "string",
            "format": "uuid"
          }
        },
        "example": {
          "name": "Attachment name"
        }
      },
      "AttachmentForUpdate": {
        "type": "object",
        "description": "An attachment",
        "properties": {
          "fullPath": {
            "type": "string",
            "description": "Attachment full path"
          },
          "opportunityId": {
            "type": "string",
            "format": "uuid"
          },
          "workflowId": {
            "type": "string",
            "format": "uuid"
          },
          "leadsLinkedinScrapingId": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "description": "Attachment name"
          },
          "type": {
            "type": "string",
            "description": "Attachment type"
          },
          "noteId": {
            "type": "string",
            "format": "uuid"
          },
          "taskId": {
            "type": "string",
            "format": "uuid"
          },
          "authorId": {
            "type": "string",
            "format": "uuid"
          },
          "personId": {
            "type": "string",
            "format": "uuid"
          },
          "companyId": {
            "type": "string",
            "format": "uuid"
          }
        },
        "example": {
          "name": "Attachment name"
        }
      },
      "AttachmentForResponse": {
        "type": "object",
        "description": "An attachment",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Id"
          },
          "fullPath": {
            "type": "string",
            "description": "Attachment full path"
          },
          "opportunityId": {
            "type": "string",
            "format": "uuid"
          },
          "workflowId": {
            "type": "string",
            "format": "uuid"
          },
          "leadsLinkedinScrapingId": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "description": "Attachment name"
          },
          "deletedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Date when the record was deleted"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Last time the record was changed"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Creation date"
          },
          "type": {
            "type": "string",
            "description": "Attachment type"
          },
          "noteId": {
            "type": "string",
            "format": "uuid"
          },
          "taskId": {
            "type": "string",
            "format": "uuid"
          },
          "authorId": {
            "type": "string",
            "format": "uuid"
          },
          "personId": {
            "type": "string",
            "format": "uuid"
          },
          "companyId": {
            "type": "string",
            "format": "uuid"
          },
          "opportunity": {
            "type": "object",
            "oneOf": [
              {
                "$ref": "#/components/schemas/OpportunityForResponse"
              }
            ],
            "description": "Attachment opportunity"
          },
          "workflow": {
            "type": "object",
            "oneOf": [
              {
                "$ref": "#/components/schemas/WorkflowForResponse"
              }
            ],
            "description": "Attachment workflow"
          },
          "leadsLinkedinScraping": {
            "type": "object",
            "oneOf": [
              {
                "$ref": "#/components/schemas/LeadsLinkedinScrapingForResponse"
              }
            ],
            "description": "Attachments Leads - LinkedIn Scraping"
          },
          "note": {
            "type": "object",
            "oneOf": [
              {
                "$ref": "#/components/schemas/NoteForResponse"
              }
            ],
            "description": "Attachment note"
          },
          "task": {
            "type": "object",
            "oneOf": [
              {
                "$ref": "#/components/schemas/TaskForResponse"
              }
            ],
            "description": "Attachment task"
          },
          "author": {
            "type": "object",
            "oneOf": [
              {
                "$ref": "#/components/schemas/WorkspaceMemberForResponse"
              }
            ],
            "description": "Attachment author"
          },
          "person": {
            "type": "object",
            "oneOf": [
              {
                "$ref": "#/components/schemas/PersonForResponse"
              }
            ],
            "description": "Attachment person"
          },
          "company": {
            "type": "object",
            "oneOf": [
              {
                "$ref": "#/components/schemas/CompanyForResponse"
              }
            ],
            "description": "Attachment company"
          }
        }
      },
      "Blocklist": {
        "type": "object",
        "description": "Blocklist",
        "properties": {
          "workspaceMemberId": {
            "type": "string",
            "format": "uuid"
          },
          "handle": {
            "type": "string",
            "description": "Handle"
          }
        },
        "example": {

        }
      },
      "BlocklistForUpdate": {
        "type": "object",
        "description": "Blocklist",
        "properties": {
          "workspaceMemberId": {
            "type": "string",
            "format": "uuid"
          },
          "handle": {
            "type": "string",
            "description": "Handle"
          }
        },
        "example": {

        }
      },
      "BlocklistForResponse": {
        "type": "object",
        "description": "Blocklist",
        "properties": {
          "workspaceMemberId": {
            "type": "string",
            "format": "uuid"
          },
          "handle": {
            "type": "string",
            "description": "Handle"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Last time the record was changed"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Creation date"
          },
          "deletedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Date when the record was deleted"
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Id"
          },
          "workspaceMember": {
            "type": "object",
            "oneOf": [
              {
                "$ref": "#/components/schemas/WorkspaceMemberForResponse"
              }
            ],
            "description": "WorkspaceMember"
          }
        }
      },
      "CalendarChannelEventAssociation": {
        "type": "object",
        "description": "Calendar Channel Event Associations",
        "properties": {
          "calendarChannelId": {
            "type": "string",
            "format": "uuid"
          },
          "calendarEventId": {
            "type": "string",
            "format": "uuid"
          },
          "eventExternalId": {
            "type": "string",
            "description": "Event external ID"
          },
          "recurringEventExternalId": {
            "type": "string",
            "description": "Recurring Event ID"
          }
        },
        "example": {

        }
      },
      "CalendarChannelEventAssociationForUpdate": {
        "type": "object",
        "description": "Calendar Channel Event Associations",
        "properties": {
          "calendarChannelId": {
            "type": "string",
            "format": "uuid"
          },
          "calendarEventId": {
            "type": "string",
            "format": "uuid"
          },
          "eventExternalId": {
            "type": "string",
            "description": "Event external ID"
          },
          "recurringEventExternalId": {
            "type": "string",
            "description": "Recurring Event ID"
          }
        },
        "example": {

        }
      },
      "CalendarChannelEventAssociationForResponse": {
        "type": "object",
        "description": "Calendar Channel Event Associations",
        "properties": {
          "calendarChannelId": {
            "type": "string",
            "format": "uuid"
          },
          "calendarEventId": {
            "type": "string",
            "format": "uuid"
          },
          "eventExternalId": {
            "type": "string",
            "description": "Event external ID"
          },
          "recurringEventExternalId": {
            "type": "string",
            "description": "Recurring Event ID"
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Id"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Creation date"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Last time the record was changed"
          },
          "deletedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Date when the record was deleted"
          },
          "calendarChannel": {
            "type": "object",
            "oneOf": [
              {
                "$ref": "#/components/schemas/CalendarChannelForResponse"
              }
            ],
            "description": "Channel ID"
          },
          "calendarEvent": {
            "type": "object",
            "oneOf": [
              {
                "$ref": "#/components/schemas/CalendarEventForResponse"
              }
            ],
            "description": "Event ID"
          }
        }
      },
      "CalendarChannel": {
        "type": "object",
        "description": "Calendar Channels",
        "properties": {
          "connectedAccountId": {
            "type": "string",
            "format": "uuid"
          },
          "syncStage": {
            "type": "string",
            "enum": [
              "CALENDAR_EVENT_LIST_FETCH_PENDING",
              "CALENDAR_EVENT_LIST_FETCH_SCHEDULED",
              "CALENDAR_EVENT_LIST_FETCH_ONGOING",
              "CALENDAR_EVENTS_IMPORT_PENDING",
              "CALENDAR_EVENTS_IMPORT_SCHEDULED",
              "CALENDAR_EVENTS_IMPORT_ONGOING",
              "FAILED",
              "FULL_CALENDAR_EVENT_LIST_FETCH_PENDING",
              "PARTIAL_CALENDAR_EVENT_LIST_FETCH_PENDING"
            ],
            "description": "Sync stage"
          },
          "visibility": {
            "type": "string",
            "enum": [
              "METADATA",
              "SHARE_EVERYTHING"
            ],
            "description": "Visibility"
          },
          "isContactAutoCreationEnabled": {
            "type": "boolean",
            "description": "Is Contact Auto Creation Enabled"
          },
          "contactAutoCreationPolicy": {
            "type": "string",
            "enum": [
              "AS_PARTICIPANT_AND_ORGANIZER",
              "AS_PARTICIPANT",
              "AS_ORGANIZER",
              "NONE"
            ],
            "description": "Automatically create records for people you participated with in an event."
          },
          "isSyncEnabled": {
            "type": "boolean",
            "description": "Is Sync Enabled"
          },
          "syncCursor": {
            "type": "string",
            "description": "Sync Cursor. Used for syncing events from the calendar provider"
          },
          "syncedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Last sync date"
          },
          "syncStageStartedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Sync stage started at"
          },
          "throttleFailureCount": {
            "type": "integer",
            "description": "Throttle Failure Count"
          },
          "handle": {
            "type": "string",
            "description": "Handle"
          },
          "syncStatus": {
            "type": "string",
            "enum": [
              "ONGOING",
              "NOT_SYNCED",
              "ACTIVE",
              "FAILED_INSUFFICIENT_PERMISSIONS",
              "FAILED_UNKNOWN"
            ],
            "description": "Sync status"
          }
        },
        "example": {
          "syncStage": [
            "CALENDAR_EVENT_LIST_FETCH_PENDING"
          ],
          "visibility": [
            "METADATA"
          ],
          "contactAutoCreationPolicy": [
            "AS_PARTICIPANT_AND_ORGANIZER"
          ],
          "syncStatus": [
            "ONGOING"
          ]
        }
      },
      "CalendarChannelForUpdate": {
        "type": "object",
        "description": "Calendar Channels",
        "properties": {
          "connectedAccountId": {
            "type": "string",
            "format": "uuid"
          },
          "syncStage": {
            "type": "string",
            "enum": [
              "CALENDAR_EVENT_LIST_FETCH_PENDING",
              "CALENDAR_EVENT_LIST_FETCH_SCHEDULED",
              "CALENDAR_EVENT_LIST_FETCH_ONGOING",
              "CALENDAR_EVENTS_IMPORT_PENDING",
              "CALENDAR_EVENTS_IMPORT_SCHEDULED",
              "CALENDAR_EVENTS_IMPORT_ONGOING",
              "FAILED",
              "FULL_CALENDAR_EVENT_LIST_FETCH_PENDING",
              "PARTIAL_CALENDAR_EVENT_LIST_FETCH_PENDING"
            ],
            "description": "Sync stage"
          },
          "visibility": {
            "type": "string",
            "enum": [
              "METADATA",
              "SHARE_EVERYTHING"
            ],
            "description": "Visibility"
          },
          "isContactAutoCreationEnabled": {
            "type": "boolean",
            "description": "Is Contact Auto Creation Enabled"
          },
          "contactAutoCreationPolicy": {
            "type": "string",
            "enum": [
              "AS_PARTICIPANT_AND_ORGANIZER",
              "AS_PARTICIPANT",
              "AS_ORGANIZER",
              "NONE"
            ],
            "description": "Automatically create records for people you participated with in an event."
          },
          "isSyncEnabled": {
            "type": "boolean",
            "description": "Is Sync Enabled"
          },
          "syncCursor": {
            "type": "string",
            "description": "Sync Cursor. Used for syncing events from the calendar provider"
          },
          "syncedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Last sync date"
          },
          "syncStageStartedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Sync stage started at"
          },
          "throttleFailureCount": {
            "type": "integer",
            "description": "Throttle Failure Count"
          },
          "handle": {
            "type": "string",
            "description": "Handle"
          },
          "syncStatus": {
            "type": "string",
            "enum": [
              "ONGOING",
              "NOT_SYNCED",
              "ACTIVE",
              "FAILED_INSUFFICIENT_PERMISSIONS",
              "FAILED_UNKNOWN"
            ],
            "description": "Sync status"
          }
        },
        "example": {
          "syncStage": [
            "CALENDAR_EVENT_LIST_FETCH_PENDING"
          ],
          "visibility": [
            "METADATA"
          ],
          "contactAutoCreationPolicy": [
            "AS_PARTICIPANT_AND_ORGANIZER"
          ],
          "syncStatus": [
            "ONGOING"
          ]
        }
      },
      "CalendarChannelForResponse": {
        "type": "object",
        "description": "Calendar Channels",
        "properties": {
          "connectedAccountId": {
            "type": "string",
            "format": "uuid"
          },
          "syncStage": {
            "type": "string",
            "enum": [
              "CALENDAR_EVENT_LIST_FETCH_PENDING",
              "CALENDAR_EVENT_LIST_FETCH_SCHEDULED",
              "CALENDAR_EVENT_LIST_FETCH_ONGOING",
              "CALENDAR_EVENTS_IMPORT_PENDING",
              "CALENDAR_EVENTS_IMPORT_SCHEDULED",
              "CALENDAR_EVENTS_IMPORT_ONGOING",
              "FAILED",
              "FULL_CALENDAR_EVENT_LIST_FETCH_PENDING",
              "PARTIAL_CALENDAR_EVENT_LIST_FETCH_PENDING"
            ],
            "description": "Sync stage"
          },
          "visibility": {
            "type": "string",
            "enum": [
              "METADATA",
              "SHARE_EVERYTHING"
            ],
            "description": "Visibility"
          },
          "isContactAutoCreationEnabled": {
            "type": "boolean",
            "description": "Is Contact Auto Creation Enabled"
          },
          "contactAutoCreationPolicy": {
            "type": "string",
            "enum": [
              "AS_PARTICIPANT_AND_ORGANIZER",
              "AS_PARTICIPANT",
              "AS_ORGANIZER",
              "NONE"
            ],
            "description": "Automatically create records for people you participated with in an event."
          },
          "isSyncEnabled": {
            "type": "boolean",
            "description": "Is Sync Enabled"
          },
          "syncCursor": {
            "type": "string",
            "description": "Sync Cursor. Used for syncing events from the calendar provider"
          },
          "syncedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Last sync date"
          },
          "syncStageStartedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Sync stage started at"
          },
          "throttleFailureCount": {
            "type": "integer",
            "description": "Throttle Failure Count"
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Id"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Creation date"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Last time the record was changed"
          },
          "deletedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Date when the record was deleted"
          },
          "handle": {
            "type": "string",
            "description": "Handle"
          },
          "syncStatus": {
            "type": "string",
            "enum": [
              "ONGOING",
              "NOT_SYNCED",
              "ACTIVE",
              "FAILED_INSUFFICIENT_PERMISSIONS",
              "FAILED_UNKNOWN"
            ],
            "description": "Sync status"
          },
          "connectedAccount": {
            "type": "object",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ConnectedAccountForResponse"
              }
            ],
            "description": "Connected Account"
          },
          "calendarChannelEventAssociations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CalendarChannelEventAssociationForResponse"
            },
            "description": "Calendar Channel Event Associations"
          }
        }
      },
      "CalendarEventParticipant": {
        "type": "object",
        "description": "Calendar event participants",
        "properties": {
          "workspaceMemberId": {
            "type": "string",
            "format": "uuid"
          },
          "handle": {
            "type": "string",
            "description": "Handle"
          },
          "displayName": {
            "type": "string",
            "description": "Display Name"
          },
          "isOrganizer": {
            "type": "boolean",
            "description": "Is Organizer"
          },
          "responseStatus": {
            "type": "string",
            "enum": [
              "NEEDS_ACTION",
              "DECLINED",
              "TENTATIVE",
              "ACCEPTED"
            ],
            "description": "Response Status"
          },
          "personId": {
            "type": "string",
            "format": "uuid"
          },
          "calendarEventId": {
            "type": "string",
            "format": "uuid"
          }
        },
        "example": {
          "responseStatus": [
            "NEEDS_ACTION"
          ]
        }
      },
      "CalendarEventParticipantForUpdate": {
        "type": "object",
        "description": "Calendar event participants",
        "properties": {
          "workspaceMemberId": {
            "type": "string",
            "format": "uuid"
          },
          "handle": {
            "type": "string",
            "description": "Handle"
          },
          "displayName": {
            "type": "string",
            "description": "Display Name"
          },
          "isOrganizer": {
            "type": "boolean",
            "description": "Is Organizer"
          },
          "responseStatus": {
            "type": "string",
            "enum": [
              "NEEDS_ACTION",
              "DECLINED",
              "TENTATIVE",
              "ACCEPTED"
            ],
            "description": "Response Status"
          },
          "personId": {
            "type": "string",
            "format": "uuid"
          },
          "calendarEventId": {
            "type": "string",
            "format": "uuid"
          }
        },
        "example": {
          "responseStatus": [
            "NEEDS_ACTION"
          ]
        }
      },
      "CalendarEventParticipantForResponse": {
        "type": "object",
        "description": "Calendar event participants",
        "properties": {
          "workspaceMemberId": {
            "type": "string",
            "format": "uuid"
          },
          "handle": {
            "type": "string",
            "description": "Handle"
          },
          "displayName": {
            "type": "string",
            "description": "Display Name"
          },
          "isOrganizer": {
            "type": "boolean",
            "description": "Is Organizer"
          },
          "responseStatus": {
            "type": "string",
            "enum": [
              "NEEDS_ACTION",
              "DECLINED",
              "TENTATIVE",
              "ACCEPTED"
            ],
            "description": "Response Status"
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Id"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Creation date"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Last time the record was changed"
          },
          "deletedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Date when the record was deleted"
          },
          "personId": {
            "type": "string",
            "format": "uuid"
          },
          "calendarEventId": {
            "type": "string",
            "format": "uuid"
          },
          "workspaceMember": {
            "type": "object",
            "oneOf": [
              {
                "$ref": "#/components/schemas/WorkspaceMemberForResponse"
              }
            ],
            "description": "Workspace Member"
          },
          "person": {
            "type": "object",
            "oneOf": [
              {
                "$ref": "#/components/schemas/PersonForResponse"
              }
            ],
            "description": "Person"
          },
          "calendarEvent": {
            "type": "object",
            "oneOf": [
              {
                "$ref": "#/components/schemas/CalendarEventForResponse"
              }
            ],
            "description": "Event ID"
          }
        }
      },
      "CalendarEvent": {
        "type": "object",
        "description": "Calendar events",
        "properties": {
          "conferenceSolution": {
            "type": "string",
            "description": "Conference Solution"
          },
          "iCalUID": {
            "type": "string",
            "description": "iCal UID"
          },
          "location": {
            "type": "string",
            "description": "Location"
          },
          "description": {
            "type": "string",
            "description": "Description"
          },
          "externalUpdatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Update DateTime"
          },
          "externalCreatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Creation DateTime"
          },
          "endsAt": {
            "type": "string",
            "format": "date-time",
            "description": "End Date"
          },
          "startsAt": {
            "type": "string",
            "format": "date-time",
            "description": "Start Date"
          },
          "isCanceled": {
            "type": "boolean",
            "description": "Is canceled"
          },
          "isFullDay": {
            "type": "boolean",
            "description": "Is Full Day"
          },
          "title": {
            "type": "string",
            "description": "Title"
          },
          "conferenceLink": {
            "type": "object",
            "properties": {
              "primaryLinkLabel": {
                "type": "string"
              },
              "primaryLinkUrl": {
                "type": "string"
              },
              "secondaryLinks": {
                "type": "array",
                "items": {
                  "type": "object",
                  "description": "A secondary link",
                  "properties": {
                    "url": {
                      "type": "string",
                      "format": "uri"
                    },
                    "label": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": "Meet Link"
          }
        },
        "example": {
          "conferenceLink": {
            "primaryLinkLabel": "",
            "primaryLinkUrl": "https://steel-pinstripe.name",
            "additionalLinks": []
          }
        }
      },
      "CalendarEventForUpdate": {
        "type": "object",
        "description": "Calendar events",
        "properties": {
          "conferenceSolution": {
            "type": "string",
            "description": "Conference Solution"
          },
          "iCalUID": {
            "type": "string",
            "description": "iCal UID"
          },
          "location": {
            "type": "string",
            "description": "Location"
          },
          "description": {
            "type": "string",
            "description": "Description"
          },
          "externalUpdatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Update DateTime"
          },
          "externalCreatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Creation DateTime"
          },
          "endsAt": {
            "type": "string",
            "format": "date-time",
            "description": "End Date"
          },
          "startsAt": {
            "type": "string",
            "format": "date-time",
            "description": "Start Date"
          },
          "isCanceled": {
            "type": "boolean",
            "description": "Is canceled"
          },
          "isFullDay": {
            "type": "boolean",
            "description": "Is Full Day"
          },
          "title": {
            "type": "string",
            "description": "Title"
          },
          "conferenceLink": {
            "type": "object",
            "properties": {
              "primaryLinkLabel": {
                "type": "string"
              },
              "primaryLinkUrl": {
                "type": "string"
              },
              "secondaryLinks": {
                "type": "array",
                "items": {
                  "type": "object",
                  "description": "A secondary link",
                  "properties": {
                    "url": {
                      "type": "string",
                      "format": "uri"
                    },
                    "label": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": "Meet Link"
          }
        },
        "example": {
          "conferenceLink": {
            "primaryLinkLabel": "",
            "primaryLinkUrl": "https://honored-wheel.info/",
            "additionalLinks": []
          }
        }
      },
      "CalendarEventForResponse": {
        "type": "object",
        "description": "Calendar events",
        "properties": {
          "conferenceSolution": {
            "type": "string",
            "description": "Conference Solution"
          },
          "iCalUID": {
            "type": "string",
            "description": "iCal UID"
          },
          "location": {
            "type": "string",
            "description": "Location"
          },
          "description": {
            "type": "string",
            "description": "Description"
          },
          "externalUpdatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Update DateTime"
          },
          "externalCreatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Creation DateTime"
          },
          "endsAt": {
            "type": "string",
            "format": "date-time",
            "description": "End Date"
          },
          "startsAt": {
            "type": "string",
            "format": "date-time",
            "description": "Start Date"
          },
          "deletedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Date when the record was deleted"
          },
          "isCanceled": {
            "type": "boolean",
            "description": "Is canceled"
          },
          "isFullDay": {
            "type": "boolean",
            "description": "Is Full Day"
          },
          "title": {
            "type": "string",
            "description": "Title"
          },
          "conferenceLink": {
            "type": "object",
            "properties": {
              "primaryLinkLabel": {
                "type": "string"
              },
              "primaryLinkUrl": {
                "type": "string"
              },
              "secondaryLinks": {
                "type": "array",
                "items": {
                  "type": "object",
                  "description": "A secondary link",
                  "properties": {
                    "url": {
                      "type": "string",
                      "format": "uri"
                    },
                    "label": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": "Meet Link"
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Id"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Creation date"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Last time the record was changed"
          },
          "calendarEventParticipants": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CalendarEventParticipantForResponse"
            },
            "description": "Event Participants"
          },
          "calendarChannelEventAssociations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CalendarChannelEventAssociationForResponse"
            },
            "description": "Calendar Channel Event Associations"
          }
        }
      },
      "Company": {
        "type": "object",
        "description": "A company",
        "properties": {
          "domainName": {
            "type": "object",
            "properties": {
              "primaryLinkLabel": {
                "type": "string"
              },
              "primaryLinkUrl": {
                "type": "string"
              },
              "secondaryLinks": {
                "type": "array",
                "items": {
                  "type": "object",
                  "description": "A secondary link",
                  "properties": {
                    "url": {
                      "type": "string",
                      "format": "uri"
                    },
                    "label": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": "The company website URL. We use this url to fetch the company icon"
          },
          "employees": {
            "type": "integer",
            "description": "Number of employees in the company"
          },
          "linkedinLink": {
            "type": "object",
            "properties": {
              "primaryLinkLabel": {
                "type": "string"
              },
              "primaryLinkUrl": {
                "type": "string"
              },
              "secondaryLinks": {
                "type": "array",
                "items": {
                  "type": "object",
                  "description": "A secondary link",
                  "properties": {
                    "url": {
                      "type": "string",
                      "format": "uri"
                    },
                    "label": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": "The company Linkedin account"
          },
          "xLink": {
            "type": "object",
            "properties": {
              "primaryLinkLabel": {
                "type": "string"
              },
              "primaryLinkUrl": {
                "type": "string"
              },
              "secondaryLinks": {
                "type": "array",
                "items": {
                  "type": "object",
                  "description": "A secondary link",
                  "properties": {
                    "url": {
                      "type": "string",
                      "format": "uri"
                    },
                    "label": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": "The company Twitter/X account"
          },
          "annualRecurringRevenue": {
            "type": "object",
            "properties": {
              "amountMicros": {
                "type": "number"
              },
              "currencyCode": {
                "type": "string"
              }
            },
            "description": "Annual Recurring Revenue: The actual or estimated annual revenue of the company"
          },
          "address": {
            "type": "object",
            "properties": {
              "addressStreet1": {
                "type": "string"
              },
              "addressStreet2": {
                "type": "string"
              },
              "addressCity": {
                "type": "string"
              },
              "addressPostcode": {
                "type": "string"
              },
              "addressState": {
                "type": "string"
              },
              "addressCountry": {
                "type": "string"
              },
              "addressLat": {
                "type": "number"
              },
              "addressLng": {
                "type": "number"
              }
            },
            "description": "Address of the company"
          },
          "idealCustomerProfile": {
            "type": "boolean",
            "description": "Ideal Customer Profile:  Indicates whether the company is the most suitable and valuable customer for you"
          },
          "position": {
            "type": "number",
            "description": "Company record position"
          },
          "createdBy": {
            "type": "object",
            "properties": {
              "source": {
                "type": "string",
                "enum": [
                  "EMAIL",
                  "CALENDAR",
                  "WORKFLOW",
                  "API",
                  "IMPORT",
                  "MANUAL",
                  "SYSTEM",
                  "WEBHOOK"
                ]
              }
            },
            "description": "The creator of the record"
          },
          "name": {
            "type": "string",
            "description": "The company name"
          },
          "accountOwnerId": {
            "type": "string",
            "format": "uuid"
          }
        },
        "example": {
          "domainName": {
            "primaryLinkLabel": "",
            "primaryLinkUrl": "https://left-descendant.net/",
            "additionalLinks": []
          },
          "linkedinLink": {
            "primaryLinkLabel": "",
            "primaryLinkUrl": "https://distant-vol.com/",
            "additionalLinks": []
          },
          "xLink": {
            "primaryLinkLabel": "",
            "primaryLinkUrl": "https://well-worn-octave.com/",
            "additionalLinks": []
          },
          "annualRecurringRevenue": {
            "amountMicros": 299000000,
            "currencyCode": "EUR"
          },
          "name": "Company name"
        }
      },
      "CompanyForUpdate": {
        "type": "object",
        "description": "A company",
        "properties": {
          "domainName": {
            "type": "object",
            "properties": {
              "primaryLinkLabel": {
                "type": "string"
              },
              "primaryLinkUrl": {
                "type": "string"
              },
              "secondaryLinks": {
                "type": "array",
                "items": {
                  "type": "object",
                  "description": "A secondary link",
                  "properties": {
                    "url": {
                      "type": "string",
                      "format": "uri"
                    },
                    "label": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": "The company website URL. We use this url to fetch the company icon"
          },
          "employees": {
            "type": "integer",
            "description": "Number of employees in the company"
          },
          "linkedinLink": {
            "type": "object",
            "properties": {
              "primaryLinkLabel": {
                "type": "string"
              },
              "primaryLinkUrl": {
                "type": "string"
              },
              "secondaryLinks": {
                "type": "array",
                "items": {
                  "type": "object",
                  "description": "A secondary link",
                  "properties": {
                    "url": {
                      "type": "string",
                      "format": "uri"
                    },
                    "label": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": "The company Linkedin account"
          },
          "xLink": {
            "type": "object",
            "properties": {
              "primaryLinkLabel": {
                "type": "string"
              },
              "primaryLinkUrl": {
                "type": "string"
              },
              "secondaryLinks": {
                "type": "array",
                "items": {
                  "type": "object",
                  "description": "A secondary link",
                  "properties": {
                    "url": {
                      "type": "string",
                      "format": "uri"
                    },
                    "label": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": "The company Twitter/X account"
          },
          "annualRecurringRevenue": {
            "type": "object",
            "properties": {
              "amountMicros": {
                "type": "number"
              },
              "currencyCode": {
                "type": "string"
              }
            },
            "description": "Annual Recurring Revenue: The actual or estimated annual revenue of the company"
          },
          "address": {
            "type": "object",
            "properties": {
              "addressStreet1": {
                "type": "string"
              },
              "addressStreet2": {
                "type": "string"
              },
              "addressCity": {
                "type": "string"
              },
              "addressPostcode": {
                "type": "string"
              },
              "addressState": {
                "type": "string"
              },
              "addressCountry": {
                "type": "string"
              },
              "addressLat": {
                "type": "number"
              },
              "addressLng": {
                "type": "number"
              }
            },
            "description": "Address of the company"
          },
          "idealCustomerProfile": {
            "type": "boolean",
            "description": "Ideal Customer Profile:  Indicates whether the company is the most suitable and valuable customer for you"
          },
          "position": {
            "type": "number",
            "description": "Company record position"
          },
          "createdBy": {
            "type": "object",
            "properties": {
              "source": {
                "type": "string",
                "enum": [
                  "EMAIL",
                  "CALENDAR",
                  "WORKFLOW",
                  "API",
                  "IMPORT",
                  "MANUAL",
                  "SYSTEM",
                  "WEBHOOK"
                ]
              }
            },
            "description": "The creator of the record"
          },
          "name": {
            "type": "string",
            "description": "The company name"
          },
          "accountOwnerId": {
            "type": "string",
            "format": "uuid"
          }
        },
        "example": {
          "domainName": {
            "primaryLinkLabel": "",
            "primaryLinkUrl": "https://phony-monocle.net/",
            "additionalLinks": []
          },
          "linkedinLink": {
            "primaryLinkLabel": "",
            "primaryLinkUrl": "https://muddy-deed.name",
            "additionalLinks": []
          },
          "xLink": {
            "primaryLinkLabel": "",
            "primaryLinkUrl": "https://empty-bowler.biz",
            "additionalLinks": []
          },
          "annualRecurringRevenue": {
            "amountMicros": 467000000,
            "currencyCode": "EUR"
          },
          "name": "Company name"
        }
      },
      "CompanyForResponse": {
        "type": "object",
        "description": "A company",
        "properties": {
          "domainName": {
            "type": "object",
            "properties": {
              "primaryLinkLabel": {
                "type": "string"
              },
              "primaryLinkUrl": {
                "type": "string"
              },
              "secondaryLinks": {
                "type": "array",
                "items": {
                  "type": "object",
                  "description": "A secondary link",
                  "properties": {
                    "url": {
                      "type": "string",
                      "format": "uri"
                    },
                    "label": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": "The company website URL. We use this url to fetch the company icon"
          },
          "employees": {
            "type": "integer",
            "description": "Number of employees in the company"
          },
          "linkedinLink": {
            "type": "object",
            "properties": {
              "primaryLinkLabel": {
                "type": "string"
              },
              "primaryLinkUrl": {
                "type": "string"
              },
              "secondaryLinks": {
                "type": "array",
                "items": {
                  "type": "object",
                  "description": "A secondary link",
                  "properties": {
                    "url": {
                      "type": "string",
                      "format": "uri"
                    },
                    "label": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": "The company Linkedin account"
          },
          "xLink": {
            "type": "object",
            "properties": {
              "primaryLinkLabel": {
                "type": "string"
              },
              "primaryLinkUrl": {
                "type": "string"
              },
              "secondaryLinks": {
                "type": "array",
                "items": {
                  "type": "object",
                  "description": "A secondary link",
                  "properties": {
                    "url": {
                      "type": "string",
                      "format": "uri"
                    },
                    "label": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": "The company Twitter/X account"
          },
          "annualRecurringRevenue": {
            "type": "object",
            "properties": {
              "amountMicros": {
                "type": "number"
              },
              "currencyCode": {
                "type": "string"
              }
            },
            "description": "Annual Recurring Revenue: The actual or estimated annual revenue of the company"
          },
          "address": {
            "type": "object",
            "properties": {
              "addressStreet1": {
                "type": "string"
              },
              "addressStreet2": {
                "type": "string"
              },
              "addressCity": {
                "type": "string"
              },
              "addressPostcode": {
                "type": "string"
              },
              "addressState": {
                "type": "string"
              },
              "addressCountry": {
                "type": "string"
              },
              "addressLat": {
                "type": "number"
              },
              "addressLng": {
                "type": "number"
              }
            },
            "description": "Address of the company"
          },
          "idealCustomerProfile": {
            "type": "boolean",
            "description": "Ideal Customer Profile:  Indicates whether the company is the most suitable and valuable customer for you"
          },
          "position": {
            "type": "number",
            "description": "Company record position"
          },
          "createdBy": {
            "type": "object",
            "properties": {
              "source": {
                "type": "string",
                "enum": [
                  "EMAIL",
                  "CALENDAR",
                  "WORKFLOW",
                  "API",
                  "IMPORT",
                  "MANUAL",
                  "SYSTEM",
                  "WEBHOOK"
                ]
              },
              "workspaceMemberId": {
                "type": "string",
                "format": "uuid"
              },
              "name": {
                "type": "string"
              }
            },
            "description": "The creator of the record"
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Id"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Creation date"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Last time the record was changed"
          },
          "deletedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Date when the record was deleted"
          },
          "name": {
            "type": "string",
            "description": "The company name"
          },
          "accountOwnerId": {
            "type": "string",
            "format": "uuid"
          },
          "people": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PersonForResponse"
            },
            "description": "People linked to the company."
          },
          "timelineActivities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TimelineActivityForResponse"
            },
            "description": "Timeline Activities linked to the company"
          },
          "attachments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AttachmentForResponse"
            },
            "description": "Attachments linked to the company"
          },
          "favorites": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FavoriteForResponse"
            },
            "description": "Favorites linked to the company"
          },
          "opportunities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OpportunityForResponse"
            },
            "description": "Opportunities linked to the company."
          },
          "noteTargets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NoteTargetForResponse"
            },
            "description": "Notes tied to the company"
          },
          "taskTargets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TaskTargetForResponse"
            },
            "description": "Tasks tied to the company"
          },
          "accountOwner": {
            "type": "object",
            "oneOf": [
              {
                "$ref": "#/components/schemas/WorkspaceMemberForResponse"
              }
            ],
            "description": "Your team member responsible for managing the company account"
          },
          "name1": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LeadsLinkedinScrapingForResponse"
            }
          }
        }
      },
      "ConnectedAccount": {
        "type": "object",
        "description": "A connected account",
        "properties": {
          "handleAliases": {
            "type": "string",
            "description": "Handle Aliases"
          },
          "authFailedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Auth failed at"
          },
          "lastSyncHistoryId": {
            "type": "string",
            "description": "Last sync history ID"
          },
          "refreshToken": {
            "type": "string",
            "description": "Messaging provider refresh token"
          },
          "accessToken": {
            "type": "string",
            "description": "Messaging provider access token"
          },
          "provider": {
            "type": "string",
            "description": "The account provider"
          },
          "handle": {
            "type": "string",
            "description": "The account handle (email, username, phone number, etc.)"
          },
          "connectionParameters": {
            "type": "object",
            "description": "JSON object containing custom connection parameters"
          },
          "accountOwnerId": {
            "type": "string",
            "format": "uuid"
          },
          "scopes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Scopes"
          }
        },
        "example": {

        }
      },
      "ConnectedAccountForUpdate": {
        "type": "object",
        "description": "A connected account",
        "properties": {
          "handleAliases": {
            "type": "string",
            "description": "Handle Aliases"
          },
          "authFailedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Auth failed at"
          },
          "lastSyncHistoryId": {
            "type": "string",
            "description": "Last sync history ID"
          },
          "refreshToken": {
            "type": "string",
            "description": "Messaging provider refresh token"
          },
          "accessToken": {
            "type": "string",
            "description": "Messaging provider access token"
          },
          "provider": {
            "type": "string",
            "description": "The account provider"
          },
          "handle": {
            "type": "string",
            "description": "The account handle (email, username, phone number, etc.)"
          },
          "connectionParameters": {
            "type": "object",
            "description": "JSON object containing custom connection parameters"
          },
          "accountOwnerId": {
            "type": "string",
            "format": "uuid"
          },
          "scopes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Scopes"
          }
        },
        "example": {

        }
      },
      "ConnectedAccountForResponse": {
        "type": "object",
        "description": "A connected account",
        "properties": {
          "handleAliases": {
            "type": "string",
            "description": "Handle Aliases"
          },
          "authFailedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Auth failed at"
          },
          "lastSyncHistoryId": {
            "type": "string",
            "description": "Last sync history ID"
          },
          "refreshToken": {
            "type": "string",
            "description": "Messaging provider refresh token"
          },
          "accessToken": {
            "type": "string",
            "description": "Messaging provider access token"
          },
          "provider": {
            "type": "string",
            "description": "The account provider"
          },
          "handle": {
            "type": "string",
            "description": "The account handle (email, username, phone number, etc.)"
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Id"
          },
          "connectionParameters": {
            "type": "object",
            "description": "JSON object containing custom connection parameters"
          },
          "accountOwnerId": {
            "type": "string",
            "format": "uuid"
          },
          "deletedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Date when the record was deleted"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Last time the record was changed"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Creation date"
          },
          "scopes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Scopes"
          },
          "calendarChannels": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CalendarChannelForResponse"
            },
            "description": "Calendar Channels"
          },
          "messageChannels": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MessageChannelForResponse"
            },
            "description": "Message Channels"
          },
          "accountOwner": {
            "type": "object",
            "oneOf": [
              {
                "$ref": "#/components/schemas/WorkspaceMemberForResponse"
              }
            ],
            "description": "Account Owner"
          }
        }
      },
      "FavoriteFolder": {
        "type": "object",
        "description": "A Folder of favorites",
        "properties": {
          "position": {
            "type": "integer",
            "description": "Favorite folder position"
          },
          "name": {
            "type": "string",
            "description": "Name of the favorite folder"
          }
        },
        "example": {
          "name": "Favorite Folder name"
        }
      },
      "FavoriteFolderForUpdate": {
        "type": "object",
        "description": "A Folder of favorites",
        "properties": {
          "position": {
            "type": "integer",
            "description": "Favorite folder position"
          },
          "name": {
            "type": "string",
            "description": "Name of the favorite folder"
          }
        },
        "example": {
          "name": "Favorite Folder name"
        }
      },
      "FavoriteFolderForResponse": {
        "type": "object",
        "description": "A Folder of favorites",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Id"
          },
          "position": {
            "type": "integer",
            "description": "Favorite folder position"
          },
          "name": {
            "type": "string",
            "description": "Name of the favorite folder"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Creation date"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Last time the record was changed"
          },
          "deletedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Date when the record was deleted"
          },
          "favorites": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FavoriteForResponse"
            },
            "description": "Favorites in this folder"
          }
        }
      },
      "Favorite": {
        "type": "object",
        "description": "A favorite that can be accessed from the left menu",
        "properties": {
          "noteId": {
            "type": "string",
            "format": "uuid"
          },
          "taskId": {
            "type": "string",
            "format": "uuid"
          },
          "workflowRunId": {
            "type": "string",
            "format": "uuid"
          },
          "workflowVersionId": {
            "type": "string",
            "format": "uuid"
          },
          "workflowId": {
            "type": "string",
            "format": "uuid"
          },
          "opportunityId": {
            "type": "string",
            "format": "uuid"
          },
          "favoriteFolderId": {
            "type": "string",
            "format": "uuid"
          },
          "companyId": {
            "type": "string",
            "format": "uuid"
          },
          "personId": {
            "type": "string",
            "format": "uuid"
          },
          "forWorkspaceMemberId": {
            "type": "string",
            "format": "uuid"
          },
          "viewId": {
            "type": "string",
            "format": "uuid",
            "description": "ViewId"
          },
          "position": {
            "type": "integer",
            "description": "Favorite position"
          },
          "leadsLinkedinScrapingId": {
            "type": "string",
            "format": "uuid"
          }
        },
        "example": {

        }
      },
      "FavoriteForUpdate": {
        "type": "object",
        "description": "A favorite that can be accessed from the left menu",
        "properties": {
          "noteId": {
            "type": "string",
            "format": "uuid"
          },
          "taskId": {
            "type": "string",
            "format": "uuid"
          },
          "workflowRunId": {
            "type": "string",
            "format": "uuid"
          },
          "workflowVersionId": {
            "type": "string",
            "format": "uuid"
          },
          "workflowId": {
            "type": "string",
            "format": "uuid"
          },
          "opportunityId": {
            "type": "string",
            "format": "uuid"
          },
          "favoriteFolderId": {
            "type": "string",
            "format": "uuid"
          },
          "companyId": {
            "type": "string",
            "format": "uuid"
          },
          "personId": {
            "type": "string",
            "format": "uuid"
          },
          "forWorkspaceMemberId": {
            "type": "string",
            "format": "uuid"
          },
          "viewId": {
            "type": "string",
            "format": "uuid",
            "description": "ViewId"
          },
          "position": {
            "type": "integer",
            "description": "Favorite position"
          },
          "leadsLinkedinScrapingId": {
            "type": "string",
            "format": "uuid"
          }
        },
        "example": {

        }
      },
      "FavoriteForResponse": {
        "type": "object",
        "description": "A favorite that can be accessed from the left menu",
        "properties": {
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Last time the record was changed"
          },
          "noteId": {
            "type": "string",
            "format": "uuid"
          },
          "taskId": {
            "type": "string",
            "format": "uuid"
          },
          "workflowRunId": {
            "type": "string",
            "format": "uuid"
          },
          "workflowVersionId": {
            "type": "string",
            "format": "uuid"
          },
          "workflowId": {
            "type": "string",
            "format": "uuid"
          },
          "opportunityId": {
            "type": "string",
            "format": "uuid"
          },
          "favoriteFolderId": {
            "type": "string",
            "format": "uuid"
          },
          "companyId": {
            "type": "string",
            "format": "uuid"
          },
          "personId": {
            "type": "string",
            "format": "uuid"
          },
          "forWorkspaceMemberId": {
            "type": "string",
            "format": "uuid"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Creation date"
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Id"
          },
          "viewId": {
            "type": "string",
            "format": "uuid",
            "description": "ViewId"
          },
          "position": {
            "type": "integer",
            "description": "Favorite position"
          },
          "deletedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Date when the record was deleted"
          },
          "leadsLinkedinScrapingId": {
            "type": "string",
            "format": "uuid"
          },
          "note": {
            "type": "object",
            "oneOf": [
              {
                "$ref": "#/components/schemas/NoteForResponse"
              }
            ],
            "description": "Favorite note"
          },
          "task": {
            "type": "object",
            "oneOf": [
              {
                "$ref": "#/components/schemas/TaskForResponse"
              }
            ],
            "description": "Favorite task"
          },
          "workflowRun": {
            "type": "object",
            "oneOf": [
              {
                "$ref": "#/components/schemas/WorkflowRunForResponse"
              }
            ],
            "description": "Favorite workflow run"
          },
          "workflowVersion": {
            "type": "object",
            "oneOf": [
              {
                "$ref": "#/components/schemas/WorkflowVersionForResponse"
              }
            ],
            "description": "Favorite workflow version"
          },
          "workflow": {
            "type": "object",
            "oneOf": [
              {
                "$ref": "#/components/schemas/WorkflowForResponse"
              }
            ],
            "description": "Favorite workflow"
          },
          "opportunity": {
            "type": "object",
            "oneOf": [
              {
                "$ref": "#/components/schemas/OpportunityForResponse"
              }
            ],
            "description": "Favorite opportunity"
          },
          "favoriteFolder": {
            "type": "object",
            "oneOf": [
              {
                "$ref": "#/components/schemas/FavoriteFolderForResponse"
              }
            ],
            "description": "The folder this favorite belongs to"
          },
          "company": {
            "type": "object",
            "oneOf": [
              {
                "$ref": "#/components/schemas/CompanyForResponse"
              }
            ],
            "description": "Favorite company"
          },
          "person": {
            "type": "object",
            "oneOf": [
              {
                "$ref": "#/components/schemas/PersonForResponse"
              }
            ],
            "description": "Favorite person"
          },
          "forWorkspaceMember": {
            "type": "object",
            "oneOf": [
              {
                "$ref": "#/components/schemas/WorkspaceMemberForResponse"
              }
            ],
            "description": "Favorite workspace member"
          },
          "leadsLinkedinScraping": {
            "type": "object",
            "oneOf": [
              {
                "$ref": "#/components/schemas/LeadsLinkedinScrapingForResponse"
              }
            ],
            "description": "Favorites Leads - LinkedIn Scraping"
          }
        }
      },
      "LeadsLinkedinScraping": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name"
          },
          "companyId": {
            "type": "string",
            "format": "uuid"
          },
          "postUrl": {
            "type": "object",
            "properties": {
              "primaryLinkLabel": {
                "type": "string"
              },
              "primaryLinkUrl": {
                "type": "string"
              },
              "secondaryLinks": {
                "type": "array",
                "items": {
                  "type": "object",
                  "description": "A secondary link",
                  "properties": {
                    "url": {
                      "type": "string",
                      "format": "uri"
                    },
                    "label": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "jobTitle": {
            "type": "string"
          },
          "authorName": {
            "type": "string"
          },
          "authorHeadline": {
            "type": "string"
          },
          "authorLinkedinProfileId": {
            "type": "string",
            "format": "uuid"
          },
          "location": {
            "type": "object",
            "properties": {
              "addressStreet1": {
                "type": "string"
              },
              "addressStreet2": {
                "type": "string"
              },
              "addressCity": {
                "type": "string"
              },
              "addressPostcode": {
                "type": "string"
              },
              "addressState": {
                "type": "string"
              },
              "addressCountry": {
                "type": "string"
              },
              "addressLat": {
                "type": "number"
              },
              "addressLng": {
                "type": "number"
              }
            }
          },
          "notes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "jobApplicationLink": {
            "type": "object",
            "properties": {
              "primaryLinkLabel": {
                "type": "string"
              },
              "primaryLinkUrl": {
                "type": "string"
              },
              "secondaryLinks": {
                "type": "array",
                "items": {
                  "type": "object",
                  "description": "A secondary link",
                  "properties": {
                    "url": {
                      "type": "string",
                      "format": "uri"
                    },
                    "label": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "createdBy": {
            "type": "object",
            "properties": {
              "source": {
                "type": "string",
                "enum": [
                  "EMAIL",
                  "CALENDAR",
                  "WORKFLOW",
                  "API",
                  "IMPORT",
                  "MANUAL",
                  "SYSTEM",
                  "WEBHOOK"
                ]
              }
            },
            "description": "The creator of the record"
          },
          "position": {
            "type": "number",
            "description": "Position"
          }
        },
        "example": {
          "name": "Leads Linkedin Scraping name",
          "postUrl": {
            "primaryLinkLabel": "",
            "primaryLinkUrl": "https://ultimate-hammock.com",
            "additionalLinks": []
          },
          "jobApplicationLink": {
            "primaryLinkLabel": "",
            "primaryLinkUrl": "https://affectionate-flood.net/",
            "additionalLinks": []
          }
        }
      },
      "LeadsLinkedinScrapingForUpdate": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name"
          },
          "companyId": {
            "type": "string",
            "format": "uuid"
          },
          "postUrl": {
            "type": "object",
            "properties": {
              "primaryLinkLabel": {
                "type": "string"
              },
              "primaryLinkUrl": {
                "type": "string"
              },
              "secondaryLinks": {
                "type": "array",
                "items": {
                  "type": "object",
                  "description": "A secondary link",
                  "properties": {
                    "url": {
                      "type": "string",
                      "format": "uri"
                    },
                    "label": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "jobTitle": {
            "type": "string"
          },
          "authorName": {
            "type": "string"
          },
          "authorHeadline": {
            "type": "string"
          },
          "authorLinkedinProfileId": {
            "type": "string",
            "format": "uuid"
          },
          "location": {
            "type": "object",
            "properties": {
              "addressStreet1": {
                "type": "string"
              },
              "addressStreet2": {
                "type": "string"
              },
              "addressCity": {
                "type": "string"
              },
              "addressPostcode": {
                "type": "string"
              },
              "addressState": {
                "type": "string"
              },
              "addressCountry": {
                "type": "string"
              },
              "addressLat": {
                "type": "number"
              },
              "addressLng": {
                "type": "number"
              }
            }
          },
          "notes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "jobApplicationLink": {
            "type": "object",
            "properties": {
              "primaryLinkLabel": {
                "type": "string"
              },
              "primaryLinkUrl": {
                "type": "string"
              },
              "secondaryLinks": {
                "type": "array",
                "items": {
                  "type": "object",
                  "description": "A secondary link",
                  "properties": {
                    "url": {
                      "type": "string",
                      "format": "uri"
                    },
                    "label": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "createdBy": {
            "type": "object",
            "properties": {
              "source": {
                "type": "string",
                "enum": [
                  "EMAIL",
                  "CALENDAR",
                  "WORKFLOW",
                  "API",
                  "IMPORT",
                  "MANUAL",
                  "SYSTEM",
                  "WEBHOOK"
                ]
              }
            },
            "description": "The creator of the record"
          },
          "position": {
            "type": "number",
            "description": "Position"
          }
        },
        "example": {
          "name": "Leads Linkedin Scraping name",
          "postUrl": {
            "primaryLinkLabel": "",
            "primaryLinkUrl": "https://wide-eyed-pronoun.net",
            "additionalLinks": []
          },
          "jobApplicationLink": {
            "primaryLinkLabel": "",
            "primaryLinkUrl": "https://likable-pilot.info",
            "additionalLinks": []
          }
        }
      },
      "LeadsLinkedinScrapingForResponse": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name"
          },
          "companyId": {
            "type": "string",
            "format": "uuid"
          },
          "postUrl": {
            "type": "object",
            "properties": {
              "primaryLinkLabel": {
                "type": "string"
              },
              "primaryLinkUrl": {
                "type": "string"
              },
              "secondaryLinks": {
                "type": "array",
                "items": {
                  "type": "object",
                  "description": "A secondary link",
                  "properties": {
                    "url": {
                      "type": "string",
                      "format": "uri"
                    },
                    "label": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "jobTitle": {
            "type": "string"
          },
          "authorName": {
            "type": "string"
          },
          "authorHeadline": {
            "type": "string"
          },
          "authorLinkedinProfileId": {
            "type": "string",
            "format": "uuid"
          },
          "location": {
            "type": "object",
            "properties": {
              "addressStreet1": {
                "type": "string"
              },
              "addressStreet2": {
                "type": "string"
              },
              "addressCity": {
                "type": "string"
              },
              "addressPostcode": {
                "type": "string"
              },
              "addressState": {
                "type": "string"
              },
              "addressCountry": {
                "type": "string"
              },
              "addressLat": {
                "type": "number"
              },
              "addressLng": {
                "type": "number"
              }
            }
          },
          "notes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "jobApplicationLink": {
            "type": "object",
            "properties": {
              "primaryLinkLabel": {
                "type": "string"
              },
              "primaryLinkUrl": {
                "type": "string"
              },
              "secondaryLinks": {
                "type": "array",
                "items": {
                  "type": "object",
                  "description": "A secondary link",
                  "properties": {
                    "url": {
                      "type": "string",
                      "format": "uri"
                    },
                    "label": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Id"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Creation date"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Last time the record was changed"
          },
          "deletedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Deletion date"
          },
          "createdBy": {
            "type": "object",
            "properties": {
              "source": {
                "type": "string",
                "enum": [
                  "EMAIL",
                  "CALENDAR",
                  "WORKFLOW",
                  "API",
                  "IMPORT",
                  "MANUAL",
                  "SYSTEM",
                  "WEBHOOK"
                ]
              },
              "workspaceMemberId": {
                "type": "string",
                "format": "uuid"
              },
              "name": {
                "type": "string"
              }
            },
            "description": "The creator of the record"
          },
          "position": {
            "type": "number",
            "description": "Position"
          },
          "company": {
            "type": "object",
            "oneOf": [
              {
                "$ref": "#/components/schemas/CompanyForResponse"
              }
            ]
          },
          "authorLinkedinProfile": {
            "type": "object",
            "oneOf": [
              {
                "$ref": "#/components/schemas/PersonForResponse"
              }
            ]
          },
          "timelineActivities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TimelineActivityForResponse"
            },
            "description": "TimelineActivities tied to the Leads - LinkedIn Scraping"
          },
          "favorites": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FavoriteForResponse"
            },
            "description": "Favorites tied to the Leads - LinkedIn Scraping"
          },
          "attachments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AttachmentForResponse"
            },
            "description": "Attachments tied to the Leads - LinkedIn Scraping"
          },
          "noteTargets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NoteTargetForResponse"
            },
            "description": "NoteTargets tied to the Leads - LinkedIn Scraping"
          },
          "taskTargets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TaskTargetForResponse"
            },
            "description": "TaskTargets tied to the Leads - LinkedIn Scraping"
          }
        }
      },
      "MessageChannelMessageAssociation": {
        "type": "object",
        "description": "Message Synced with a Message Channel",
        "properties": {
          "messageThreadExternalId": {
            "type": "string",
            "description": "Thread id from the messaging provider"
          },
          "direction": {
            "type": "string",
            "enum": [
              "INCOMING",
              "OUTGOING"
            ],
            "description": "Message Direction"
          },
          "messageExternalId": {
            "type": "string",
            "description": "Message id from the messaging provider"
          },
          "messageChannelId": {
            "type": "string",
            "format": "uuid"
          },
          "messageId": {
            "type": "string",
            "format": "uuid"
          }
        },
        "example": {
          "direction": [
            "INCOMING"
          ]
        }
      },
      "MessageChannelMessageAssociationForUpdate": {
        "type": "object",
        "description": "Message Synced with a Message Channel",
        "properties": {
          "messageThreadExternalId": {
            "type": "string",
            "description": "Thread id from the messaging provider"
          },
          "direction": {
            "type": "string",
            "enum": [
              "INCOMING",
              "OUTGOING"
            ],
            "description": "Message Direction"
          },
          "messageExternalId": {
            "type": "string",
            "description": "Message id from the messaging provider"
          },
          "messageChannelId": {
            "type": "string",
            "format": "uuid"
          },
          "messageId": {
            "type": "string",
            "format": "uuid"
          }
        },
        "example": {
          "direction": [
            "INCOMING"
          ]
        }
      },
      "MessageChannelMessageAssociationForResponse": {
        "type": "object",
        "description": "Message Synced with a Message Channel",
        "properties": {
          "messageThreadExternalId": {
            "type": "string",
            "description": "Thread id from the messaging provider"
          },
          "direction": {
            "type": "string",
            "enum": [
              "INCOMING",
              "OUTGOING"
            ],
            "description": "Message Direction"
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Id"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Creation date"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Last time the record was changed"
          },
          "deletedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Date when the record was deleted"
          },
          "messageExternalId": {
            "type": "string",
            "description": "Message id from the messaging provider"
          },
          "messageChannelId": {
            "type": "string",
            "format": "uuid"
          },
          "messageId": {
            "type": "string",
            "format": "uuid"
          },
          "messageChannel": {
            "type": "object",
            "oneOf": [
              {
                "$ref": "#/components/schemas/MessageChannelForResponse"
              }
            ],
            "description": "Message Channel Id"
          },
          "message": {
            "type": "object",
            "oneOf": [
              {
                "$ref": "#/components/schemas/MessageForResponse"
              }
            ],
            "description": "Message Id"
          }
        }
      },
      "MessageChannel": {
        "type": "object",
        "description": "Message Channels",
        "properties": {
          "throttleFailureCount": {
            "type": "integer",
            "description": "Throttle Failure Count"
          },
          "syncStageStartedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Sync stage started at"
          },
          "syncStage": {
            "type": "string",
            "enum": [
              "MESSAGE_LIST_FETCH_PENDING",
              "MESSAGE_LIST_FETCH_SCHEDULED",
              "MESSAGE_LIST_FETCH_ONGOING",
              "MESSAGES_IMPORT_PENDING",
              "MESSAGES_IMPORT_SCHEDULED",
              "MESSAGES_IMPORT_ONGOING",
              "FAILED",
              "FULL_MESSAGE_LIST_FETCH_PENDING",
              "PARTIAL_MESSAGE_LIST_FETCH_PENDING"
            ],
            "description": "Sync stage"
          },
          "syncStatus": {
            "type": "string",
            "enum": [
              "ONGOING",
              "NOT_SYNCED",
              "ACTIVE",
              "FAILED_INSUFFICIENT_PERMISSIONS",
              "FAILED_UNKNOWN"
            ],
            "description": "Sync status"
          },
          "syncedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Last sync date"
          },
          "syncCursor": {
            "type": "string",
            "description": "Last sync cursor"
          },
          "isSyncEnabled": {
            "type": "boolean",
            "description": "Is Sync Enabled"
          },
          "excludeGroupEmails": {
            "type": "boolean",
            "description": "Exclude group emails"
          },
          "excludeNonProfessionalEmails": {
            "type": "boolean",
            "description": "Exclude non professional emails"
          },
          "messageFolderImportPolicy": {
            "type": "string",
            "enum": [
              "ALL_FOLDERS",
              "SELECTED_FOLDERS"
            ],
            "description": "Message folder import policy"
          },
          "contactAutoCreationPolicy": {
            "type": "string",
            "enum": [
              "SENT_AND_RECEIVED",
              "SENT",
              "NONE"
            ],
            "description": "Automatically create People records when receiving or sending emails"
          },
          "isContactAutoCreationEnabled": {
            "type": "boolean",
            "description": "Is Contact Auto Creation Enabled"
          },
          "type": {
            "type": "string",
            "enum": [
              "email",
              "sms"
            ],
            "description": "Channel Type"
          },
          "handle": {
            "type": "string",
            "description": "Handle"
          },
          "visibility": {
            "type": "string",
            "enum": [
              "METADATA",
              "SUBJECT",
              "SHARE_EVERYTHING"
            ],
            "description": "Visibility"
          },
          "connectedAccountId": {
            "type": "string",
            "format": "uuid"
          }
        },
        "example": {
          "syncStage": [
            "MESSAGE_LIST_FETCH_PENDING"
          ],
          "syncStatus": [
            "ONGOING"
          ],
          "messageFolderImportPolicy": [
            "ALL_FOLDERS"
          ],
          "contactAutoCreationPolicy": [
            "SENT_AND_RECEIVED"
          ],
          "type": [
            "email"
          ],
          "visibility": [
            "METADATA"
          ]
        }
      },
      "MessageChannelForUpdate": {
        "type": "object",
        "description": "Message Channels",
        "properties": {
          "throttleFailureCount": {
            "type": "integer",
            "description": "Throttle Failure Count"
          },
          "syncStageStartedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Sync stage started at"
          },
          "syncStage": {
            "type": "string",
            "enum": [
              "MESSAGE_LIST_FETCH_PENDING",
              "MESSAGE_LIST_FETCH_SCHEDULED",
              "MESSAGE_LIST_FETCH_ONGOING",
              "MESSAGES_IMPORT_PENDING",
              "MESSAGES_IMPORT_SCHEDULED",
              "MESSAGES_IMPORT_ONGOING",
              "FAILED",
              "FULL_MESSAGE_LIST_FETCH_PENDING",
              "PARTIAL_MESSAGE_LIST_FETCH_PENDING"
            ],
            "description": "Sync stage"
          },
          "syncStatus": {
            "type": "string",
            "enum": [
              "ONGOING",
              "NOT_SYNCED",
              "ACTIVE",
              "FAILED_INSUFFICIENT_PERMISSIONS",
              "FAILED_UNKNOWN"
            ],
            "description": "Sync status"
          },
          "syncedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Last sync date"
          },
          "syncCursor": {
            "type": "string",
            "description": "Last sync cursor"
          },
          "isSyncEnabled": {
            "type": "boolean",
            "description": "Is Sync Enabled"
          },
          "excludeGroupEmails": {
            "type": "boolean",
            "description": "Exclude group emails"
          },
          "excludeNonProfessionalEmails": {
            "type": "boolean",
            "description": "Exclude non professional emails"
          },
          "messageFolderImportPolicy": {
            "type": "string",
            "enum": [
              "ALL_FOLDERS",
              "SELECTED_FOLDERS"
            ],
            "description": "Message folder import policy"
          },
          "contactAutoCreationPolicy": {
            "type": "string",
            "enum": [
              "SENT_AND_RECEIVED",
              "SENT",
              "NONE"
            ],
            "description": "Automatically create People records when receiving or sending emails"
          },
          "isContactAutoCreationEnabled": {
            "type": "boolean",
            "description": "Is Contact Auto Creation Enabled"
          },
          "type": {
            "type": "string",
            "enum": [
              "email",
              "sms"
            ],
            "description": "Channel Type"
          },
          "handle": {
            "type": "string",
            "description": "Handle"
          },
          "visibility": {
            "type": "string",
            "enum": [
              "METADATA",
              "SUBJECT",
              "SHARE_EVERYTHING"
            ],
            "description": "Visibility"
          },
          "connectedAccountId": {
            "type": "string",
            "format": "uuid"
          }
        },
        "example": {
          "syncStage": [
            "MESSAGE_LIST_FETCH_PENDING"
          ],
          "syncStatus": [
            "ONGOING"
          ],
          "messageFolderImportPolicy": [
            "ALL_FOLDERS"
          ],
          "contactAutoCreationPolicy": [
            "SENT_AND_RECEIVED"
          ],
          "type": [
            "email"
          ],
          "visibility": [
            "METADATA"
          ]
        }
      },
      "MessageChannelForResponse": {
        "type": "object",
        "description": "Message Channels",
        "properties": {
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Last time the record was changed"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Creation date"
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Id"
          },
          "throttleFailureCount": {
            "type": "integer",
            "description": "Throttle Failure Count"
          },
          "syncStageStartedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Sync stage started at"
          },
          "syncStage": {
            "type": "string",
            "enum": [
              "MESSAGE_LIST_FETCH_PENDING",
              "MESSAGE_LIST_FETCH_SCHEDULED",
              "MESSAGE_LIST_FETCH_ONGOING",
              "MESSAGES_IMPORT_PENDING",
              "MESSAGES_IMPORT_SCHEDULED",
              "MESSAGES_IMPORT_ONGOING",
              "FAILED",
              "FULL_MESSAGE_LIST_FETCH_PENDING",
              "PARTIAL_MESSAGE_LIST_FETCH_PENDING"
            ],
            "description": "Sync stage"
          },
          "syncStatus": {
            "type": "string",
            "enum": [
              "ONGOING",
              "NOT_SYNCED",
              "ACTIVE",
              "FAILED_INSUFFICIENT_PERMISSIONS",
              "FAILED_UNKNOWN"
            ],
            "description": "Sync status"
          },
          "syncedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Last sync date"
          },
          "syncCursor": {
            "type": "string",
            "description": "Last sync cursor"
          },
          "isSyncEnabled": {
            "type": "boolean",
            "description": "Is Sync Enabled"
          },
          "excludeGroupEmails": {
            "type": "boolean",
            "description": "Exclude group emails"
          },
          "excludeNonProfessionalEmails": {
            "type": "boolean",
            "description": "Exclude non professional emails"
          },
          "messageFolderImportPolicy": {
            "type": "string",
            "enum": [
              "ALL_FOLDERS",
              "SELECTED_FOLDERS"
            ],
            "description": "Message folder import policy"
          },
          "contactAutoCreationPolicy": {
            "type": "string",
            "enum": [
              "SENT_AND_RECEIVED",
              "SENT",
              "NONE"
            ],
            "description": "Automatically create People records when receiving or sending emails"
          },
          "isContactAutoCreationEnabled": {
            "type": "boolean",
            "description": "Is Contact Auto Creation Enabled"
          },
          "type": {
            "type": "string",
            "enum": [
              "email",
              "sms"
            ],
            "description": "Channel Type"
          },
          "handle": {
            "type": "string",
            "description": "Handle"
          },
          "visibility": {
            "type": "string",
            "enum": [
              "METADATA",
              "SUBJECT",
              "SHARE_EVERYTHING"
            ],
            "description": "Visibility"
          },
          "connectedAccountId": {
            "type": "string",
            "format": "uuid"
          },
          "deletedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Date when the record was deleted"
          },
          "messageChannelMessageAssociations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MessageChannelMessageAssociationForResponse"
            },
            "description": "Messages from the channel."
          },
          "messageFolders": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MessageFolderForResponse"
            },
            "description": "Message Folders"
          },
          "connectedAccount": {
            "type": "object",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ConnectedAccountForResponse"
              }
            ],
            "description": "Connected Account"
          }
        }
      },
      "MessageFolder": {
        "type": "object",
        "description": "Folder for Message Channel",
        "properties": {
          "externalId": {
            "type": "string",
            "description": "External ID"
          },
          "isSynced": {
            "type": "boolean",
            "description": "Is Synced"
          },
          "isSentFolder": {
            "type": "boolean",
            "description": "Is Sent Folder"
          },
          "syncCursor": {
            "type": "string",
            "description": "Sync Cursor"
          },
          "name": {
            "type": "string",
            "description": "Folder name"
          },
          "messageChannelId": {
            "type": "string",
            "format": "uuid"
          }
        },
        "example": {
          "name": "Message Folder name"
        }
      },
      "MessageFolderForUpdate": {
        "type": "object",
        "description": "Folder for Message Channel",
        "properties": {
          "externalId": {
            "type": "string",
            "description": "External ID"
          },
          "isSynced": {
            "type": "boolean",
            "description": "Is Synced"
          },
          "isSentFolder": {
            "type": "boolean",
            "description": "Is Sent Folder"
          },
          "syncCursor": {
            "type": "string",
            "description": "Sync Cursor"
          },
          "name": {
            "type": "string",
            "description": "Folder name"
          },
          "messageChannelId": {
            "type": "string",
            "format": "uuid"
          }
        },
        "example": {
          "name": "Message Folder name"
        }
      },
      "MessageFolderForResponse": {
        "type": "object",
        "description": "Folder for Message Channel",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Id"
          },
          "externalId": {
            "type": "string",
            "description": "External ID"
          },
          "isSynced": {
            "type": "boolean",
            "description": "Is Synced"
          },
          "isSentFolder": {
            "type": "boolean",
            "description": "Is Sent Folder"
          },
          "syncCursor": {
            "type": "string",
            "description": "Sync Cursor"
          },
          "name": {
            "type": "string",
            "description": "Folder name"
          },
          "deletedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Date when the record was deleted"
          },
          "messageChannelId": {
            "type": "string",
            "format": "uuid"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Creation date"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Last time the record was changed"
          },
          "messageChannel": {
            "type": "object",
            "oneOf": [
              {
                "$ref": "#/components/schemas/MessageChannelForResponse"
              }
            ],
            "description": "Message Channel"
          }
        }
      },
      "MessageParticipant": {
        "type": "object",
        "description": "Message Participants",
        "properties": {
          "displayName": {
            "type": "string",
            "description": "Display Name"
          },
          "handle": {
            "type": "string",
            "description": "Handle"
          },
          "role": {
            "type": "string",
            "enum": [
              "from",
              "to",
              "cc",
              "bcc"
            ],
            "description": "Role"
          },
          "personId": {
            "type": "string",
            "format": "uuid"
          },
          "messageId": {
            "type": "string",
            "format": "uuid"
          },
          "workspaceMemberId": {
            "type": "string",
            "format": "uuid"
          }
        },
        "example": {
          "role": [
            "from"
          ]
        }
      },
      "MessageParticipantForUpdate": {
        "type": "object",
        "description": "Message Participants",
        "properties": {
          "displayName": {
            "type": "string",
            "description": "Display Name"
          },
          "handle": {
            "type": "string",
            "description": "Handle"
          },
          "role": {
            "type": "string",
            "enum": [
              "from",
              "to",
              "cc",
              "bcc"
            ],
            "description": "Role"
          },
          "personId": {
            "type": "string",
            "format": "uuid"
          },
          "messageId": {
            "type": "string",
            "format": "uuid"
          },
          "workspaceMemberId": {
            "type": "string",
            "format": "uuid"
          }
        },
        "example": {
          "role": [
            "from"
          ]
        }
      },
      "MessageParticipantForResponse": {
        "type": "object",
        "description": "Message Participants",
        "properties": {
          "displayName": {
            "type": "string",
            "description": "Display Name"
          },
          "handle": {
            "type": "string",
            "description": "Handle"
          },
          "role": {
            "type": "string",
            "enum": [
              "from",
              "to",
              "cc",
              "bcc"
            ],
            "description": "Role"
          },
          "personId": {
            "type": "string",
            "format": "uuid"
          },
          "messageId": {
            "type": "string",
            "format": "uuid"
          },
          "workspaceMemberId": {
            "type": "string",
            "format": "uuid"
          },
          "deletedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Date when the record was deleted"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Last time the record was changed"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Creation date"
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Id"
          },
          "person": {
            "type": "object",
            "oneOf": [
              {
                "$ref": "#/components/schemas/PersonForResponse"
              }
            ],
            "description": "Person"
          },
          "message": {
            "type": "object",
            "oneOf": [
              {
                "$ref": "#/components/schemas/MessageForResponse"
              }
            ],
            "description": "Message"
          },
          "workspaceMember": {
            "type": "object",
            "oneOf": [
              {
                "$ref": "#/components/schemas/WorkspaceMemberForResponse"
              }
            ],
            "description": "Workspace member"
          }
        }
      },
      "Message": {
        "type": "object",
        "description": "A message sent or received through a messaging channel (email, chat, etc.)",
        "properties": {
          "receivedAt": {
            "type": "string",
            "format": "date-time",
            "description": "The date the message was received"
          },
          "messageThreadId": {
            "type": "string",
            "format": "uuid"
          },
          "headerMessageId": {
            "type": "string",
            "description": "Message id from the message header"
          },
          "subject": {
            "type": "string",
            "description": "Subject"
          },
          "text": {
            "type": "string",
            "description": "Text"
          }
        },
        "example": {

        }
      },
      "MessageForUpdate": {
        "type": "object",
        "description": "A message sent or received through a messaging channel (email, chat, etc.)",
        "properties": {
          "receivedAt": {
            "type": "string",
            "format": "date-time",
            "description": "The date the message was received"
          },
          "messageThreadId": {
            "type": "string",
            "format": "uuid"
          },
          "headerMessageId": {
            "type": "string",
            "description": "Message id from the message header"
          },
          "subject": {
            "type": "string",
            "description": "Subject"
          },
          "text": {
            "type": "string",
            "description": "Text"
          }
        },
        "example": {

        }
      },
      "MessageForResponse": {
        "type": "object",
        "description": "A message sent or received through a messaging channel (email, chat, etc.)",
        "properties": {
          "receivedAt": {
            "type": "string",
            "format": "date-time",
            "description": "The date the message was received"
          },
          "messageThreadId": {
            "type": "string",
            "format": "uuid"
          },
          "headerMessageId": {
            "type": "string",
            "description": "Message id from the message header"
          },
          "subject": {
            "type": "string",
            "description": "Subject"
          },
          "text": {
            "type": "string",
            "description": "Text"
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Id"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Creation date"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Last time the record was changed"
          },
          "deletedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Date when the record was deleted"
          },
          "messageParticipants": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MessageParticipantForResponse"
            },
            "description": "Message Participants"
          },
          "messageThread": {
            "type": "object",
            "oneOf": [
              {
                "$ref": "#/components/schemas/MessageThreadForResponse"
              }
            ],
            "description": "Message Thread Id"
          },
          "messageChannelMessageAssociations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MessageChannelMessageAssociationForResponse"
            },
            "description": "Messages from the channel."
          }
        }
      },
      "MessageThread": {
        "type": "object",
        "description": "A group of related messages (e.g. email thread, chat thread)",
        "properties": {

        },
        "example": {

        }
      },
      "MessageThreadForUpdate": {
        "type": "object",
        "description": "A group of related messages (e.g. email thread, chat thread)",
        "properties": {

        },
        "example": {

        }
      },
      "MessageThreadForResponse": {
        "type": "object",
        "description": "A group of related messages (e.g. email thread, chat thread)",
        "properties": {
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Creation date"
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Id"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Last time the record was changed"
          },
          "deletedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Date when the record was deleted"
          },
          "messages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MessageForResponse"
            },
            "description": "Messages from the thread."
          }
        }
      },
      "Note": {
        "type": "object",
        "description": "A note",
        "properties": {
          "createdBy": {
            "type": "object",
            "properties": {
              "source": {
                "type": "string",
                "enum": [
                  "EMAIL",
                  "CALENDAR",
                  "WORKFLOW",
                  "API",
                  "IMPORT",
                  "MANUAL",
                  "SYSTEM",
                  "WEBHOOK"
                ]
              }
            },
            "description": "The creator of the record"
          },
          "bodyV2": {
            "type": "object",
            "properties": {
              "blocknote": {
                "type": "string"
              },
              "markdown": {
                "type": "string"
              }
            },
            "description": "Note body"
          },
          "title": {
            "type": "string",
            "description": "Note title"
          },
          "position": {
            "type": "number",
            "description": "Note record position"
          }
        },
        "example": {

        }
      },
      "NoteForUpdate": {
        "type": "object",
        "description": "A note",
        "properties": {
          "createdBy": {
            "type": "object",
            "properties": {
              "source": {
                "type": "string",
                "enum": [
                  "EMAIL",
                  "CALENDAR",
                  "WORKFLOW",
                  "API",
                  "IMPORT",
                  "MANUAL",
                  "SYSTEM",
                  "WEBHOOK"
                ]
              }
            },
            "description": "The creator of the record"
          },
          "bodyV2": {
            "type": "object",
            "properties": {
              "blocknote": {
                "type": "string"
              },
              "markdown": {
                "type": "string"
              }
            },
            "description": "Note body"
          },
          "title": {
            "type": "string",
            "description": "Note title"
          },
          "position": {
            "type": "number",
            "description": "Note record position"
          }
        },
        "example": {

        }
      },
      "NoteForResponse": {
        "type": "object",
        "description": "A note",
        "properties": {
          "createdBy": {
            "type": "object",
            "properties": {
              "source": {
                "type": "string",
                "enum": [
                  "EMAIL",
                  "CALENDAR",
                  "WORKFLOW",
                  "API",
                  "IMPORT",
                  "MANUAL",
                  "SYSTEM",
                  "WEBHOOK"
                ]
              },
              "workspaceMemberId": {
                "type": "string",
                "format": "uuid"
              },
              "name": {
                "type": "string"
              }
            },
            "description": "The creator of the record"
          },
          "bodyV2": {
            "type": "object",
            "properties": {
              "blocknote": {
                "type": "string"
              },
              "markdown": {
                "type": "string"
              }
            },
            "description": "Note body"
          },
          "title": {
            "type": "string",
            "description": "Note title"
          },
          "position": {
            "type": "number",
            "description": "Note record position"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Creation date"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Last time the record was changed"
          },
          "deletedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Date when the record was deleted"
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Id"
          },
          "favorites": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FavoriteForResponse"
            },
            "description": "Favorites linked to the note"
          },
          "timelineActivities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TimelineActivityForResponse"
            },
            "description": "Timeline Activities linked to the note."
          },
          "noteTargets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NoteTargetForResponse"
            },
            "description": "Note targets"
          },
          "attachments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AttachmentForResponse"
            },
            "description": "Note attachments"
          }
        }
      },
      "NoteTarget": {
        "type": "object",
        "description": "A note target",
        "properties": {
          "leadsLinkedinScrapingId": {
            "type": "string",
            "format": "uuid"
          },
          "noteId": {
            "type": "string",
            "format": "uuid"
          },
          "personId": {
            "type": "string",
            "format": "uuid"
          },
          "companyId": {
            "type": "string",
            "format": "uuid"
          },
          "opportunityId": {
            "type": "string",
            "format": "uuid"
          }
        },
        "example": {

        }
      },
      "NoteTargetForUpdate": {
        "type": "object",
        "description": "A note target",
        "properties": {
          "leadsLinkedinScrapingId": {
            "type": "string",
            "format": "uuid"
          },
          "noteId": {
            "type": "string",
            "format": "uuid"
          },
          "personId": {
            "type": "string",
            "format": "uuid"
          },
          "companyId": {
            "type": "string",
            "format": "uuid"
          },
          "opportunityId": {
            "type": "string",
            "format": "uuid"
          }
        },
        "example": {

        }
      },
      "NoteTargetForResponse": {
        "type": "object",
        "description": "A note target",
        "properties": {
          "leadsLinkedinScrapingId": {
            "type": "string",
            "format": "uuid"
          },
          "noteId": {
            "type": "string",
            "format": "uuid"
          },
          "personId": {
            "type": "string",
            "format": "uuid"
          },
          "companyId": {
            "type": "string",
            "format": "uuid"
          },
          "opportunityId": {
            "type": "string",
            "format": "uuid"
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Id"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Creation date"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Last time the record was changed"
          },
          "deletedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Date when the record was deleted"
          },
          "leadsLinkedinScraping": {
            "type": "object",
            "oneOf": [
              {
                "$ref": "#/components/schemas/LeadsLinkedinScrapingForResponse"
              }
            ],
            "description": "NoteTargets Leads - LinkedIn Scraping"
          },
          "note": {
            "type": "object",
            "oneOf": [
              {
                "$ref": "#/components/schemas/NoteForResponse"
              }
            ],
            "description": "NoteTarget note"
          },
          "person": {
            "type": "object",
            "oneOf": [
              {
                "$ref": "#/components/schemas/PersonForResponse"
              }
            ],
            "description": "NoteTarget person"
          },
          "company": {
            "type": "object",
            "oneOf": [
              {
                "$ref": "#/components/schemas/CompanyForResponse"
              }
            ],
            "description": "NoteTarget company"
          },
          "opportunity": {
            "type": "object",
            "oneOf": [
              {
                "$ref": "#/components/schemas/OpportunityForResponse"
              }
            ],
            "description": "NoteTarget opportunity"
          }
        }
      },
      "Opportunity": {
        "type": "object",
        "description": "An opportunity",
        "properties": {
          "stage": {
            "type": "string",
            "enum": [
              "NEW",
              "SCREENING",
              "MEETING",
              "PROPOSAL",
              "CUSTOMER"
            ],
            "description": "Opportunity stage"
          },
          "closeDate": {
            "type": "string",
            "format": "date-time",
            "description": "Opportunity close date"
          },
          "name": {
            "type": "string",
            "description": "The opportunity name"
          },
          "amount": {
            "type": "object",
            "properties": {
              "amountMicros": {
                "type": "number"
              },
              "currencyCode": {
                "type": "string"
              }
            },
            "description": "Opportunity amount"
          },
          "pointOfContactId": {
            "type": "string",
            "format": "uuid"
          },
          "companyId": {
            "type": "string",
            "format": "uuid"
          },
          "createdBy": {
            "type": "object",
            "properties": {
              "source": {
                "type": "string",
                "enum": [
                  "EMAIL",
                  "CALENDAR",
                  "WORKFLOW",
                  "API",
                  "IMPORT",
                  "MANUAL",
                  "SYSTEM",
                  "WEBHOOK"
                ]
              }
            },
            "description": "The creator of the record"
          },
          "position": {
            "type": "number",
            "description": "Opportunity record position"
          }
        },
        "example": {
          "stage": [
            "NEW"
          ],
          "name": "Opportunity name",
          "amount": {
            "amountMicros": 215000000,
            "currencyCode": "EUR"
          }
        }
      },
      "OpportunityForUpdate": {
        "type": "object",
        "description": "An opportunity",
        "properties": {
          "stage": {
            "type": "string",
            "enum": [
              "NEW",
              "SCREENING",
              "MEETING",
              "PROPOSAL",
              "CUSTOMER"
            ],
            "description": "Opportunity stage"
          },
          "closeDate": {
            "type": "string",
            "format": "date-time",
            "description": "Opportunity close date"
          },
          "name": {
            "type": "string",
            "description": "The opportunity name"
          },
          "amount": {
            "type": "object",
            "properties": {
              "amountMicros": {
                "type": "number"
              },
              "currencyCode": {
                "type": "string"
              }
            },
            "description": "Opportunity amount"
          },
          "pointOfContactId": {
            "type": "string",
            "format": "uuid"
          },
          "companyId": {
            "type": "string",
            "format": "uuid"
          },
          "createdBy": {
            "type": "object",
            "properties": {
              "source": {
                "type": "string",
                "enum": [
                  "EMAIL",
                  "CALENDAR",
                  "WORKFLOW",
                  "API",
                  "IMPORT",
                  "MANUAL",
                  "SYSTEM",
                  "WEBHOOK"
                ]
              }
            },
            "description": "The creator of the record"
          },
          "position": {
            "type": "number",
            "description": "Opportunity record position"
          }
        },
        "example": {
          "stage": [
            "NEW"
          ],
          "name": "Opportunity name",
          "amount": {
            "amountMicros": 428000000,
            "currencyCode": "EUR"
          }
        }
      },
      "OpportunityForResponse": {
        "type": "object",
        "description": "An opportunity",
        "properties": {
          "deletedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Date when the record was deleted"
          },
          "stage": {
            "type": "string",
            "enum": [
              "NEW",
              "SCREENING",
              "MEETING",
              "PROPOSAL",
              "CUSTOMER"
            ],
            "description": "Opportunity stage"
          },
          "closeDate": {
            "type": "string",
            "format": "date-time",
            "description": "Opportunity close date"
          },
          "name": {
            "type": "string",
            "description": "The opportunity name"
          },
          "amount": {
            "type": "object",
            "properties": {
              "amountMicros": {
                "type": "number"
              },
              "currencyCode": {
                "type": "string"
              }
            },
            "description": "Opportunity amount"
          },
          "pointOfContactId": {
            "type": "string",
            "format": "uuid"
          },
          "companyId": {
            "type": "string",
            "format": "uuid"
          },
          "createdBy": {
            "type": "object",
            "properties": {
              "source": {
                "type": "string",
                "enum": [
                  "EMAIL",
                  "CALENDAR",
                  "WORKFLOW",
                  "API",
                  "IMPORT",
                  "MANUAL",
                  "SYSTEM",
                  "WEBHOOK"
                ]
              },
              "workspaceMemberId": {
                "type": "string",
                "format": "uuid"
              },
              "name": {
                "type": "string"
              }
            },
            "description": "The creator of the record"
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Id"
          },
          "position": {
            "type": "number",
            "description": "Opportunity record position"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Creation date"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Last time the record was changed"
          },
          "pointOfContact": {
            "type": "object",
            "oneOf": [
              {
                "$ref": "#/components/schemas/PersonForResponse"
              }
            ],
            "description": "Opportunity point of contact"
          },
          "company": {
            "type": "object",
            "oneOf": [
              {
                "$ref": "#/components/schemas/CompanyForResponse"
              }
            ],
            "description": "Opportunity company"
          },
          "favorites": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FavoriteForResponse"
            },
            "description": "Favorites linked to the opportunity"
          },
          "noteTargets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NoteTargetForResponse"
            },
            "description": "Notes tied to the opportunity"
          },
          "taskTargets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TaskTargetForResponse"
            },
            "description": "Tasks tied to the opportunity"
          },
          "attachments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AttachmentForResponse"
            },
            "description": "Attachments linked to the opportunity"
          },
          "timelineActivities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TimelineActivityForResponse"
            },
            "description": "Timeline Activities linked to the opportunity."
          }
        }
      },
      "Person": {
        "type": "object",
        "description": "A person",
        "properties": {
          "companyId": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "object",
            "properties": {
              "firstName": {
                "type": "string"
              },
              "lastName": {
                "type": "string"
              }
            },
            "description": "Contactâ€™s name"
          },
          "emails": {
            "type": "object",
            "properties": {
              "primaryEmail": {
                "type": "string"
              },
              "additionalEmails": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "email"
                }
              }
            },
            "description": "Contactâ€™s Emails"
          },
          "xLink": {
            "type": "object",
            "properties": {
              "primaryLinkLabel": {
                "type": "string"
              },
              "primaryLinkUrl": {
                "type": "string"
              },
              "secondaryLinks": {
                "type": "array",
                "items": {
                  "type": "object",
                  "description": "A secondary link",
                  "properties": {
                    "url": {
                      "type": "string",
                      "format": "uri"
                    },
                    "label": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": "Contactâ€™s X/Twitter account"
          },
          "jobTitle": {
            "type": "string",
            "description": "Contactâ€™s job title"
          },
          "phones": {
            "properties": {
              "additionalPhones": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "primaryPhoneCountryCode": {
                "type": "string"
              },
              "primaryPhoneCallingCode": {
                "type": "string"
              },
              "primaryPhoneNumber": {
                "type": "string"
              }
            },
            "type": "object",
            "description": "Contactâ€™s phone numbers"
          },
          "city": {
            "type": "string",
            "description": "Contactâ€™s city"
          },
          "avatarUrl": {
            "type": "string",
            "description": "Contactâ€™s avatar"
          },
          "position": {
            "type": "number",
            "description": "Person record Position"
          },
          "createdBy": {
            "type": "object",
            "properties": {
              "source": {
                "type": "string",
                "enum": [
                  "EMAIL",
                  "CALENDAR",
                  "WORKFLOW",
                  "API",
                  "IMPORT",
                  "MANUAL",
                  "SYSTEM",
                  "WEBHOOK"
                ]
              }
            },
            "description": "The creator of the record"
          },
          "linkedinLink": {
            "type": "object",
            "properties": {
              "primaryLinkLabel": {
                "type": "string"
              },
              "primaryLinkUrl": {
                "type": "string"
              },
              "secondaryLinks": {
                "type": "array",
                "items": {
                  "type": "object",
                  "description": "A secondary link",
                  "properties": {
                    "url": {
                      "type": "string",
                      "format": "uri"
                    },
                    "label": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": "Contactâ€™s Linkedin account"
          }
        },
        "example": {
          "name": {
            "firstName": "Katlyn",
            "lastName": "Schinner"
          },
          "emails": {
            "primaryEmail": "rowena.runte@gmail.com",
            "additionalEmails": null
          },
          "xLink": {
            "primaryLinkLabel": "",
            "primaryLinkUrl": "https://arid-singing.com",
            "additionalLinks": []
          },
          "phones": {
            "primaryPhoneNumber": "06 10 20 30 40",
            "primaryPhoneCallingCode": "+33",
            "primaryPhoneCountryCode": "FR",
            "additionalPhones": []
          },
          "linkedinLink": {
            "primaryLinkLabel": "",
            "primaryLinkUrl": "https://handy-role.org",
            "additionalLinks": []
          }
        }
      },
      "PersonForUpdate": {
        "type": "object",
        "description": "A person",
        "properties": {
          "companyId": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "object",
            "properties": {
              "firstName": {
                "type": "string"
              },
              "lastName": {
                "type": "string"
              }
            },
            "description": "Contactâ€™s name"
          },
          "emails": {
            "type": "object",
            "properties": {
              "primaryEmail": {
                "type": "string"
              },
              "additionalEmails": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "email"
                }
              }
            },
            "description": "Contactâ€™s Emails"
          },
          "xLink": {
            "type": "object",
            "properties": {
              "primaryLinkLabel": {
                "type": "string"
              },
              "primaryLinkUrl": {
                "type": "string"
              },
              "secondaryLinks": {
                "type": "array",
                "items": {
                  "type": "object",
                  "description": "A secondary link",
                  "properties": {
                    "url": {
                      "type": "string",
                      "format": "uri"
                    },
                    "label": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": "Contactâ€™s X/Twitter account"
          },
          "jobTitle": {
            "type": "string",
            "description": "Contactâ€™s job title"
          },
          "phones": {
            "properties": {
              "additionalPhones": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "primaryPhoneCountryCode": {
                "type": "string"
              },
              "primaryPhoneCallingCode": {
                "type": "string"
              },
              "primaryPhoneNumber": {
                "type": "string"
              }
            },
            "type": "object",
            "description": "Contactâ€™s phone numbers"
          },
          "city": {
            "type": "string",
            "description": "Contactâ€™s city"
          },
          "avatarUrl": {
            "type": "string",
            "description": "Contactâ€™s avatar"
          },
          "position": {
            "type": "number",
            "description": "Person record Position"
          },
          "createdBy": {
            "type": "object",
            "properties": {
              "source": {
                "type": "string",
                "enum": [
                  "EMAIL",
                  "CALENDAR",
                  "WORKFLOW",
                  "API",
                  "IMPORT",
                  "MANUAL",
                  "SYSTEM",
                  "WEBHOOK"
                ]
              }
            },
            "description": "The creator of the record"
          },
          "linkedinLink": {
            "type": "object",
            "properties": {
              "primaryLinkLabel": {
                "type": "string"
              },
              "primaryLinkUrl": {
                "type": "string"
              },
              "secondaryLinks": {
                "type": "array",
                "items": {
                  "type": "object",
                  "description": "A secondary link",
                  "properties": {
                    "url": {
                      "type": "string",
                      "format": "uri"
                    },
                    "label": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": "Contactâ€™s Linkedin account"
          }
        },
        "example": {
          "name": {
            "firstName": "Rosa",
            "lastName": "Dicki"
          },
          "emails": {
            "primaryEmail": "coby_balistreri@gmail.com",
            "additionalEmails": null
          },
          "xLink": {
            "primaryLinkLabel": "",
            "primaryLinkUrl": "https://frilly-molasses.org",
            "additionalLinks": []
          },
          "phones": {
            "primaryPhoneNumber": "06 10 20 30 40",
            "primaryPhoneCallingCode": "+33",
            "primaryPhoneCountryCode": "FR",
            "additionalPhones": []
          },
          "linkedinLink": {
            "primaryLinkLabel": "",
            "primaryLinkUrl": "https://unaware-recommendation.org/",
            "additionalLinks": []
          }
        }
      },
      "PersonForResponse": {
        "type": "object",
        "description": "A person",
        "properties": {
          "companyId": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "object",
            "properties": {
              "firstName": {
                "type": "string"
              },
              "lastName": {
                "type": "string"
              }
            },
            "description": "Contactâ€™s name"
          },
          "emails": {
            "type": "object",
            "properties": {
              "primaryEmail": {
                "type": "string"
              },
              "additionalEmails": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "email"
                }
              }
            },
            "description": "Contactâ€™s Emails"
          },
          "xLink": {
            "type": "object",
            "properties": {
              "primaryLinkLabel": {
                "type": "string"
              },
              "primaryLinkUrl": {
                "type": "string"
              },
              "secondaryLinks": {
                "type": "array",
                "items": {
                  "type": "object",
                  "description": "A secondary link",
                  "properties": {
                    "url": {
                      "type": "string",
                      "format": "uri"
                    },
                    "label": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": "Contactâ€™s X/Twitter account"
          },
          "jobTitle": {
            "type": "string",
            "description": "Contactâ€™s job title"
          },
          "phones": {
            "properties": {
              "additionalPhones": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "primaryPhoneCountryCode": {
                "type": "string"
              },
              "primaryPhoneCallingCode": {
                "type": "string"
              },
              "primaryPhoneNumber": {
                "type": "string"
              }
            },
            "type": "object",
            "description": "Contactâ€™s phone numbers"
          },
          "city": {
            "type": "string",
            "description": "Contactâ€™s city"
          },
          "avatarUrl": {
            "type": "string",
            "description": "Contactâ€™s avatar"
          },
          "position": {
            "type": "number",
            "description": "Person record Position"
          },
          "createdBy": {
            "type": "object",
            "properties": {
              "source": {
                "type": "string",
                "enum": [
                  "EMAIL",
                  "CALENDAR",
                  "WORKFLOW",
                  "API",
                  "IMPORT",
                  "MANUAL",
                  "SYSTEM",
                  "WEBHOOK"
                ]
              },
              "workspaceMemberId": {
                "type": "string",
                "format": "uuid"
              },
              "name": {
                "type": "string"
              }
            },
            "description": "The creator of the record"
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Id"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Creation date"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Last time the record was changed"
          },
          "deletedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Date when the record was deleted"
          },
          "linkedinLink": {
            "type": "object",
            "properties": {
              "primaryLinkLabel": {
                "type": "string"
              },
              "primaryLinkUrl": {
                "type": "string"
              },
              "secondaryLinks": {
                "type": "array",
                "items": {
                  "type": "object",
                  "description": "A secondary link",
                  "properties": {
                    "url": {
                      "type": "string",
                      "format": "uri"
                    },
                    "label": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": "Contactâ€™s Linkedin account"
          },
          "taskTargets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TaskTargetForResponse"
            },
            "description": "Tasks tied to the contact"
          },
          "linkedinProfile": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LeadsLinkedinScrapingForResponse"
            }
          },
          "timelineActivities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TimelineActivityForResponse"
            },
            "description": "Events linked to the person"
          },
          "calendarEventParticipants": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CalendarEventParticipantForResponse"
            },
            "description": "Calendar Event Participants"
          },
          "messageParticipants": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MessageParticipantForResponse"
            },
            "description": "Message Participants"
          },
          "attachments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AttachmentForResponse"
            },
            "description": "Attachments linked to the contact."
          },
          "favorites": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FavoriteForResponse"
            },
            "description": "Favorites linked to the contact"
          },
          "noteTargets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NoteTargetForResponse"
            },
            "description": "Notes tied to the contact"
          },
          "pointOfContactForOpportunities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OpportunityForResponse"
            },
            "description": "List of opportunities for which that person is the point of contact"
          },
          "company": {
            "type": "object",
            "oneOf": [
              {
                "$ref": "#/components/schemas/CompanyForResponse"
              }
            ],
            "description": "Contactâ€™s company"
          }
        }
      },
      "Task": {
        "type": "object",
        "description": "A task",
        "properties": {
          "createdBy": {
            "type": "object",
            "properties": {
              "source": {
                "type": "string",
                "enum": [
                  "EMAIL",
                  "CALENDAR",
                  "WORKFLOW",
                  "API",
                  "IMPORT",
                  "MANUAL",
                  "SYSTEM",
                  "WEBHOOK"
                ]
              }
            },
            "description": "The creator of the record"
          },
          "assigneeId": {
            "type": "string",
            "format": "uuid"
          },
          "position": {
            "type": "number",
            "description": "Task record position"
          },
          "title": {
            "type": "string",
            "description": "Task title"
          },
          "bodyV2": {
            "type": "object",
            "properties": {
              "blocknote": {
                "type": "string"
              },
              "markdown": {
                "type": "string"
              }
            },
            "description": "Task body"
          },
          "dueAt": {
            "type": "string",
            "format": "date-time",
            "description": "Task due date"
          },
          "status": {
            "type": "string",
            "enum": [
              "TODO",
              "IN_PROGRESS",
              "DONE"
            ],
            "description": "Task status"
          }
        },
        "example": {
          "status": [
            "TODO"
          ]
        }
      },
      "TaskForUpdate": {
        "type": "object",
        "description": "A task",
        "properties": {
          "createdBy": {
            "type": "object",
            "properties": {
              "source": {
                "type": "string",
                "enum": [
                  "EMAIL",
                  "CALENDAR",
                  "WORKFLOW",
                  "API",
                  "IMPORT",
                  "MANUAL",
                  "SYSTEM",
                  "WEBHOOK"
                ]
              }
            },
            "description": "The creator of the record"
          },
          "assigneeId": {
            "type": "string",
            "format": "uuid"
          },
          "position": {
            "type": "number",
            "description": "Task record position"
          },
          "title": {
            "type": "string",
            "description": "Task title"
          },
          "bodyV2": {
            "type": "object",
            "properties": {
              "blocknote": {
                "type": "string"
              },
              "markdown": {
                "type": "string"
              }
            },
            "description": "Task body"
          },
          "dueAt": {
            "type": "string",
            "format": "date-time",
            "description": "Task due date"
          },
          "status": {
            "type": "string",
            "enum": [
              "TODO",
              "IN_PROGRESS",
              "DONE"
            ],
            "description": "Task status"
          }
        },
        "example": {
          "status": [
            "TODO"
          ]
        }
      },
      "TaskForResponse": {
        "type": "object",
        "description": "A task",
        "properties": {
          "createdBy": {
            "type": "object",
            "properties": {
              "source": {
                "type": "string",
                "enum": [
                  "EMAIL",
                  "CALENDAR",
                  "WORKFLOW",
                  "API",
                  "IMPORT",
                  "MANUAL",
                  "SYSTEM",
                  "WEBHOOK"
                ]
              },
              "workspaceMemberId": {
                "type": "string",
                "format": "uuid"
              },
              "name": {
                "type": "string"
              }
            },
            "description": "The creator of the record"
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Id"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Creation date"
          },
          "assigneeId": {
            "type": "string",
            "format": "uuid"
          },
          "position": {
            "type": "number",
            "description": "Task record position"
          },
          "title": {
            "type": "string",
            "description": "Task title"
          },
          "bodyV2": {
            "type": "object",
            "properties": {
              "blocknote": {
                "type": "string"
              },
              "markdown": {
                "type": "string"
              }
            },
            "description": "Task body"
          },
          "dueAt": {
            "type": "string",
            "format": "date-time",
            "description": "Task due date"
          },
          "status": {
            "type": "string",
            "enum": [
              "TODO",
              "IN_PROGRESS",
              "DONE"
            ],
            "description": "Task status"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Last time the record was changed"
          },
          "deletedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Date when the record was deleted"
          },
          "assignee": {
            "type": "object",
            "oneOf": [
              {
                "$ref": "#/components/schemas/WorkspaceMemberForResponse"
              }
            ],
            "description": "Task assignee"
          },
          "attachments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AttachmentForResponse"
            },
            "description": "Task attachments"
          },
          "taskTargets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TaskTargetForResponse"
            },
            "description": "Task targets"
          },
          "favorites": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FavoriteForResponse"
            },
            "description": "Favorites linked to the task"
          },
          "timelineActivities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TimelineActivityForResponse"
            },
            "description": "Timeline Activities linked to the task."
          }
        }
      },
      "TaskTarget": {
        "type": "object",
        "description": "A task target",
        "properties": {
          "taskId": {
            "type": "string",
            "format": "uuid"
          },
          "leadsLinkedinScrapingId": {
            "type": "string",
            "format": "uuid"
          },
          "companyId": {
            "type": "string",
            "format": "uuid"
          },
          "opportunityId": {
            "type": "string",
            "format": "uuid"
          },
          "personId": {
            "type": "string",
            "format": "uuid"
          }
        },
        "example": {

        }
      },
      "TaskTargetForUpdate": {
        "type": "object",
        "description": "A task target",
        "properties": {
          "taskId": {
            "type": "string",
            "format": "uuid"
          },
          "leadsLinkedinScrapingId": {
            "type": "string",
            "format": "uuid"
          },
          "companyId": {
            "type": "string",
            "format": "uuid"
          },
          "opportunityId": {
            "type": "string",
            "format": "uuid"
          },
          "personId": {
            "type": "string",
            "format": "uuid"
          }
        },
        "example": {

        }
      },
      "TaskTargetForResponse": {
        "type": "object",
        "description": "A task target",
        "properties": {
          "taskId": {
            "type": "string",
            "format": "uuid"
          },
          "leadsLinkedinScrapingId": {
            "type": "string",
            "format": "uuid"
          },
          "companyId": {
            "type": "string",
            "format": "uuid"
          },
          "opportunityId": {
            "type": "string",
            "format": "uuid"
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Id"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Creation date"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Last time the record was changed"
          },
          "deletedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Date when the record was deleted"
          },
          "personId": {
            "type": "string",
            "format": "uuid"
          },
          "task": {
            "type": "object",
            "oneOf": [
              {
                "$ref": "#/components/schemas/TaskForResponse"
              }
            ],
            "description": "TaskTarget task"
          },
          "leadsLinkedinScraping": {
            "type": "object",
            "oneOf": [
              {
                "$ref": "#/components/schemas/LeadsLinkedinScrapingForResponse"
              }
            ],
            "description": "TaskTargets Leads - LinkedIn Scraping"
          },
          "company": {
            "type": "object",
            "oneOf": [
              {
                "$ref": "#/components/schemas/CompanyForResponse"
              }
            ],
            "description": "TaskTarget company"
          },
          "opportunity": {
            "type": "object",
            "oneOf": [
              {
                "$ref": "#/components/schemas/OpportunityForResponse"
              }
            ],
            "description": "TaskTarget opportunity"
          },
          "person": {
            "type": "object",
            "oneOf": [
              {
                "$ref": "#/components/schemas/PersonForResponse"
              }
            ],
            "description": "TaskTarget person"
          }
        }
      },
      "TimelineActivity": {
        "type": "object",
        "description": "Aggregated / filtered event to be displayed on the timeline",
        "properties": {
          "name": {
            "type": "string",
            "description": "Event name"
          },
          "leadsLinkedinScrapingId": {
            "type": "string",
            "format": "uuid"
          },
          "linkedObjectMetadataId": {
            "type": "string",
            "format": "uuid",
            "description": "Linked Object Metadata Id"
          },
          "linkedRecordId": {
            "type": "string",
            "format": "uuid",
            "description": "Linked Record id"
          },
          "linkedRecordCachedName": {
            "type": "string",
            "description": "Cached record name"
          },
          "workspaceMemberId": {
            "type": "string",
            "format": "uuid"
          },
          "personId": {
            "type": "string",
            "format": "uuid"
          },
          "companyId": {
            "type": "string",
            "format": "uuid"
          },
          "opportunityId": {
            "type": "string",
            "format": "uuid"
          },
          "noteId": {
            "type": "string",
            "format": "uuid"
          },
          "taskId": {
            "type": "string",
            "format": "uuid"
          },
          "workflowId": {
            "type": "string",
            "format": "uuid"
          },
          "workflowVersionId": {
            "type": "string",
            "format": "uuid"
          },
          "workflowRunId": {
            "type": "string",
            "format": "uuid"
          },
          "properties": {
            "type": "object",
            "description": "Json value for event details"
          },
          "happensAt": {
            "type": "string",
            "format": "date-time",
            "description": "Creation date"
          }
        },
        "example": {
          "name": "Timeline Activity name"
        }
      },
      "TimelineActivityForUpdate": {
        "type": "object",
        "description": "Aggregated / filtered event to be displayed on the timeline",
        "properties": {
          "name": {
            "type": "string",
            "description": "Event name"
          },
          "leadsLinkedinScrapingId": {
            "type": "string",
            "format": "uuid"
          },
          "linkedObjectMetadataId": {
            "type": "string",
            "format": "uuid",
            "description": "Linked Object Metadata Id"
          },
          "linkedRecordId": {
            "type": "string",
            "format": "uuid",
            "description": "Linked Record id"
          },
          "linkedRecordCachedName": {
            "type": "string",
            "description": "Cached record name"
          },
          "workspaceMemberId": {
            "type": "string",
            "format": "uuid"
          },
          "personId": {
            "type": "string",
            "format": "uuid"
          },
          "companyId": {
            "type": "string",
            "format": "uuid"
          },
          "opportunityId": {
            "type": "string",
            "format": "uuid"
          },
          "noteId": {
            "type": "string",
            "format": "uuid"
          },
          "taskId": {
            "type": "string",
            "format": "uuid"
          },
          "workflowId": {
            "type": "string",
            "format": "uuid"
          },
          "workflowVersionId": {
            "type": "string",
            "format": "uuid"
          },
          "workflowRunId": {
            "type": "string",
            "format": "uuid"
          },
          "properties": {
            "type": "object",
            "description": "Json value for event details"
          },
          "happensAt": {
            "type": "string",
            "format": "date-time",
            "description": "Creation date"
          }
        },
        "example": {
          "name": "Timeline Activity name"
        }
      },
      "TimelineActivityForResponse": {
        "type": "object",
        "description": "Aggregated / filtered event to be displayed on the timeline",
        "properties": {
          "name": {
            "type": "string",
            "description": "Event name"
          },
          "leadsLinkedinScrapingId": {
            "type": "string",
            "format": "uuid"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Last time the record was changed"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Creation date"
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Id"
          },
          "linkedObjectMetadataId": {
            "type": "string",
            "format": "uuid",
            "description": "Linked Object Metadata Id"
          },
          "linkedRecordId": {
            "type": "string",
            "format": "uuid",
            "description": "Linked Record id"
          },
          "linkedRecordCachedName": {
            "type": "string",
            "description": "Cached record name"
          },
          "workspaceMemberId": {
            "type": "string",
            "format": "uuid"
          },
          "personId": {
            "type": "string",
            "format": "uuid"
          },
          "companyId": {
            "type": "string",
            "format": "uuid"
          },
          "opportunityId": {
            "type": "string",
            "format": "uuid"
          },
          "noteId": {
            "type": "string",
            "format": "uuid"
          },
          "taskId": {
            "type": "string",
            "format": "uuid"
          },
          "workflowId": {
            "type": "string",
            "format": "uuid"
          },
          "workflowVersionId": {
            "type": "string",
            "format": "uuid"
          },
          "deletedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Date when the record was deleted"
          },
          "workflowRunId": {
            "type": "string",
            "format": "uuid"
          },
          "properties": {
            "type": "object",
            "description": "Json value for event details"
          },
          "happensAt": {
            "type": "string",
            "format": "date-time",
            "description": "Creation date"
          },
          "leadsLinkedinScraping": {
            "type": "object",
            "oneOf": [
              {
                "$ref": "#/components/schemas/LeadsLinkedinScrapingForResponse"
              }
            ],
            "description": "TimelineActivities Leads - LinkedIn Scraping"
          },
          "workspaceMember": {
            "type": "object",
            "oneOf": [
              {
                "$ref": "#/components/schemas/WorkspaceMemberForResponse"
              }
            ],
            "description": "Event workspace member"
          },
          "person": {
            "type": "object",
            "oneOf": [
              {
                "$ref": "#/components/schemas/PersonForResponse"
              }
            ],
            "description": "Event person"
          },
          "company": {
            "type": "object",
            "oneOf": [
              {
                "$ref": "#/components/schemas/CompanyForResponse"
              }
            ],
            "description": "Event company"
          },
          "opportunity": {
            "type": "object",
            "oneOf": [
              {
                "$ref": "#/components/schemas/OpportunityForResponse"
              }
            ],
            "description": "Event opportunity"
          },
          "note": {
            "type": "object",
            "oneOf": [
              {
                "$ref": "#/components/schemas/NoteForResponse"
              }
            ],
            "description": "Event note"
          },
          "task": {
            "type": "object",
            "oneOf": [
              {
                "$ref": "#/components/schemas/TaskForResponse"
              }
            ],
            "description": "Event task"
          },
          "workflow": {
            "type": "object",
            "oneOf": [
              {
                "$ref": "#/components/schemas/WorkflowForResponse"
              }
            ],
            "description": "Event workflow"
          },
          "workflowVersion": {
            "type": "object",
            "oneOf": [
              {
                "$ref": "#/components/schemas/WorkflowVersionForResponse"
              }
            ],
            "description": "Event workflow version"
          },
          "workflowRun": {
            "type": "object",
            "oneOf": [
              {
                "$ref": "#/components/schemas/WorkflowRunForResponse"
              }
            ],
            "description": "Event workflow run"
          }
        }
      },
      "ViewField": {
        "type": "object",
        "description": "(System) View Fields",
        "properties": {
          "aggregateOperation": {
            "type": "string",
            "enum": [
              "AVG",
              "COUNT",
              "MAX",
              "MIN",
              "SUM",
              "COUNT_EMPTY",
              "COUNT_NOT_EMPTY",
              "COUNT_UNIQUE_VALUES",
              "PERCENTAGE_EMPTY",
              "PERCENTAGE_NOT_EMPTY",
              "COUNT_TRUE",
              "COUNT_FALSE"
            ],
            "description": "Optional aggregate operation"
          },
          "position": {
            "type": "integer",
            "description": "View Field position"
          },
          "size": {
            "type": "integer",
            "description": "View Field size"
          },
          "isVisible": {
            "type": "boolean",
            "description": "View Field visibility"
          },
          "fieldMetadataId": {
            "type": "string",
            "format": "uuid",
            "description": "View Field target field"
          },
          "viewId": {
            "type": "string",
            "format": "uuid"
          }
        },
        "example": {
          "aggregateOperation": [
            "AVG"
          ],
          "fieldMetadataId": "5d67bcb9-00c2-40ed-96f9-515ed8316c71"
        },
        "required": [
          "fieldMetadataId"
        ]
      },
      "ViewFieldForUpdate": {
        "type": "object",
        "description": "(System) View Fields",
        "properties": {
          "aggregateOperation": {
            "type": "string",
            "enum": [
              "AVG",
              "COUNT",
              "MAX",
              "MIN",
              "SUM",
              "COUNT_EMPTY",
              "COUNT_NOT_EMPTY",
              "COUNT_UNIQUE_VALUES",
              "PERCENTAGE_EMPTY",
              "PERCENTAGE_NOT_EMPTY",
              "COUNT_TRUE",
              "COUNT_FALSE"
            ],
            "description": "Optional aggregate operation"
          },
          "position": {
            "type": "integer",
            "description": "View Field position"
          },
          "size": {
            "type": "integer",
            "description": "View Field size"
          },
          "isVisible": {
            "type": "boolean",
            "description": "View Field visibility"
          },
          "fieldMetadataId": {
            "type": "string",
            "format": "uuid",
            "description": "View Field target field"
          },
          "viewId": {
            "type": "string",
            "format": "uuid"
          }
        },
        "example": {
          "aggregateOperation": [
            "AVG"
          ],
          "fieldMetadataId": "f924ee6d-23df-47e8-abc6-fd6f4a718f10"
        }
      },
      "ViewFieldForResponse": {
        "type": "object",
        "description": "(System) View Fields",
        "properties": {
          "aggregateOperation": {
            "type": "string",
            "enum": [
              "AVG",
              "COUNT",
              "MAX",
              "MIN",
              "SUM",
              "COUNT_EMPTY",
              "COUNT_NOT_EMPTY",
              "COUNT_UNIQUE_VALUES",
              "PERCENTAGE_EMPTY",
              "PERCENTAGE_NOT_EMPTY",
              "COUNT_TRUE",
              "COUNT_FALSE"
            ],
            "description": "Optional aggregate operation"
          },
          "position": {
            "type": "integer",
            "description": "View Field position"
          },
          "size": {
            "type": "integer",
            "description": "View Field size"
          },
          "isVisible": {
            "type": "boolean",
            "description": "View Field visibility"
          },
          "fieldMetadataId": {
            "type": "string",
            "format": "uuid",
            "description": "View Field target field"
          },
          "viewId": {
            "type": "string",
            "format": "uuid"
          },
          "deletedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Date when the record was deleted"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Last time the record was changed"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Creation date"
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Id"
          },
          "view": {
            "type": "object",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ViewForResponse"
              }
            ],
            "description": "View Field related view"
          }
        }
      },
      "ViewFilterGroup": {
        "type": "object",
        "description": "(System) View Filter Groups",
        "properties": {
          "logicalOperator": {
            "type": "string",
            "enum": [
              "AND",
              "OR",
              "NOT"
            ],
            "description": "Logical operator for the filter group"
          },
          "parentViewFilterGroupId": {
            "type": "string",
            "format": "uuid",
            "description": "Parent View Filter Group"
          },
          "viewId": {
            "type": "string",
            "format": "uuid"
          },
          "positionInViewFilterGroup": {
            "type": "integer",
            "description": "Position in the parent view filter group"
          }
        },
        "example": {
          "logicalOperator": [
            "AND"
          ]
        }
      },
      "ViewFilterGroupForUpdate": {
        "type": "object",
        "description": "(System) View Filter Groups",
        "properties": {
          "logicalOperator": {
            "type": "string",
            "enum": [
              "AND",
              "OR",
              "NOT"
            ],
            "description": "Logical operator for the filter group"
          },
          "parentViewFilterGroupId": {
            "type": "string",
            "format": "uuid",
            "description": "Parent View Filter Group"
          },
          "viewId": {
            "type": "string",
            "format": "uuid"
          },
          "positionInViewFilterGroup": {
            "type": "integer",
            "description": "Position in the parent view filter group"
          }
        },
        "example": {
          "logicalOperator": [
            "AND"
          ]
        }
      },
      "ViewFilterGroupForResponse": {
        "type": "object",
        "description": "(System) View Filter Groups",
        "properties": {
          "logicalOperator": {
            "type": "string",
            "enum": [
              "AND",
              "OR",
              "NOT"
            ],
            "description": "Logical operator for the filter group"
          },
          "parentViewFilterGroupId": {
            "type": "string",
            "format": "uuid",
            "description": "Parent View Filter Group"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Last time the record was changed"
          },
          "deletedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Date when the record was deleted"
          },
          "viewId": {
            "type": "string",
            "format": "uuid"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Creation date"
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Id"
          },
          "positionInViewFilterGroup": {
            "type": "integer",
            "description": "Position in the parent view filter group"
          },
          "view": {
            "type": "object",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ViewForResponse"
              }
            ],
            "description": "View"
          }
        }
      },
      "ViewFilter": {
        "type": "object",
        "description": "(System) View Filters",
        "properties": {
          "subFieldName": {
            "type": "string",
            "description": "Sub field name"
          },
          "viewFilterGroupId": {
            "type": "string",
            "format": "uuid",
            "description": "View Filter Group"
          },
          "displayValue": {
            "type": "string",
            "description": "View Filter Display Value"
          },
          "value": {
            "type": "string",
            "description": "View Filter value"
          },
          "operand": {
            "type": "string",
            "description": "View Filter operand"
          },
          "fieldMetadataId": {
            "type": "string",
            "format": "uuid",
            "description": "View Filter target field"
          },
          "viewId": {
            "type": "string",
            "format": "uuid"
          },
          "positionInViewFilterGroup": {
            "type": "integer",
            "description": "Position in the view filter group"
          }
        },
        "example": {
          "fieldMetadataId": "e3dad85b-272f-4b9a-ae39-30f1b9b1e916"
        },
        "required": [
          "fieldMetadataId"
        ]
      },
      "ViewFilterForUpdate": {
        "type": "object",
        "description": "(System) View Filters",
        "properties": {
          "subFieldName": {
            "type": "string",
            "description": "Sub field name"
          },
          "viewFilterGroupId": {
            "type": "string",
            "format": "uuid",
            "description": "View Filter Group"
          },
          "displayValue": {
            "type": "string",
            "description": "View Filter Display Value"
          },
          "value": {
            "type": "string",
            "description": "View Filter value"
          },
          "operand": {
            "type": "string",
            "description": "View Filter operand"
          },
          "fieldMetadataId": {
            "type": "string",
            "format": "uuid",
            "description": "View Filter target field"
          },
          "viewId": {
            "type": "string",
            "format": "uuid"
          },
          "positionInViewFilterGroup": {
            "type": "integer",
            "description": "Position in the view filter group"
          }
        },
        "example": {
          "fieldMetadataId": "56ec7895-c2c4-4806-8e0e-86fee19a3199"
        }
      },
      "ViewFilterForResponse": {
        "type": "object",
        "description": "(System) View Filters",
        "properties": {
          "subFieldName": {
            "type": "string",
            "description": "Sub field name"
          },
          "viewFilterGroupId": {
            "type": "string",
            "format": "uuid",
            "description": "View Filter Group"
          },
          "displayValue": {
            "type": "string",
            "description": "View Filter Display Value"
          },
          "value": {
            "type": "string",
            "description": "View Filter value"
          },
          "operand": {
            "type": "string",
            "description": "View Filter operand"
          },
          "fieldMetadataId": {
            "type": "string",
            "format": "uuid",
            "description": "View Filter target field"
          },
          "viewId": {
            "type": "string",
            "format": "uuid"
          },
          "deletedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Date when the record was deleted"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Last time the record was changed"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Creation date"
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Id"
          },
          "positionInViewFilterGroup": {
            "type": "integer",
            "description": "Position in the view filter group"
          },
          "view": {
            "type": "object",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ViewForResponse"
              }
            ],
            "description": "View Filter related view"
          }
        }
      },
      "ViewGroup": {
        "type": "object",
        "description": "(System) View Groups",
        "properties": {
          "fieldMetadataId": {
            "type": "string",
            "format": "uuid",
            "description": "View Group target field"
          },
          "isVisible": {
            "type": "boolean",
            "description": "View Group visibility"
          },
          "viewId": {
            "type": "string",
            "format": "uuid"
          },
          "fieldValue": {
            "type": "string",
            "description": "Group by this field value"
          },
          "position": {
            "type": "integer",
            "description": "View Field position"
          }
        },
        "example": {
          "fieldMetadataId": "a6966dfb-a80b-4984-be7b-60a76ae8f30c"
        },
        "required": [
          "fieldMetadataId"
        ]
      },
      "ViewGroupForUpdate": {
        "type": "object",
        "description": "(System) View Groups",
        "properties": {
          "fieldMetadataId": {
            "type": "string",
            "format": "uuid",
            "description": "View Group target field"
          },
          "isVisible": {
            "type": "boolean",
            "description": "View Group visibility"
          },
          "viewId": {
            "type": "string",
            "format": "uuid"
          },
          "fieldValue": {
            "type": "string",
            "description": "Group by this field value"
          },
          "position": {
            "type": "integer",
            "description": "View Field position"
          }
        },
        "example": {
          "fieldMetadataId": "d57ecf86-0faa-45cd-ac86-c9e31fc649f9"
        }
      },
      "ViewGroupForResponse": {
        "type": "object",
        "description": "(System) View Groups",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Id"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Creation date"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Last time the record was changed"
          },
          "deletedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Date when the record was deleted"
          },
          "fieldMetadataId": {
            "type": "string",
            "format": "uuid",
            "description": "View Group target field"
          },
          "isVisible": {
            "type": "boolean",
            "description": "View Group visibility"
          },
          "viewId": {
            "type": "string",
            "format": "uuid"
          },
          "fieldValue": {
            "type": "string",
            "description": "Group by this field value"
          },
          "position": {
            "type": "integer",
            "description": "View Field position"
          },
          "view": {
            "type": "object",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ViewForResponse"
              }
            ],
            "description": "View Group related view"
          }
        }
      },
      "View": {
        "type": "object",
        "description": "(System) Views",
        "properties": {
          "name": {
            "type": "string",
            "description": "View name"
          },
          "objectMetadataId": {
            "type": "string",
            "format": "uuid",
            "description": "View target object"
          },
          "type": {
            "type": "string",
            "description": "View type"
          },
          "key": {
            "type": "string",
            "enum": [
              "INDEX"
            ],
            "description": "View key"
          },
          "icon": {
            "type": "string",
            "description": "View icon"
          },
          "kanbanFieldMetadataId": {
            "type": "string",
            "description": "View Kanban column field"
          },
          "position": {
            "type": "number",
            "description": "View position"
          },
          "isCompact": {
            "type": "boolean",
            "description": "Describes if the view is in compact mode"
          },
          "openRecordIn": {
            "type": "string",
            "enum": [
              "SIDE_PANEL",
              "RECORD_PAGE"
            ],
            "description": "Display the records in a side panel or in a record page"
          },
          "kanbanAggregateOperation": {
            "type": "string",
            "enum": [
              "AVG",
              "COUNT",
              "MAX",
              "MIN",
              "SUM",
              "COUNT_EMPTY",
              "COUNT_NOT_EMPTY",
              "COUNT_UNIQUE_VALUES",
              "PERCENTAGE_EMPTY",
              "PERCENTAGE_NOT_EMPTY",
              "COUNT_TRUE",
              "COUNT_FALSE"
            ],
            "description": "Optional aggregate operation"
          },
          "kanbanAggregateOperationFieldMetadataId": {
            "type": "string",
            "format": "uuid",
            "description": "Field metadata used for aggregate operation"
          },
          "anyFieldFilterValue": {
            "type": "string",
            "description": "Any field filter value"
          }
        },
        "example": {
          "name": "View name",
          "objectMetadataId": "02695ee3-583f-448e-b9dc-5e44886fa874",
          "key": [
            "INDEX"
          ],
          "openRecordIn": [
            "SIDE_PANEL"
          ],
          "kanbanAggregateOperation": [
            "AVG"
          ]
        },
        "required": [
          "objectMetadataId"
        ]
      },
      "ViewForUpdate": {
        "type": "object",
        "description": "(System) Views",
        "properties": {
          "name": {
            "type": "string",
            "description": "View name"
          },
          "objectMetadataId": {
            "type": "string",
            "format": "uuid",
            "description": "View target object"
          },
          "type": {
            "type": "string",
            "description": "View type"
          },
          "key": {
            "type": "string",
            "enum": [
              "INDEX"
            ],
            "description": "View key"
          },
          "icon": {
            "type": "string",
            "description": "View icon"
          },
          "kanbanFieldMetadataId": {
            "type": "string",
            "description": "View Kanban column field"
          },
          "position": {
            "type": "number",
            "description": "View position"
          },
          "isCompact": {
            "type": "boolean",
            "description": "Describes if the view is in compact mode"
          },
          "openRecordIn": {
            "type": "string",
            "enum": [
              "SIDE_PANEL",
              "RECORD_PAGE"
            ],
            "description": "Display the records in a side panel or in a record page"
          },
          "kanbanAggregateOperation": {
            "type": "string",
            "enum": [
              "AVG",
              "COUNT",
              "MAX",
              "MIN",
              "SUM",
              "COUNT_EMPTY",
              "COUNT_NOT_EMPTY",
              "COUNT_UNIQUE_VALUES",
              "PERCENTAGE_EMPTY",
              "PERCENTAGE_NOT_EMPTY",
              "COUNT_TRUE",
              "COUNT_FALSE"
            ],
            "description": "Optional aggregate operation"
          },
          "kanbanAggregateOperationFieldMetadataId": {
            "type": "string",
            "format": "uuid",
            "description": "Field metadata used for aggregate operation"
          },
          "anyFieldFilterValue": {
            "type": "string",
            "description": "Any field filter value"
          }
        },
        "example": {
          "name": "View name",
          "objectMetadataId": "c46e40d0-7cf8-41d5-b067-396c18c10d01",
          "key": [
            "INDEX"
          ],
          "openRecordIn": [
            "SIDE_PANEL"
          ],
          "kanbanAggregateOperation": [
            "AVG"
          ]
        }
      },
      "ViewForResponse": {
        "type": "object",
        "description": "(System) Views",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Id"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Last time the record was changed"
          },
          "deletedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Date when the record was deleted"
          },
          "name": {
            "type": "string",
            "description": "View name"
          },
          "objectMetadataId": {
            "type": "string",
            "format": "uuid",
            "description": "View target object"
          },
          "type": {
            "type": "string",
            "description": "View type"
          },
          "key": {
            "type": "string",
            "enum": [
              "INDEX"
            ],
            "description": "View key"
          },
          "icon": {
            "type": "string",
            "description": "View icon"
          },
          "kanbanFieldMetadataId": {
            "type": "string",
            "description": "View Kanban column field"
          },
          "position": {
            "type": "number",
            "description": "View position"
          },
          "isCompact": {
            "type": "boolean",
            "description": "Describes if the view is in compact mode"
          },
          "openRecordIn": {
            "type": "string",
            "enum": [
              "SIDE_PANEL",
              "RECORD_PAGE"
            ],
            "description": "Display the records in a side panel or in a record page"
          },
          "kanbanAggregateOperation": {
            "type": "string",
            "enum": [
              "AVG",
              "COUNT",
              "MAX",
              "MIN",
              "SUM",
              "COUNT_EMPTY",
              "COUNT_NOT_EMPTY",
              "COUNT_UNIQUE_VALUES",
              "PERCENTAGE_EMPTY",
              "PERCENTAGE_NOT_EMPTY",
              "COUNT_TRUE",
              "COUNT_FALSE"
            ],
            "description": "Optional aggregate operation"
          },
          "kanbanAggregateOperationFieldMetadataId": {
            "type": "string",
            "format": "uuid",
            "description": "Field metadata used for aggregate operation"
          },
          "anyFieldFilterValue": {
            "type": "string",
            "description": "Any field filter value"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Creation date"
          },
          "viewFields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ViewFieldForResponse"
            },
            "description": "View Fields"
          },
          "viewGroups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ViewGroupForResponse"
            },
            "description": "View Groups"
          },
          "viewFilters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ViewFilterForResponse"
            },
            "description": "View Filters"
          },
          "viewFilterGroups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ViewFilterGroupForResponse"
            },
            "description": "View Filter Groups"
          },
          "viewSorts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ViewSortForResponse"
            },
            "description": "View Sorts"
          }
        }
      },
      "ViewSort": {
        "type": "object",
        "description": "(System) View Sorts",
        "properties": {
          "viewId": {
            "type": "string",
            "format": "uuid"
          },
          "direction": {
            "type": "string",
            "description": "View Sort direction"
          },
          "fieldMetadataId": {
            "type": "string",
            "format": "uuid",
            "description": "View Sort target field"
          }
        },
        "example": {
          "fieldMetadataId": "be9daca8-8317-40b0-ad05-2f258f60e4b4"
        },
        "required": [
          "fieldMetadataId"
        ]
      },
      "ViewSortForUpdate": {
        "type": "object",
        "description": "(System) View Sorts",
        "properties": {
          "viewId": {
            "type": "string",
            "format": "uuid"
          },
          "direction": {
            "type": "string",
            "description": "View Sort direction"
          },
          "fieldMetadataId": {
            "type": "string",
            "format": "uuid",
            "description": "View Sort target field"
          }
        },
        "example": {
          "fieldMetadataId": "991879dd-22a5-4464-81bb-aa00ca4cb995"
        }
      },
      "ViewSortForResponse": {
        "type": "object",
        "description": "(System) View Sorts",
        "properties": {
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Last time the record was changed"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Creation date"
          },
          "viewId": {
            "type": "string",
            "format": "uuid"
          },
          "direction": {
            "type": "string",
            "description": "View Sort direction"
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Id"
          },
          "fieldMetadataId": {
            "type": "string",
            "format": "uuid",
            "description": "View Sort target field"
          },
          "deletedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Date when the record was deleted"
          },
          "view": {
            "type": "object",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ViewForResponse"
              }
            ],
            "description": "View Sort related view"
          }
        }
      },
      "WorkflowAutomatedTrigger": {
        "type": "object",
        "description": "A workflow automated trigger",
        "properties": {
          "workflowId": {
            "type": "string",
            "format": "uuid"
          },
          "type": {
            "type": "string",
            "enum": [
              "DATABASE_EVENT",
              "CRON"
            ],
            "description": "The workflow automated trigger type"
          },
          "settings": {
            "type": "object",
            "description": "The workflow automated trigger settings"
          }
        },
        "example": {
          "type": [
            "DATABASE_EVENT"
          ],
          "settings": {

          }
        },
        "required": [
          "type",
          "settings"
        ]
      },
      "WorkflowAutomatedTriggerForUpdate": {
        "type": "object",
        "description": "A workflow automated trigger",
        "properties": {
          "workflowId": {
            "type": "string",
            "format": "uuid"
          },
          "type": {
            "type": "string",
            "enum": [
              "DATABASE_EVENT",
              "CRON"
            ],
            "description": "The workflow automated trigger type"
          },
          "settings": {
            "type": "object",
            "description": "The workflow automated trigger settings"
          }
        },
        "example": {
          "type": [
            "DATABASE_EVENT"
          ],
          "settings": {

          }
        }
      },
      "WorkflowAutomatedTriggerForResponse": {
        "type": "object",
        "description": "A workflow automated trigger",
        "properties": {
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Creation date"
          },
          "workflowId": {
            "type": "string",
            "format": "uuid"
          },
          "type": {
            "type": "string",
            "enum": [
              "DATABASE_EVENT",
              "CRON"
            ],
            "description": "The workflow automated trigger type"
          },
          "settings": {
            "type": "object",
            "description": "The workflow automated trigger settings"
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Id"
          },
          "deletedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Date when the record was deleted"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Last time the record was changed"
          },
          "workflow": {
            "type": "object",
            "oneOf": [
              {
                "$ref": "#/components/schemas/WorkflowForResponse"
              }
            ],
            "description": "WorkflowAutomatedTrigger workflow"
          }
        }
      },
      "WorkflowRun": {
        "type": "object",
        "description": "A workflow run",
        "properties": {
          "enqueuedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Workflow run enqueued at"
          },
          "startedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Workflow run started at"
          },
          "endedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Workflow run ended at"
          },
          "status": {
            "type": "string",
            "enum": [
              "NOT_STARTED",
              "RUNNING",
              "COMPLETED",
              "FAILED",
              "ENQUEUED"
            ],
            "description": "Workflow run status"
          },
          "createdBy": {
            "type": "object",
            "properties": {
              "source": {
                "type": "string",
                "enum": [
                  "EMAIL",
                  "CALENDAR",
                  "WORKFLOW",
                  "API",
                  "IMPORT",
                  "MANUAL",
                  "SYSTEM",
                  "WEBHOOK"
                ]
              }
            },
            "description": "The executor of the workflow"
          },
          "state": {
            "type": "object",
            "description": "State of the workflow run"
          },
          "position": {
            "type": "number",
            "description": "Workflow run position"
          },
          "workflowId": {
            "type": "string",
            "format": "uuid"
          },
          "workflowVersionId": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "description": "Name of the workflow run"
          }
        },
        "example": {
          "status": [
            "NOT_STARTED"
          ],
          "state": {

          },
          "name": "Workflow Run name"
        },
        "required": [
          "state"
        ]
      },
      "WorkflowRunForUpdate": {
        "type": "object",
        "description": "A workflow run",
        "properties": {
          "enqueuedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Workflow run enqueued at"
          },
          "startedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Workflow run started at"
          },
          "endedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Workflow run ended at"
          },
          "status": {
            "type": "string",
            "enum": [
              "NOT_STARTED",
              "RUNNING",
              "COMPLETED",
              "FAILED",
              "ENQUEUED"
            ],
            "description": "Workflow run status"
          },
          "createdBy": {
            "type": "object",
            "properties": {
              "source": {
                "type": "string",
                "enum": [
                  "EMAIL",
                  "CALENDAR",
                  "WORKFLOW",
                  "API",
                  "IMPORT",
                  "MANUAL",
                  "SYSTEM",
                  "WEBHOOK"
                ]
              }
            },
            "description": "The executor of the workflow"
          },
          "state": {
            "type": "object",
            "description": "State of the workflow run"
          },
          "position": {
            "type": "number",
            "description": "Workflow run position"
          },
          "workflowId": {
            "type": "string",
            "format": "uuid"
          },
          "workflowVersionId": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "description": "Name of the workflow run"
          }
        },
        "example": {
          "status": [
            "NOT_STARTED"
          ],
          "state": {

          },
          "name": "Workflow Run name"
        }
      },
      "WorkflowRunForResponse": {
        "type": "object",
        "description": "A workflow run",
        "properties": {
          "enqueuedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Workflow run enqueued at"
          },
          "startedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Workflow run started at"
          },
          "endedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Workflow run ended at"
          },
          "status": {
            "type": "string",
            "enum": [
              "NOT_STARTED",
              "RUNNING",
              "COMPLETED",
              "FAILED",
              "ENQUEUED"
            ],
            "description": "Workflow run status"
          },
          "createdBy": {
            "type": "object",
            "properties": {
              "source": {
                "type": "string",
                "enum": [
                  "EMAIL",
                  "CALENDAR",
                  "WORKFLOW",
                  "API",
                  "IMPORT",
                  "MANUAL",
                  "SYSTEM",
                  "WEBHOOK"
                ]
              },
              "workspaceMemberId": {
                "type": "string",
                "format": "uuid"
              },
              "name": {
                "type": "string"
              }
            },
            "description": "The executor of the workflow"
          },
          "state": {
            "type": "object",
            "description": "State of the workflow run"
          },
          "position": {
            "type": "number",
            "description": "Workflow run position"
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Id"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Creation date"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Last time the record was changed"
          },
          "deletedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Date when the record was deleted"
          },
          "workflowId": {
            "type": "string",
            "format": "uuid"
          },
          "workflowVersionId": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "description": "Name of the workflow run"
          },
          "timelineActivities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TimelineActivityForResponse"
            },
            "description": "Timeline activities linked to the run"
          },
          "favorites": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FavoriteForResponse"
            },
            "description": "Favorites linked to the workflow run"
          },
          "workflow": {
            "type": "object",
            "oneOf": [
              {
                "$ref": "#/components/schemas/WorkflowForResponse"
              }
            ],
            "description": "Workflow linked to the run."
          },
          "workflowVersion": {
            "type": "object",
            "oneOf": [
              {
                "$ref": "#/components/schemas/WorkflowVersionForResponse"
              }
            ],
            "description": "Workflow version linked to the run."
          }
        }
      },
      "Workflow": {
        "type": "object",
        "description": "A workflow",
        "properties": {
          "lastPublishedVersionId": {
            "type": "string",
            "description": "The workflow last published version id"
          },
          "createdBy": {
            "type": "object",
            "properties": {
              "source": {
                "type": "string",
                "enum": [
                  "EMAIL",
                  "CALENDAR",
                  "WORKFLOW",
                  "API",
                  "IMPORT",
                  "MANUAL",
                  "SYSTEM",
                  "WEBHOOK"
                ]
              }
            },
            "description": "The creator of the record"
          },
          "position": {
            "type": "number",
            "description": "Workflow record position"
          },
          "statuses": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "DRAFT",
                "ACTIVE",
                "DEACTIVATED"
              ]
            },
            "description": "The current statuses of the workflow versions"
          },
          "name": {
            "type": "string",
            "description": "The workflow name"
          }
        },
        "example": {
          "statuses": [
            "DRAFT"
          ],
          "name": "Workflow name"
        }
      },
      "WorkflowForUpdate": {
        "type": "object",
        "description": "A workflow",
        "properties": {
          "lastPublishedVersionId": {
            "type": "string",
            "description": "The workflow last published version id"
          },
          "createdBy": {
            "type": "object",
            "properties": {
              "source": {
                "type": "string",
                "enum": [
                  "EMAIL",
                  "CALENDAR",
                  "WORKFLOW",
                  "API",
                  "IMPORT",
                  "MANUAL",
                  "SYSTEM",
                  "WEBHOOK"
                ]
              }
            },
            "description": "The creator of the record"
          },
          "position": {
            "type": "number",
            "description": "Workflow record position"
          },
          "statuses": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "DRAFT",
                "ACTIVE",
                "DEACTIVATED"
              ]
            },
            "description": "The current statuses of the workflow versions"
          },
          "name": {
            "type": "string",
            "description": "The workflow name"
          }
        },
        "example": {
          "statuses": [
            "DRAFT"
          ],
          "name": "Workflow name"
        }
      },
      "WorkflowForResponse": {
        "type": "object",
        "description": "A workflow",
        "properties": {
          "lastPublishedVersionId": {
            "type": "string",
            "description": "The workflow last published version id"
          },
          "deletedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Date when the record was deleted"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Last time the record was changed"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Creation date"
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Id"
          },
          "createdBy": {
            "type": "object",
            "properties": {
              "source": {
                "type": "string",
                "enum": [
                  "EMAIL",
                  "CALENDAR",
                  "WORKFLOW",
                  "API",
                  "IMPORT",
                  "MANUAL",
                  "SYSTEM",
                  "WEBHOOK"
                ]
              },
              "workspaceMemberId": {
                "type": "string",
                "format": "uuid"
              },
              "name": {
                "type": "string"
              }
            },
            "description": "The creator of the record"
          },
          "position": {
            "type": "number",
            "description": "Workflow record position"
          },
          "statuses": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "DRAFT",
                "ACTIVE",
                "DEACTIVATED"
              ]
            },
            "description": "The current statuses of the workflow versions"
          },
          "name": {
            "type": "string",
            "description": "The workflow name"
          },
          "versions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WorkflowVersionForResponse"
            },
            "description": "Workflow versions linked to the workflow."
          },
          "runs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WorkflowRunForResponse"
            },
            "description": "Workflow runs linked to the workflow."
          },
          "automatedTriggers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WorkflowAutomatedTriggerForResponse"
            },
            "description": "Workflow automated triggers linked to the workflow."
          },
          "favorites": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FavoriteForResponse"
            },
            "description": "Favorites linked to the workflow"
          },
          "timelineActivities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TimelineActivityForResponse"
            },
            "description": "Timeline activities linked to the workflow"
          },
          "attachments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AttachmentForResponse"
            },
            "description": "Attachments linked to the workflow"
          }
        }
      },
      "WorkflowVersion": {
        "type": "object",
        "description": "A workflow version",
        "properties": {
          "workflowId": {
            "type": "string",
            "format": "uuid"
          },
          "position": {
            "type": "number",
            "description": "Workflow version position"
          },
          "status": {
            "type": "string",
            "enum": [
              "DRAFT",
              "ACTIVE",
              "DEACTIVATED",
              "ARCHIVED"
            ],
            "description": "The workflow version status"
          },
          "steps": {
            "type": "object",
            "description": "Json object to provide steps"
          },
          "trigger": {
            "type": "object",
            "description": "Json object to provide trigger"
          },
          "name": {
            "type": "string",
            "description": "The workflow version name"
          }
        },
        "example": {
          "status": [
            "DRAFT"
          ],
          "name": "Workflow Version name"
        }
      },
      "WorkflowVersionForUpdate": {
        "type": "object",
        "description": "A workflow version",
        "properties": {
          "workflowId": {
            "type": "string",
            "format": "uuid"
          },
          "position": {
            "type": "number",
            "description": "Workflow version position"
          },
          "status": {
            "type": "string",
            "enum": [
              "DRAFT",
              "ACTIVE",
              "DEACTIVATED",
              "ARCHIVED"
            ],
            "description": "The workflow version status"
          },
          "steps": {
            "type": "object",
            "description": "Json object to provide steps"
          },
          "trigger": {
            "type": "object",
            "description": "Json object to provide trigger"
          },
          "name": {
            "type": "string",
            "description": "The workflow version name"
          }
        },
        "example": {
          "status": [
            "DRAFT"
          ],
          "name": "Workflow Version name"
        }
      },
      "WorkflowVersionForResponse": {
        "type": "object",
        "description": "A workflow version",
        "properties": {
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Last time the record was changed"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Creation date"
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Id"
          },
          "workflowId": {
            "type": "string",
            "format": "uuid"
          },
          "position": {
            "type": "number",
            "description": "Workflow version position"
          },
          "status": {
            "type": "string",
            "enum": [
              "DRAFT",
              "ACTIVE",
              "DEACTIVATED",
              "ARCHIVED"
            ],
            "description": "The workflow version status"
          },
          "steps": {
            "type": "object",
            "description": "Json object to provide steps"
          },
          "trigger": {
            "type": "object",
            "description": "Json object to provide trigger"
          },
          "name": {
            "type": "string",
            "description": "The workflow version name"
          },
          "deletedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Date when the record was deleted"
          },
          "favorites": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FavoriteForResponse"
            },
            "description": "Favorites linked to the workflow version"
          },
          "timelineActivities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TimelineActivityForResponse"
            },
            "description": "Timeline activities linked to the version"
          },
          "workflow": {
            "type": "object",
            "oneOf": [
              {
                "$ref": "#/components/schemas/WorkflowForResponse"
              }
            ],
            "description": "WorkflowVersion workflow"
          },
          "runs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WorkflowRunForResponse"
            },
            "description": "Workflow runs linked to the version."
          }
        }
      },
      "WorkspaceMember": {
        "type": "object",
        "description": "A workspace member",
        "properties": {
          "locale": {
            "type": "string",
            "description": "Preferred language"
          },
          "avatarUrl": {
            "type": "string",
            "description": "Workspace member avatar"
          },
          "userEmail": {
            "type": "string",
            "description": "Related user email address"
          },
          "calendarStartDay": {
            "type": "integer",
            "description": "User's preferred start day of the week"
          },
          "userId": {
            "type": "string",
            "format": "uuid",
            "description": "Associated User Id"
          },
          "timeZone": {
            "type": "string",
            "description": "User time zone"
          },
          "dateFormat": {
            "type": "string",
            "enum": [
              "SYSTEM",
              "MONTH_FIRST",
              "DAY_FIRST",
              "YEAR_FIRST"
            ],
            "description": "User's preferred date format"
          },
          "timeFormat": {
            "type": "string",
            "enum": [
              "SYSTEM",
              "HOUR_24",
              "HOUR_12"
            ],
            "description": "User's preferred time format"
          },
          "numberFormat": {
            "type": "string",
            "enum": [
              "SYSTEM",
              "COMMAS_AND_DOT",
              "SPACES_AND_COMMA",
              "DOTS_AND_COMMA",
              "APOSTROPHE_AND_DOT"
            ],
            "description": "User's preferred number format"
          },
          "position": {
            "type": "number",
            "description": "Workspace member position"
          },
          "name": {
            "type": "object",
            "properties": {
              "firstName": {
                "type": "string"
              },
              "lastName": {
                "type": "string"
              }
            },
            "description": "Workspace member name"
          },
          "colorScheme": {
            "type": "string",
            "description": "Preferred color scheme"
          }
        },
        "example": {
          "userId": "b8ca7e28-b941-49d9-868c-ce0e5516e06f",
          "dateFormat": [
            "SYSTEM"
          ],
          "timeFormat": [
            "SYSTEM"
          ],
          "numberFormat": [
            "SYSTEM"
          ],
          "name": {
            "firstName": "Margaretta",
            "lastName": "Wolff-Kuhlman"
          }
        },
        "required": [
          "userId"
        ]
      },
      "WorkspaceMemberForUpdate": {
        "type": "object",
        "description": "A workspace member",
        "properties": {
          "locale": {
            "type": "string",
            "description": "Preferred language"
          },
          "avatarUrl": {
            "type": "string",
            "description": "Workspace member avatar"
          },
          "userEmail": {
            "type": "string",
            "description": "Related user email address"
          },
          "calendarStartDay": {
            "type": "integer",
            "description": "User's preferred start day of the week"
          },
          "userId": {
            "type": "string",
            "format": "uuid",
            "description": "Associated User Id"
          },
          "timeZone": {
            "type": "string",
            "description": "User time zone"
          },
          "dateFormat": {
            "type": "string",
            "enum": [
              "SYSTEM",
              "MONTH_FIRST",
              "DAY_FIRST",
              "YEAR_FIRST"
            ],
            "description": "User's preferred date format"
          },
          "timeFormat": {
            "type": "string",
            "enum": [
              "SYSTEM",
              "HOUR_24",
              "HOUR_12"
            ],
            "description": "User's preferred time format"
          },
          "numberFormat": {
            "type": "string",
            "enum": [
              "SYSTEM",
              "COMMAS_AND_DOT",
              "SPACES_AND_COMMA",
              "DOTS_AND_COMMA",
              "APOSTROPHE_AND_DOT"
            ],
            "description": "User's preferred number format"
          },
          "position": {
            "type": "number",
            "description": "Workspace member position"
          },
          "name": {
            "type": "object",
            "properties": {
              "firstName": {
                "type": "string"
              },
              "lastName": {
                "type": "string"
              }
            },
            "description": "Workspace member name"
          },
          "colorScheme": {
            "type": "string",
            "description": "Preferred color scheme"
          }
        },
        "example": {
          "userId": "b1de18d4-1900-4de8-b381-a123395a81ae",
          "dateFormat": [
            "SYSTEM"
          ],
          "timeFormat": [
            "SYSTEM"
          ],
          "numberFormat": [
            "SYSTEM"
          ],
          "name": {
            "firstName": "Summer",
            "lastName": "Hirthe"
          }
        }
      },
      "WorkspaceMemberForResponse": {
        "type": "object",
        "description": "A workspace member",
        "properties": {
          "locale": {
            "type": "string",
            "description": "Preferred language"
          },
          "avatarUrl": {
            "type": "string",
            "description": "Workspace member avatar"
          },
          "userEmail": {
            "type": "string",
            "description": "Related user email address"
          },
          "calendarStartDay": {
            "type": "integer",
            "description": "User's preferred start day of the week"
          },
          "userId": {
            "type": "string",
            "format": "uuid",
            "description": "Associated User Id"
          },
          "timeZone": {
            "type": "string",
            "description": "User time zone"
          },
          "dateFormat": {
            "type": "string",
            "enum": [
              "SYSTEM",
              "MONTH_FIRST",
              "DAY_FIRST",
              "YEAR_FIRST"
            ],
            "description": "User's preferred date format"
          },
          "timeFormat": {
            "type": "string",
            "enum": [
              "SYSTEM",
              "HOUR_24",
              "HOUR_12"
            ],
            "description": "User's preferred time format"
          },
          "numberFormat": {
            "type": "string",
            "enum": [
              "SYSTEM",
              "COMMAS_AND_DOT",
              "SPACES_AND_COMMA",
              "DOTS_AND_COMMA",
              "APOSTROPHE_AND_DOT"
            ],
            "description": "User's preferred number format"
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Id"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Creation date"
          },
          "deletedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Date when the record was deleted"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Last time the record was changed"
          },
          "position": {
            "type": "number",
            "description": "Workspace member position"
          },
          "name": {
            "type": "object",
            "properties": {
              "firstName": {
                "type": "string"
              },
              "lastName": {
                "type": "string"
              }
            },
            "description": "Workspace member name"
          },
          "colorScheme": {
            "type": "string",
            "description": "Preferred color scheme"
          },
          "calendarEventParticipants": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CalendarEventParticipantForResponse"
            },
            "description": "Calendar Event Participants"
          },
          "timelineActivities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TimelineActivityForResponse"
            },
            "description": "Events linked to the workspace member"
          },
          "connectedAccounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ConnectedAccountForResponse"
            },
            "description": "Connected accounts"
          },
          "authoredAttachments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AttachmentForResponse"
            },
            "description": "Attachments created by the workspace member"
          },
          "accountOwnerForCompanies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CompanyForResponse"
            },
            "description": "Account owner for companies"
          },
          "favorites": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FavoriteForResponse"
            },
            "description": "Favorites linked to the workspace member"
          },
          "assignedTasks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TaskForResponse"
            },
            "description": "Tasks assigned to the workspace member"
          },
          "blocklist": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BlocklistForResponse"
            },
            "description": "Blocklisted handles"
          },
          "messageParticipants": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MessageParticipantForResponse"
            },
            "description": "Message Participants"
          }
        }
      }
    },
    "parameters": {
      "idPath": {
        "name": "id",
        "in": "path",
        "description": "Object id.",
        "required": true,
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      },
      "startingAfter": {
        "name": "starting_after",
        "in": "query",
        "description": "Returns objects starting after a specific cursor. You can find cursors in **startCursor** and **endCursor** in **pageInfo** in response data",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "endingBefore": {
        "name": "ending_before",
        "in": "query",
        "description": "Returns objects ending before a specific cursor. You can find cursors in **startCursor** and **endCursor** in **pageInfo** in response data",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "filter": {
        "name": "filter",
        "in": "query",
        "description": "Format: field[COMPARATOR]:value,field2[COMPARATOR]:value2  \n    Refer to the filter section at the top of the page for more details.",
        "required": false,
        "schema": {
          "type": "string"
        },
        "examples": {
          "simple": {
            "value": "createdAt[gte]:\"2023-01-01\"",
            "description": "A simple filter param"
          },
          "simpleNested": {
            "value": "emails.primaryEmail[eq]:foo99@example.com",
            "description": "A simple composite type filter param"
          },
          "complex": {
            "value": "or(createdAt[gte]:\"2024-01-01\",createdAt[lte]:\"2023-01-01\",not(id[is]:NULL))",
            "description": "A more complex filter param"
          }
        }
      },
      "depth": {
        "name": "depth",
        "in": "query",
        "description": "Determines the level of nested related objects to include in the response.  \n    - 0: Primary object only  \n    - 1: Primary object + direct relations  \n    - 2: Primary object + direct relations + nested relations",
        "required": false,
        "schema": {
          "type": "integer",
          "enum": [0, 1],
          "default": 1
        }
      },
      "orderBy": {
        "name": "order_by",
        "in": "query",
        "description": "Format: **field_name_1,field_name_2[DIRECTION_2]\n    Refer to the filter section at the top of the page for more details.",
        "required": false,
        "schema": {
          "type": "string"
        },
        "examples": {
          "simple": {
            "value": "createdAt",
            "summary": "A simple order_by param"
          },
          "complex": {
            "value": "id[AscNullsFirst],createdAt[DescNullsLast]",
            "summary": "A more complex order_by param"
          }
        }
      },
      "limit": {
        "name": "limit",
        "in": "query",
        "description": "Limits the number of objects returned.",
        "required": false,
        "schema": {
          "type": "integer",
          "minimum": 0,
          "maximum": 200,
          "default": 60
        }
      }
    },
    "responses": {
      "400": {
        "description": "Bad Request",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "statusCode": {
                  "type": "number"
                },
                "messages": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "error": {
                  "type": "string"
                }
              },
              "example": {
                "statusCode": 400,
                "message": "error message",
                "error": "Bad Request"
              }
            }
          }
        }
      },
      "401": {
        "description": "Unauthorized",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "statusCode": {
                  "type": "number"
                },
                "message": {
                  "type": "string"
                },
                "error": {
                  "type": "string"
                }
              },
              "example": {
                "statusCode": 401,
                "message": "Token invalid.",
                "error": "Unauthorized"
              }
            }
          }
        }
      }
    }
  },
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "externalDocs": {
    "description": "Find out more about **Twenty**",
    "url": "https://twenty.com"
  },
  "paths": {
    "/open-api/core": {
      "get": {
        "tags": [
          "General"
        ],
        "summary": "Get Open Api Schema",
        "operationId": "GetOpenApiSchema",
        "servers": [
          {
            "url": "https://20.techpranee.com"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "openapi": {
                      "type": "string"
                    },
                    "info": {
                      "type": "object",
                      "properties": {
                        "title": {
                          "type": "string"
                        },
                        "description": {
                          "type": "string"
                        },
                        "termsOfService": {
                          "type": "string"
                        },
                        "contact": {
                          "type": "object",
                          "properties": {
                            "email": {
                              "type": "string"
                            }
                          }
                        },
                        "license": {
                          "type": "object",
                          "properties": {
                            "name": {
                              "type": "string"
                            },
                            "url": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    },
                    "servers": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "url": {
                            "type": "string"
                          },
                          "description": {
                            "type": "string"
                          }
                        }
                      }
                    },
                    "components": {
                      "type": "object",
                      "properties": {
                        "schemas": {
                          "type": "object"
                        },
                        "parameters": {
                          "type": "object"
                        },
                        "responses": {
                          "type": "object"
                        }
                      }
                    },
                    "paths": {
                      "type": "object"
                    },
                    "tags": {
                      "type": "object"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/attachments": {
      "get": {
        "tags": [
          "attachments"
        ],
        "summary": "Find Many attachments",
        "description": "**order_by**, **filter**, **limit**, **depth**, **starting_after** or **ending_before** can be provided to request your **attachments**",
        "operationId": "findManyAttachments",
        "parameters": [
          {
            "$ref": "#/components/parameters/orderBy"
          },
          {
            "$ref": "#/components/parameters/filter"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/depth"
          },
          {
            "$ref": "#/components/parameters/startingAfter"
          },
          {
            "$ref": "#/components/parameters/endingBefore"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "attachments": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/AttachmentForResponse"
                          }
                        }
                      }
                    },
                    "pageInfo": {
                      "type": "object",
                      "properties": {
                        "hasNextPage": {
                          "type": "boolean"
                        },
                        "startCursor": {
                          "type": "string",
                          "format": "uuid"
                        },
                        "endCursor": {
                          "type": "string",
                          "format": "uuid"
                        }
                      }
                    },
                    "totalCount": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      },
      "post": {
        "tags": [
          "attachments"
        ],
        "summary": "Create One attachment",
        "operationId": "createOneAttachment",
        "parameters": [
          {
            "$ref": "#/components/parameters/depth"
          }
        ],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Attachment"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "createAttachment": {
                          "$ref": "#/components/schemas/AttachmentForResponse"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/batch/attachments": {
      "post": {
        "tags": [
          "attachments"
        ],
        "summary": "Create Many attachments",
        "operationId": "createManyAttachments",
        "parameters": [
          {
            "$ref": "#/components/parameters/depth"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Attachment"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "createAttachments": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/AttachmentForResponse"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/attachments/{id}": {
      "get": {
        "tags": [
          "attachments"
        ],
        "summary": "Find One attachment",
        "description": "**depth** can be provided to request your **attachment**",
        "operationId": "findOneAttachment",
        "parameters": [
          {
            "$ref": "#/components/parameters/idPath"
          },
          {
            "$ref": "#/components/parameters/depth"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "attachment": {
                          "$ref": "#/components/schemas/AttachmentForResponse"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      },
      "delete": {
        "tags": [
          "attachments"
        ],
        "summary": "Delete One attachment",
        "operationId": "deleteOneAttachment",
        "parameters": [
          {
            "$ref": "#/components/parameters/idPath"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "deleteAttachment": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string",
                              "format": "uuid"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      },
      "patch": {
        "tags": [
          "attachments"
        ],
        "summary": "Update One attachment",
        "operationId": "UpdateOneAttachment",
        "parameters": [
          {
            "$ref": "#/components/parameters/idPath"
          },
          {
            "$ref": "#/components/parameters/depth"
          }
        ],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AttachmentForUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "updateAttachment": {
                          "$ref": "#/components/schemas/AttachmentForResponse"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/attachments/duplicates": {
      "post": {
        "tags": [
          "attachments"
        ],
        "summary": "Find attachment Duplicates",
        "description": "**depth** can be provided to request your **attachment**",
        "operationId": "findAttachmentDuplicates",
        "parameters": [
          {
            "$ref": "#/components/parameters/depth"
          }
        ],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/Attachment"
                    }
                  },
                  "ids": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "uuid"
                    }
                  }
                },
                "example": {
                  "ids": [
                    "ade1e79a-39be-4d83-8010-bb6254578bd0"
                  ]
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "totalCount": {
                            "type": "number"
                          },
                          "pageInfo": {
                            "type": "object",
                            "properties": {
                              "hasNextPage": {
                                "type": "boolean"
                              },
                              "startCursor": {
                                "type": "string",
                                "format": "uuid"
                              },
                              "endCursor": {
                                "type": "string",
                                "format": "uuid"
                              }
                            }
                          },
                          "attachmentDuplicates": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/AttachmentForResponse"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/blocklists": {
      "get": {
        "tags": [
          "blocklists"
        ],
        "summary": "Find Many blocklists",
        "description": "**order_by**, **filter**, **limit**, **depth**, **starting_after** or **ending_before** can be provided to request your **blocklists**",
        "operationId": "findManyBlocklists",
        "parameters": [
          {
            "$ref": "#/components/parameters/orderBy"
          },
          {
            "$ref": "#/components/parameters/filter"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/depth"
          },
          {
            "$ref": "#/components/parameters/startingAfter"
          },
          {
            "$ref": "#/components/parameters/endingBefore"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "blocklists": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/BlocklistForResponse"
                          }
                        }
                      }
                    },
                    "pageInfo": {
                      "type": "object",
                      "properties": {
                        "hasNextPage": {
                          "type": "boolean"
                        },
                        "startCursor": {
                          "type": "string",
                          "format": "uuid"
                        },
                        "endCursor": {
                          "type": "string",
                          "format": "uuid"
                        }
                      }
                    },
                    "totalCount": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      },
      "post": {
        "tags": [
          "blocklists"
        ],
        "summary": "Create One blocklist",
        "operationId": "createOneBlocklist",
        "parameters": [
          {
            "$ref": "#/components/parameters/depth"
          }
        ],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Blocklist"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "createBlocklist": {
                          "$ref": "#/components/schemas/BlocklistForResponse"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/batch/blocklists": {
      "post": {
        "tags": [
          "blocklists"
        ],
        "summary": "Create Many blocklists",
        "operationId": "createManyBlocklists",
        "parameters": [
          {
            "$ref": "#/components/parameters/depth"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Blocklist"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "createBlocklists": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/BlocklistForResponse"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/blocklists/{id}": {
      "get": {
        "tags": [
          "blocklists"
        ],
        "summary": "Find One blocklist",
        "description": "**depth** can be provided to request your **blocklist**",
        "operationId": "findOneBlocklist",
        "parameters": [
          {
            "$ref": "#/components/parameters/idPath"
          },
          {
            "$ref": "#/components/parameters/depth"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "blocklist": {
                          "$ref": "#/components/schemas/BlocklistForResponse"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      },
      "delete": {
        "tags": [
          "blocklists"
        ],
        "summary": "Delete One blocklist",
        "operationId": "deleteOneBlocklist",
        "parameters": [
          {
            "$ref": "#/components/parameters/idPath"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "deleteBlocklist": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string",
                              "format": "uuid"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      },
      "patch": {
        "tags": [
          "blocklists"
        ],
        "summary": "Update One blocklist",
        "operationId": "UpdateOneBlocklist",
        "parameters": [
          {
            "$ref": "#/components/parameters/idPath"
          },
          {
            "$ref": "#/components/parameters/depth"
          }
        ],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BlocklistForUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "updateBlocklist": {
                          "$ref": "#/components/schemas/BlocklistForResponse"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/blocklists/duplicates": {
      "post": {
        "tags": [
          "blocklists"
        ],
        "summary": "Find blocklist Duplicates",
        "description": "**depth** can be provided to request your **blocklist**",
        "operationId": "findBlocklistDuplicates",
        "parameters": [
          {
            "$ref": "#/components/parameters/depth"
          }
        ],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/Blocklist"
                    }
                  },
                  "ids": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "uuid"
                    }
                  }
                },
                "example": {
                  "ids": [
                    "8c85f667-0d47-46fa-93f5-91d7b2888461"
                  ]
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "totalCount": {
                            "type": "number"
                          },
                          "pageInfo": {
                            "type": "object",
                            "properties": {
                              "hasNextPage": {
                                "type": "boolean"
                              },
                              "startCursor": {
                                "type": "string",
                                "format": "uuid"
                              },
                              "endCursor": {
                                "type": "string",
                                "format": "uuid"
                              }
                            }
                          },
                          "blocklistDuplicates": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/BlocklistForResponse"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/calendarChannelEventAssociations": {
      "get": {
        "tags": [
          "calendarChannelEventAssociations"
        ],
        "summary": "Find Many calendarChannelEventAssociations",
        "description": "**order_by**, **filter**, **limit**, **depth**, **starting_after** or **ending_before** can be provided to request your **calendarChannelEventAssociations**",
        "operationId": "findManyCalendarChannelEventAssociations",
        "parameters": [
          {
            "$ref": "#/components/parameters/orderBy"
          },
          {
            "$ref": "#/components/parameters/filter"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/depth"
          },
          {
            "$ref": "#/components/parameters/startingAfter"
          },
          {
            "$ref": "#/components/parameters/endingBefore"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "calendarChannelEventAssociations": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/CalendarChannelEventAssociationForResponse"
                          }
                        }
                      }
                    },
                    "pageInfo": {
                      "type": "object",
                      "properties": {
                        "hasNextPage": {
                          "type": "boolean"
                        },
                        "startCursor": {
                          "type": "string",
                          "format": "uuid"
                        },
                        "endCursor": {
                          "type": "string",
                          "format": "uuid"
                        }
                      }
                    },
                    "totalCount": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      },
      "post": {
        "tags": [
          "calendarChannelEventAssociations"
        ],
        "summary": "Create One calendarChannelEventAssociation",
        "operationId": "createOneCalendarChannelEventAssociation",
        "parameters": [
          {
            "$ref": "#/components/parameters/depth"
          }
        ],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CalendarChannelEventAssociation"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "createCalendarChannelEventAssociation": {
                          "$ref": "#/components/schemas/CalendarChannelEventAssociationForResponse"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/batch/calendarChannelEventAssociations": {
      "post": {
        "tags": [
          "calendarChannelEventAssociations"
        ],
        "summary": "Create Many calendarChannelEventAssociations",
        "operationId": "createManyCalendarChannelEventAssociations",
        "parameters": [
          {
            "$ref": "#/components/parameters/depth"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CalendarChannelEventAssociation"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "createCalendarChannelEventAssociations": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/CalendarChannelEventAssociationForResponse"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/calendarChannelEventAssociations/{id}": {
      "get": {
        "tags": [
          "calendarChannelEventAssociations"
        ],
        "summary": "Find One calendarChannelEventAssociation",
        "description": "**depth** can be provided to request your **calendarChannelEventAssociation**",
        "operationId": "findOneCalendarChannelEventAssociation",
        "parameters": [
          {
            "$ref": "#/components/parameters/idPath"
          },
          {
            "$ref": "#/components/parameters/depth"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "calendarChannelEventAssociation": {
                          "$ref": "#/components/schemas/CalendarChannelEventAssociationForResponse"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      },
      "delete": {
        "tags": [
          "calendarChannelEventAssociations"
        ],
        "summary": "Delete One calendarChannelEventAssociation",
        "operationId": "deleteOneCalendarChannelEventAssociation",
        "parameters": [
          {
            "$ref": "#/components/parameters/idPath"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "deleteCalendarChannelEventAssociation": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string",
                              "format": "uuid"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      },
      "patch": {
        "tags": [
          "calendarChannelEventAssociations"
        ],
        "summary": "Update One calendarChannelEventAssociation",
        "operationId": "UpdateOneCalendarChannelEventAssociation",
        "parameters": [
          {
            "$ref": "#/components/parameters/idPath"
          },
          {
            "$ref": "#/components/parameters/depth"
          }
        ],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CalendarChannelEventAssociationForUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "updateCalendarChannelEventAssociation": {
                          "$ref": "#/components/schemas/CalendarChannelEventAssociationForResponse"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/calendarChannelEventAssociations/duplicates": {
      "post": {
        "tags": [
          "calendarChannelEventAssociations"
        ],
        "summary": "Find calendarChannelEventAssociation Duplicates",
        "description": "**depth** can be provided to request your **calendarChannelEventAssociation**",
        "operationId": "findCalendarChannelEventAssociationDuplicates",
        "parameters": [
          {
            "$ref": "#/components/parameters/depth"
          }
        ],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/CalendarChannelEventAssociation"
                    }
                  },
                  "ids": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "uuid"
                    }
                  }
                },
                "example": {
                  "ids": [
                    "01158443-3faa-451f-88ec-b1d8d29c79e2"
                  ]
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "totalCount": {
                            "type": "number"
                          },
                          "pageInfo": {
                            "type": "object",
                            "properties": {
                              "hasNextPage": {
                                "type": "boolean"
                              },
                              "startCursor": {
                                "type": "string",
                                "format": "uuid"
                              },
                              "endCursor": {
                                "type": "string",
                                "format": "uuid"
                              }
                            }
                          },
                          "calendarChannelEventAssociationDuplicates": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/CalendarChannelEventAssociationForResponse"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/calendarChannels": {
      "get": {
        "tags": [
          "calendarChannels"
        ],
        "summary": "Find Many calendarChannels",
        "description": "**order_by**, **filter**, **limit**, **depth**, **starting_after** or **ending_before** can be provided to request your **calendarChannels**",
        "operationId": "findManyCalendarChannels",
        "parameters": [
          {
            "$ref": "#/components/parameters/orderBy"
          },
          {
            "$ref": "#/components/parameters/filter"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/depth"
          },
          {
            "$ref": "#/components/parameters/startingAfter"
          },
          {
            "$ref": "#/components/parameters/endingBefore"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "calendarChannels": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/CalendarChannelForResponse"
                          }
                        }
                      }
                    },
                    "pageInfo": {
                      "type": "object",
                      "properties": {
                        "hasNextPage": {
                          "type": "boolean"
                        },
                        "startCursor": {
                          "type": "string",
                          "format": "uuid"
                        },
                        "endCursor": {
                          "type": "string",
                          "format": "uuid"
                        }
                      }
                    },
                    "totalCount": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      },
      "post": {
        "tags": [
          "calendarChannels"
        ],
        "summary": "Create One calendarChannel",
        "operationId": "createOneCalendarChannel",
        "parameters": [
          {
            "$ref": "#/components/parameters/depth"
          }
        ],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CalendarChannel"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "createCalendarChannel": {
                          "$ref": "#/components/schemas/CalendarChannelForResponse"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/batch/calendarChannels": {
      "post": {
        "tags": [
          "calendarChannels"
        ],
        "summary": "Create Many calendarChannels",
        "operationId": "createManyCalendarChannels",
        "parameters": [
          {
            "$ref": "#/components/parameters/depth"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CalendarChannel"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "createCalendarChannels": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/CalendarChannelForResponse"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/calendarChannels/{id}": {
      "get": {
        "tags": [
          "calendarChannels"
        ],
        "summary": "Find One calendarChannel",
        "description": "**depth** can be provided to request your **calendarChannel**",
        "operationId": "findOneCalendarChannel",
        "parameters": [
          {
            "$ref": "#/components/parameters/idPath"
          },
          {
            "$ref": "#/components/parameters/depth"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "calendarChannel": {
                          "$ref": "#/components/schemas/CalendarChannelForResponse"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      },
      "delete": {
        "tags": [
          "calendarChannels"
        ],
        "summary": "Delete One calendarChannel",
        "operationId": "deleteOneCalendarChannel",
        "parameters": [
          {
            "$ref": "#/components/parameters/idPath"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "deleteCalendarChannel": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string",
                              "format": "uuid"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      },
      "patch": {
        "tags": [
          "calendarChannels"
        ],
        "summary": "Update One calendarChannel",
        "operationId": "UpdateOneCalendarChannel",
        "parameters": [
          {
            "$ref": "#/components/parameters/idPath"
          },
          {
            "$ref": "#/components/parameters/depth"
          }
        ],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CalendarChannelForUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "updateCalendarChannel": {
                          "$ref": "#/components/schemas/CalendarChannelForResponse"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/calendarChannels/duplicates": {
      "post": {
        "tags": [
          "calendarChannels"
        ],
        "summary": "Find calendarChannel Duplicates",
        "description": "**depth** can be provided to request your **calendarChannel**",
        "operationId": "findCalendarChannelDuplicates",
        "parameters": [
          {
            "$ref": "#/components/parameters/depth"
          }
        ],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/CalendarChannel"
                    }
                  },
                  "ids": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "uuid"
                    }
                  }
                },
                "example": {
                  "ids": [
                    "4121b0b1-98f6-415b-812d-01b6dc43b4d5"
                  ]
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "totalCount": {
                            "type": "number"
                          },
                          "pageInfo": {
                            "type": "object",
                            "properties": {
                              "hasNextPage": {
                                "type": "boolean"
                              },
                              "startCursor": {
                                "type": "string",
                                "format": "uuid"
                              },
                              "endCursor": {
                                "type": "string",
                                "format": "uuid"
                              }
                            }
                          },
                          "calendarChannelDuplicates": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/CalendarChannelForResponse"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/calendarEventParticipants": {
      "get": {
        "tags": [
          "calendarEventParticipants"
        ],
        "summary": "Find Many calendarEventParticipants",
        "description": "**order_by**, **filter**, **limit**, **depth**, **starting_after** or **ending_before** can be provided to request your **calendarEventParticipants**",
        "operationId": "findManyCalendarEventParticipants",
        "parameters": [
          {
            "$ref": "#/components/parameters/orderBy"
          },
          {
            "$ref": "#/components/parameters/filter"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/depth"
          },
          {
            "$ref": "#/components/parameters/startingAfter"
          },
          {
            "$ref": "#/components/parameters/endingBefore"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "calendarEventParticipants": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/CalendarEventParticipantForResponse"
                          }
                        }
                      }
                    },
                    "pageInfo": {
                      "type": "object",
                      "properties": {
                        "hasNextPage": {
                          "type": "boolean"
                        },
                        "startCursor": {
                          "type": "string",
                          "format": "uuid"
                        },
                        "endCursor": {
                          "type": "string",
                          "format": "uuid"
                        }
                      }
                    },
                    "totalCount": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      },
      "post": {
        "tags": [
          "calendarEventParticipants"
        ],
        "summary": "Create One calendarEventParticipant",
        "operationId": "createOneCalendarEventParticipant",
        "parameters": [
          {
            "$ref": "#/components/parameters/depth"
          }
        ],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CalendarEventParticipant"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "createCalendarEventParticipant": {
                          "$ref": "#/components/schemas/CalendarEventParticipantForResponse"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/batch/calendarEventParticipants": {
      "post": {
        "tags": [
          "calendarEventParticipants"
        ],
        "summary": "Create Many calendarEventParticipants",
        "operationId": "createManyCalendarEventParticipants",
        "parameters": [
          {
            "$ref": "#/components/parameters/depth"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CalendarEventParticipant"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "createCalendarEventParticipants": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/CalendarEventParticipantForResponse"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/calendarEventParticipants/{id}": {
      "get": {
        "tags": [
          "calendarEventParticipants"
        ],
        "summary": "Find One calendarEventParticipant",
        "description": "**depth** can be provided to request your **calendarEventParticipant**",
        "operationId": "findOneCalendarEventParticipant",
        "parameters": [
          {
            "$ref": "#/components/parameters/idPath"
          },
          {
            "$ref": "#/components/parameters/depth"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "calendarEventParticipant": {
                          "$ref": "#/components/schemas/CalendarEventParticipantForResponse"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      },
      "delete": {
        "tags": [
          "calendarEventParticipants"
        ],
        "summary": "Delete One calendarEventParticipant",
        "operationId": "deleteOneCalendarEventParticipant",
        "parameters": [
          {
            "$ref": "#/components/parameters/idPath"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "deleteCalendarEventParticipant": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string",
                              "format": "uuid"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      },
      "patch": {
        "tags": [
          "calendarEventParticipants"
        ],
        "summary": "Update One calendarEventParticipant",
        "operationId": "UpdateOneCalendarEventParticipant",
        "parameters": [
          {
            "$ref": "#/components/parameters/idPath"
          },
          {
            "$ref": "#/components/parameters/depth"
          }
        ],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CalendarEventParticipantForUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "updateCalendarEventParticipant": {
                          "$ref": "#/components/schemas/CalendarEventParticipantForResponse"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/calendarEventParticipants/duplicates": {
      "post": {
        "tags": [
          "calendarEventParticipants"
        ],
        "summary": "Find calendarEventParticipant Duplicates",
        "description": "**depth** can be provided to request your **calendarEventParticipant**",
        "operationId": "findCalendarEventParticipantDuplicates",
        "parameters": [
          {
            "$ref": "#/components/parameters/depth"
          }
        ],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/CalendarEventParticipant"
                    }
                  },
                  "ids": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "uuid"
                    }
                  }
                },
                "example": {
                  "ids": [
                    "be41075f-bb5d-4d0b-85ae-fbd8f019076c"
                  ]
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "totalCount": {
                            "type": "number"
                          },
                          "pageInfo": {
                            "type": "object",
                            "properties": {
                              "hasNextPage": {
                                "type": "boolean"
                              },
                              "startCursor": {
                                "type": "string",
                                "format": "uuid"
                              },
                              "endCursor": {
                                "type": "string",
                                "format": "uuid"
                              }
                            }
                          },
                          "calendarEventParticipantDuplicates": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/CalendarEventParticipantForResponse"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/calendarEvents": {
      "get": {
        "tags": [
          "calendarEvents"
        ],
        "summary": "Find Many calendarEvents",
        "description": "**order_by**, **filter**, **limit**, **depth**, **starting_after** or **ending_before** can be provided to request your **calendarEvents**",
        "operationId": "findManyCalendarEvents",
        "parameters": [
          {
            "$ref": "#/components/parameters/orderBy"
          },
          {
            "$ref": "#/components/parameters/filter"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/depth"
          },
          {
            "$ref": "#/components/parameters/startingAfter"
          },
          {
            "$ref": "#/components/parameters/endingBefore"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "calendarEvents": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/CalendarEventForResponse"
                          }
                        }
                      }
                    },
                    "pageInfo": {
                      "type": "object",
                      "properties": {
                        "hasNextPage": {
                          "type": "boolean"
                        },
                        "startCursor": {
                          "type": "string",
                          "format": "uuid"
                        },
                        "endCursor": {
                          "type": "string",
                          "format": "uuid"
                        }
                      }
                    },
                    "totalCount": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      },
      "post": {
        "tags": [
          "calendarEvents"
        ],
        "summary": "Create One calendarEvent",
        "operationId": "createOneCalendarEvent",
        "parameters": [
          {
            "$ref": "#/components/parameters/depth"
          }
        ],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CalendarEvent"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "createCalendarEvent": {
                          "$ref": "#/components/schemas/CalendarEventForResponse"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/batch/calendarEvents": {
      "post": {
        "tags": [
          "calendarEvents"
        ],
        "summary": "Create Many calendarEvents",
        "operationId": "createManyCalendarEvents",
        "parameters": [
          {
            "$ref": "#/components/parameters/depth"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CalendarEvent"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "createCalendarEvents": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/CalendarEventForResponse"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/calendarEvents/{id}": {
      "get": {
        "tags": [
          "calendarEvents"
        ],
        "summary": "Find One calendarEvent",
        "description": "**depth** can be provided to request your **calendarEvent**",
        "operationId": "findOneCalendarEvent",
        "parameters": [
          {
            "$ref": "#/components/parameters/idPath"
          },
          {
            "$ref": "#/components/parameters/depth"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "calendarEvent": {
                          "$ref": "#/components/schemas/CalendarEventForResponse"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      },
      "delete": {
        "tags": [
          "calendarEvents"
        ],
        "summary": "Delete One calendarEvent",
        "operationId": "deleteOneCalendarEvent",
        "parameters": [
          {
            "$ref": "#/components/parameters/idPath"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "deleteCalendarEvent": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string",
                              "format": "uuid"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      },
      "patch": {
        "tags": [
          "calendarEvents"
        ],
        "summary": "Update One calendarEvent",
        "operationId": "UpdateOneCalendarEvent",
        "parameters": [
          {
            "$ref": "#/components/parameters/idPath"
          },
          {
            "$ref": "#/components/parameters/depth"
          }
        ],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CalendarEventForUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "updateCalendarEvent": {
                          "$ref": "#/components/schemas/CalendarEventForResponse"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/calendarEvents/duplicates": {
      "post": {
        "tags": [
          "calendarEvents"
        ],
        "summary": "Find calendarEvent Duplicates",
        "description": "**depth** can be provided to request your **calendarEvent**",
        "operationId": "findCalendarEventDuplicates",
        "parameters": [
          {
            "$ref": "#/components/parameters/depth"
          }
        ],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/CalendarEvent"
                    }
                  },
                  "ids": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "uuid"
                    }
                  }
                },
                "example": {
                  "ids": [
                    "a68062d8-ba58-4612-8200-d837064afa01"
                  ]
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "totalCount": {
                            "type": "number"
                          },
                          "pageInfo": {
                            "type": "object",
                            "properties": {
                              "hasNextPage": {
                                "type": "boolean"
                              },
                              "startCursor": {
                                "type": "string",
                                "format": "uuid"
                              },
                              "endCursor": {
                                "type": "string",
                                "format": "uuid"
                              }
                            }
                          },
                          "calendarEventDuplicates": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/CalendarEventForResponse"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/companies": {
      "get": {
        "tags": [
          "companies"
        ],
        "summary": "Find Many companies",
        "description": "**order_by**, **filter**, **limit**, **depth**, **starting_after** or **ending_before** can be provided to request your **companies**",
        "operationId": "findManyCompanies",
        "parameters": [
          {
            "$ref": "#/components/parameters/orderBy"
          },
          {
            "$ref": "#/components/parameters/filter"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/depth"
          },
          {
            "$ref": "#/components/parameters/startingAfter"
          },
          {
            "$ref": "#/components/parameters/endingBefore"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "companies": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/CompanyForResponse"
                          }
                        }
                      }
                    },
                    "pageInfo": {
                      "type": "object",
                      "properties": {
                        "hasNextPage": {
                          "type": "boolean"
                        },
                        "startCursor": {
                          "type": "string",
                          "format": "uuid"
                        },
                        "endCursor": {
                          "type": "string",
                          "format": "uuid"
                        }
                      }
                    },
                    "totalCount": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      },
      "post": {
        "tags": [
          "companies"
        ],
        "summary": "Create One company",
        "operationId": "createOneCompany",
        "parameters": [
          {
            "$ref": "#/components/parameters/depth"
          }
        ],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Company"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "createCompany": {
                          "$ref": "#/components/schemas/CompanyForResponse"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/batch/companies": {
      "post": {
        "tags": [
          "companies"
        ],
        "summary": "Create Many companies",
        "operationId": "createManyCompanies",
        "parameters": [
          {
            "$ref": "#/components/parameters/depth"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Company"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "createCompanies": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/CompanyForResponse"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/companies/{id}": {
      "get": {
        "tags": [
          "companies"
        ],
        "summary": "Find One company",
        "description": "**depth** can be provided to request your **company**",
        "operationId": "findOneCompany",
        "parameters": [
          {
            "$ref": "#/components/parameters/idPath"
          },
          {
            "$ref": "#/components/parameters/depth"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "company": {
                          "$ref": "#/components/schemas/CompanyForResponse"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      },
      "delete": {
        "tags": [
          "companies"
        ],
        "summary": "Delete One company",
        "operationId": "deleteOneCompany",
        "parameters": [
          {
            "$ref": "#/components/parameters/idPath"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "deleteCompany": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string",
                              "format": "uuid"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      },
      "patch": {
        "tags": [
          "companies"
        ],
        "summary": "Update One company",
        "operationId": "UpdateOneCompany",
        "parameters": [
          {
            "$ref": "#/components/parameters/idPath"
          },
          {
            "$ref": "#/components/parameters/depth"
          }
        ],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CompanyForUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "updateCompany": {
                          "$ref": "#/components/schemas/CompanyForResponse"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/companies/duplicates": {
      "post": {
        "tags": [
          "companies"
        ],
        "summary": "Find company Duplicates",
        "description": "**depth** can be provided to request your **company**",
        "operationId": "findCompanyDuplicates",
        "parameters": [
          {
            "$ref": "#/components/parameters/depth"
          }
        ],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/Company"
                    }
                  },
                  "ids": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "uuid"
                    }
                  }
                },
                "example": {
                  "ids": [
                    "889d6fa0-445d-4b46-a452-6db8c2ae1eb0"
                  ]
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "totalCount": {
                            "type": "number"
                          },
                          "pageInfo": {
                            "type": "object",
                            "properties": {
                              "hasNextPage": {
                                "type": "boolean"
                              },
                              "startCursor": {
                                "type": "string",
                                "format": "uuid"
                              },
                              "endCursor": {
                                "type": "string",
                                "format": "uuid"
                              }
                            }
                          },
                          "companyDuplicates": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/CompanyForResponse"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/connectedAccounts": {
      "get": {
        "tags": [
          "connectedAccounts"
        ],
        "summary": "Find Many connectedAccounts",
        "description": "**order_by**, **filter**, **limit**, **depth**, **starting_after** or **ending_before** can be provided to request your **connectedAccounts**",
        "operationId": "findManyConnectedAccounts",
        "parameters": [
          {
            "$ref": "#/components/parameters/orderBy"
          },
          {
            "$ref": "#/components/parameters/filter"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/depth"
          },
          {
            "$ref": "#/components/parameters/startingAfter"
          },
          {
            "$ref": "#/components/parameters/endingBefore"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "connectedAccounts": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/ConnectedAccountForResponse"
                          }
                        }
                      }
                    },
                    "pageInfo": {
                      "type": "object",
                      "properties": {
                        "hasNextPage": {
                          "type": "boolean"
                        },
                        "startCursor": {
                          "type": "string",
                          "format": "uuid"
                        },
                        "endCursor": {
                          "type": "string",
                          "format": "uuid"
                        }
                      }
                    },
                    "totalCount": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      },
      "post": {
        "tags": [
          "connectedAccounts"
        ],
        "summary": "Create One connectedAccount",
        "operationId": "createOneConnectedAccount",
        "parameters": [
          {
            "$ref": "#/components/parameters/depth"
          }
        ],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConnectedAccount"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "createConnectedAccount": {
                          "$ref": "#/components/schemas/ConnectedAccountForResponse"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/batch/connectedAccounts": {
      "post": {
        "tags": [
          "connectedAccounts"
        ],
        "summary": "Create Many connectedAccounts",
        "operationId": "createManyConnectedAccounts",
        "parameters": [
          {
            "$ref": "#/components/parameters/depth"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ConnectedAccount"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "createConnectedAccounts": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/ConnectedAccountForResponse"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/connectedAccounts/{id}": {
      "get": {
        "tags": [
          "connectedAccounts"
        ],
        "summary": "Find One connectedAccount",
        "description": "**depth** can be provided to request your **connectedAccount**",
        "operationId": "findOneConnectedAccount",
        "parameters": [
          {
            "$ref": "#/components/parameters/idPath"
          },
          {
            "$ref": "#/components/parameters/depth"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "connectedAccount": {
                          "$ref": "#/components/schemas/ConnectedAccountForResponse"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      },
      "delete": {
        "tags": [
          "connectedAccounts"
        ],
        "summary": "Delete One connectedAccount",
        "operationId": "deleteOneConnectedAccount",
        "parameters": [
          {
            "$ref": "#/components/parameters/idPath"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "deleteConnectedAccount": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string",
                              "format": "uuid"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      },
      "patch": {
        "tags": [
          "connectedAccounts"
        ],
        "summary": "Update One connectedAccount",
        "operationId": "UpdateOneConnectedAccount",
        "parameters": [
          {
            "$ref": "#/components/parameters/idPath"
          },
          {
            "$ref": "#/components/parameters/depth"
          }
        ],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConnectedAccountForUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "updateConnectedAccount": {
                          "$ref": "#/components/schemas/ConnectedAccountForResponse"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/connectedAccounts/duplicates": {
      "post": {
        "tags": [
          "connectedAccounts"
        ],
        "summary": "Find connectedAccount Duplicates",
        "description": "**depth** can be provided to request your **connectedAccount**",
        "operationId": "findConnectedAccountDuplicates",
        "parameters": [
          {
            "$ref": "#/components/parameters/depth"
          }
        ],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ConnectedAccount"
                    }
                  },
                  "ids": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "uuid"
                    }
                  }
                },
                "example": {
                  "ids": [
                    "afb97851-8efa-4b79-a89a-612aeff6ef14"
                  ]
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "totalCount": {
                            "type": "number"
                          },
                          "pageInfo": {
                            "type": "object",
                            "properties": {
                              "hasNextPage": {
                                "type": "boolean"
                              },
                              "startCursor": {
                                "type": "string",
                                "format": "uuid"
                              },
                              "endCursor": {
                                "type": "string",
                                "format": "uuid"
                              }
                            }
                          },
                          "connectedAccountDuplicates": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/ConnectedAccountForResponse"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/favoriteFolders": {
      "get": {
        "tags": [
          "favoriteFolders"
        ],
        "summary": "Find Many favoriteFolders",
        "description": "**order_by**, **filter**, **limit**, **depth**, **starting_after** or **ending_before** can be provided to request your **favoriteFolders**",
        "operationId": "findManyFavoriteFolders",
        "parameters": [
          {
            "$ref": "#/components/parameters/orderBy"
          },
          {
            "$ref": "#/components/parameters/filter"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/depth"
          },
          {
            "$ref": "#/components/parameters/startingAfter"
          },
          {
            "$ref": "#/components/parameters/endingBefore"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "favoriteFolders": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/FavoriteFolderForResponse"
                          }
                        }
                      }
                    },
                    "pageInfo": {
                      "type": "object",
                      "properties": {
                        "hasNextPage": {
                          "type": "boolean"
                        },
                        "startCursor": {
                          "type": "string",
                          "format": "uuid"
                        },
                        "endCursor": {
                          "type": "string",
                          "format": "uuid"
                        }
                      }
                    },
                    "totalCount": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      },
      "post": {
        "tags": [
          "favoriteFolders"
        ],
        "summary": "Create One favoriteFolder",
        "operationId": "createOneFavoriteFolder",
        "parameters": [
          {
            "$ref": "#/components/parameters/depth"
          }
        ],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FavoriteFolder"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "createFavoriteFolder": {
                          "$ref": "#/components/schemas/FavoriteFolderForResponse"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/batch/favoriteFolders": {
      "post": {
        "tags": [
          "favoriteFolders"
        ],
        "summary": "Create Many favoriteFolders",
        "operationId": "createManyFavoriteFolders",
        "parameters": [
          {
            "$ref": "#/components/parameters/depth"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/FavoriteFolder"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "createFavoriteFolders": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/FavoriteFolderForResponse"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/favoriteFolders/{id}": {
      "get": {
        "tags": [
          "favoriteFolders"
        ],
        "summary": "Find One favoriteFolder",
        "description": "**depth** can be provided to request your **favoriteFolder**",
        "operationId": "findOneFavoriteFolder",
        "parameters": [
          {
            "$ref": "#/components/parameters/idPath"
          },
          {
            "$ref": "#/components/parameters/depth"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "favoriteFolder": {
                          "$ref": "#/components/schemas/FavoriteFolderForResponse"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      },
      "delete": {
        "tags": [
          "favoriteFolders"
        ],
        "summary": "Delete One favoriteFolder",
        "operationId": "deleteOneFavoriteFolder",
        "parameters": [
          {
            "$ref": "#/components/parameters/idPath"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "deleteFavoriteFolder": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string",
                              "format": "uuid"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      },
      "patch": {
        "tags": [
          "favoriteFolders"
        ],
        "summary": "Update One favoriteFolder",
        "operationId": "UpdateOneFavoriteFolder",
        "parameters": [
          {
            "$ref": "#/components/parameters/idPath"
          },
          {
            "$ref": "#/components/parameters/depth"
          }
        ],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FavoriteFolderForUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "updateFavoriteFolder": {
                          "$ref": "#/components/schemas/FavoriteFolderForResponse"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/favoriteFolders/duplicates": {
      "post": {
        "tags": [
          "favoriteFolders"
        ],
        "summary": "Find favoriteFolder Duplicates",
        "description": "**depth** can be provided to request your **favoriteFolder**",
        "operationId": "findFavoriteFolderDuplicates",
        "parameters": [
          {
            "$ref": "#/components/parameters/depth"
          }
        ],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/FavoriteFolder"
                    }
                  },
                  "ids": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "uuid"
                    }
                  }
                },
                "example": {
                  "ids": [
                    "8ed70936-9813-4938-8c51-5f05eb31c920"
                  ]
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "totalCount": {
                            "type": "number"
                          },
                          "pageInfo": {
                            "type": "object",
                            "properties": {
                              "hasNextPage": {
                                "type": "boolean"
                              },
                              "startCursor": {
                                "type": "string",
                                "format": "uuid"
                              },
                              "endCursor": {
                                "type": "string",
                                "format": "uuid"
                              }
                            }
                          },
                          "favoriteFolderDuplicates": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/FavoriteFolderForResponse"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/favorites": {
      "get": {
        "tags": [
          "favorites"
        ],
        "summary": "Find Many favorites",
        "description": "**order_by**, **filter**, **limit**, **depth**, **starting_after** or **ending_before** can be provided to request your **favorites**",
        "operationId": "findManyFavorites",
        "parameters": [
          {
            "$ref": "#/components/parameters/orderBy"
          },
          {
            "$ref": "#/components/parameters/filter"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/depth"
          },
          {
            "$ref": "#/components/parameters/startingAfter"
          },
          {
            "$ref": "#/components/parameters/endingBefore"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "favorites": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/FavoriteForResponse"
                          }
                        }
                      }
                    },
                    "pageInfo": {
                      "type": "object",
                      "properties": {
                        "hasNextPage": {
                          "type": "boolean"
                        },
                        "startCursor": {
                          "type": "string",
                          "format": "uuid"
                        },
                        "endCursor": {
                          "type": "string",
                          "format": "uuid"
                        }
                      }
                    },
                    "totalCount": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      },
      "post": {
        "tags": [
          "favorites"
        ],
        "summary": "Create One favorite",
        "operationId": "createOneFavorite",
        "parameters": [
          {
            "$ref": "#/components/parameters/depth"
          }
        ],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Favorite"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "createFavorite": {
                          "$ref": "#/components/schemas/FavoriteForResponse"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/batch/favorites": {
      "post": {
        "tags": [
          "favorites"
        ],
        "summary": "Create Many favorites",
        "operationId": "createManyFavorites",
        "parameters": [
          {
            "$ref": "#/components/parameters/depth"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Favorite"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "createFavorites": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/FavoriteForResponse"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/favorites/{id}": {
      "get": {
        "tags": [
          "favorites"
        ],
        "summary": "Find One favorite",
        "description": "**depth** can be provided to request your **favorite**",
        "operationId": "findOneFavorite",
        "parameters": [
          {
            "$ref": "#/components/parameters/idPath"
          },
          {
            "$ref": "#/components/parameters/depth"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "favorite": {
                          "$ref": "#/components/schemas/FavoriteForResponse"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      },
      "delete": {
        "tags": [
          "favorites"
        ],
        "summary": "Delete One favorite",
        "operationId": "deleteOneFavorite",
        "parameters": [
          {
            "$ref": "#/components/parameters/idPath"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "deleteFavorite": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string",
                              "format": "uuid"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      },
      "patch": {
        "tags": [
          "favorites"
        ],
        "summary": "Update One favorite",
        "operationId": "UpdateOneFavorite",
        "parameters": [
          {
            "$ref": "#/components/parameters/idPath"
          },
          {
            "$ref": "#/components/parameters/depth"
          }
        ],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FavoriteForUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "updateFavorite": {
                          "$ref": "#/components/schemas/FavoriteForResponse"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/favorites/duplicates": {
      "post": {
        "tags": [
          "favorites"
        ],
        "summary": "Find favorite Duplicates",
        "description": "**depth** can be provided to request your **favorite**",
        "operationId": "findFavoriteDuplicates",
        "parameters": [
          {
            "$ref": "#/components/parameters/depth"
          }
        ],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/Favorite"
                    }
                  },
                  "ids": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "uuid"
                    }
                  }
                },
                "example": {
                  "ids": [
                    "2a5de15c-16d6-4ee8-adfc-97c3db1137e8"
                  ]
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "totalCount": {
                            "type": "number"
                          },
                          "pageInfo": {
                            "type": "object",
                            "properties": {
                              "hasNextPage": {
                                "type": "boolean"
                              },
                              "startCursor": {
                                "type": "string",
                                "format": "uuid"
                              },
                              "endCursor": {
                                "type": "string",
                                "format": "uuid"
                              }
                            }
                          },
                          "favoriteDuplicates": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/FavoriteForResponse"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/leadsLinkedinScrapings": {
      "get": {
        "tags": [
          "leadsLinkedinScrapings"
        ],
        "summary": "Find Many leadsLinkedinScrapings",
        "description": "**order_by**, **filter**, **limit**, **depth**, **starting_after** or **ending_before** can be provided to request your **leadsLinkedinScrapings**",
        "operationId": "findManyLeadsLinkedinScrapings",
        "parameters": [
          {
            "$ref": "#/components/parameters/orderBy"
          },
          {
            "$ref": "#/components/parameters/filter"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/depth"
          },
          {
            "$ref": "#/components/parameters/startingAfter"
          },
          {
            "$ref": "#/components/parameters/endingBefore"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "leadsLinkedinScrapings": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/LeadsLinkedinScrapingForResponse"
                          }
                        }
                      }
                    },
                    "pageInfo": {
                      "type": "object",
                      "properties": {
                        "hasNextPage": {
                          "type": "boolean"
                        },
                        "startCursor": {
                          "type": "string",
                          "format": "uuid"
                        },
                        "endCursor": {
                          "type": "string",
                          "format": "uuid"
                        }
                      }
                    },
                    "totalCount": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      },
      "post": {
        "tags": [
          "leadsLinkedinScrapings"
        ],
        "summary": "Create One leadsLinkedinScraping",
        "operationId": "createOneLeadsLinkedinScraping",
        "parameters": [
          {
            "$ref": "#/components/parameters/depth"
          }
        ],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LeadsLinkedinScraping"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "createLeadsLinkedinScraping": {
                          "$ref": "#/components/schemas/LeadsLinkedinScrapingForResponse"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/batch/leadsLinkedinScrapings": {
      "post": {
        "tags": [
          "leadsLinkedinScrapings"
        ],
        "summary": "Create Many leadsLinkedinScrapings",
        "operationId": "createManyLeadsLinkedinScrapings",
        "parameters": [
          {
            "$ref": "#/components/parameters/depth"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/LeadsLinkedinScraping"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "createLeadsLinkedinScrapings": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/LeadsLinkedinScrapingForResponse"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/leadsLinkedinScrapings/{id}": {
      "get": {
        "tags": [
          "leadsLinkedinScrapings"
        ],
        "summary": "Find One leadsLinkedinScraping",
        "description": "**depth** can be provided to request your **leadsLinkedinScraping**",
        "operationId": "findOneLeadsLinkedinScraping",
        "parameters": [
          {
            "$ref": "#/components/parameters/idPath"
          },
          {
            "$ref": "#/components/parameters/depth"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "leadsLinkedinScraping": {
                          "$ref": "#/components/schemas/LeadsLinkedinScrapingForResponse"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      },
      "delete": {
        "tags": [
          "leadsLinkedinScrapings"
        ],
        "summary": "Delete One leadsLinkedinScraping",
        "operationId": "deleteOneLeadsLinkedinScraping",
        "parameters": [
          {
            "$ref": "#/components/parameters/idPath"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "deleteLeadsLinkedinScraping": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string",
                              "format": "uuid"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      },
      "patch": {
        "tags": [
          "leadsLinkedinScrapings"
        ],
        "summary": "Update One leadsLinkedinScraping",
        "operationId": "UpdateOneLeadsLinkedinScraping",
        "parameters": [
          {
            "$ref": "#/components/parameters/idPath"
          },
          {
            "$ref": "#/components/parameters/depth"
          }
        ],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LeadsLinkedinScrapingForUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "updateLeadsLinkedinScraping": {
                          "$ref": "#/components/schemas/LeadsLinkedinScrapingForResponse"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/leadsLinkedinScrapings/duplicates": {
      "post": {
        "tags": [
          "leadsLinkedinScrapings"
        ],
        "summary": "Find leadsLinkedinScraping Duplicates",
        "description": "**depth** can be provided to request your **leadsLinkedinScraping**",
        "operationId": "findLeadsLinkedinScrapingDuplicates",
        "parameters": [
          {
            "$ref": "#/components/parameters/depth"
          }
        ],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/LeadsLinkedinScraping"
                    }
                  },
                  "ids": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "uuid"
                    }
                  }
                },
                "example": {
                  "ids": [
                    "92de3c02-ea00-4f6f-b792-8da59dfe3075"
                  ]
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "totalCount": {
                            "type": "number"
                          },
                          "pageInfo": {
                            "type": "object",
                            "properties": {
                              "hasNextPage": {
                                "type": "boolean"
                              },
                              "startCursor": {
                                "type": "string",
                                "format": "uuid"
                              },
                              "endCursor": {
                                "type": "string",
                                "format": "uuid"
                              }
                            }
                          },
                          "leadsLinkedinScrapingDuplicates": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/LeadsLinkedinScrapingForResponse"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/messageChannelMessageAssociations": {
      "get": {
        "tags": [
          "messageChannelMessageAssociations"
        ],
        "summary": "Find Many messageChannelMessageAssociations",
        "description": "**order_by**, **filter**, **limit**, **depth**, **starting_after** or **ending_before** can be provided to request your **messageChannelMessageAssociations**",
        "operationId": "findManyMessageChannelMessageAssociations",
        "parameters": [
          {
            "$ref": "#/components/parameters/orderBy"
          },
          {
            "$ref": "#/components/parameters/filter"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/depth"
          },
          {
            "$ref": "#/components/parameters/startingAfter"
          },
          {
            "$ref": "#/components/parameters/endingBefore"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "messageChannelMessageAssociations": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/MessageChannelMessageAssociationForResponse"
                          }
                        }
                      }
                    },
                    "pageInfo": {
                      "type": "object",
                      "properties": {
                        "hasNextPage": {
                          "type": "boolean"
                        },
                        "startCursor": {
                          "type": "string",
                          "format": "uuid"
                        },
                        "endCursor": {
                          "type": "string",
                          "format": "uuid"
                        }
                      }
                    },
                    "totalCount": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      },
      "post": {
        "tags": [
          "messageChannelMessageAssociations"
        ],
        "summary": "Create One messageChannelMessageAssociation",
        "operationId": "createOneMessageChannelMessageAssociation",
        "parameters": [
          {
            "$ref": "#/components/parameters/depth"
          }
        ],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MessageChannelMessageAssociation"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "createMessageChannelMessageAssociation": {
                          "$ref": "#/components/schemas/MessageChannelMessageAssociationForResponse"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/batch/messageChannelMessageAssociations": {
      "post": {
        "tags": [
          "messageChannelMessageAssociations"
        ],
        "summary": "Create Many messageChannelMessageAssociations",
        "operationId": "createManyMessageChannelMessageAssociations",
        "parameters": [
          {
            "$ref": "#/components/parameters/depth"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/MessageChannelMessageAssociation"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "createMessageChannelMessageAssociations": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/MessageChannelMessageAssociationForResponse"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/messageChannelMessageAssociations/{id}": {
      "get": {
        "tags": [
          "messageChannelMessageAssociations"
        ],
        "summary": "Find One messageChannelMessageAssociation",
        "description": "**depth** can be provided to request your **messageChannelMessageAssociation**",
        "operationId": "findOneMessageChannelMessageAssociation",
        "parameters": [
          {
            "$ref": "#/components/parameters/idPath"
          },
          {
            "$ref": "#/components/parameters/depth"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "messageChannelMessageAssociation": {
                          "$ref": "#/components/schemas/MessageChannelMessageAssociationForResponse"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      },
      "delete": {
        "tags": [
          "messageChannelMessageAssociations"
        ],
        "summary": "Delete One messageChannelMessageAssociation",
        "operationId": "deleteOneMessageChannelMessageAssociation",
        "parameters": [
          {
            "$ref": "#/components/parameters/idPath"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "deleteMessageChannelMessageAssociation": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string",
                              "format": "uuid"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      },
      "patch": {
        "tags": [
          "messageChannelMessageAssociations"
        ],
        "summary": "Update One messageChannelMessageAssociation",
        "operationId": "UpdateOneMessageChannelMessageAssociation",
        "parameters": [
          {
            "$ref": "#/components/parameters/idPath"
          },
          {
            "$ref": "#/components/parameters/depth"
          }
        ],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MessageChannelMessageAssociationForUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "updateMessageChannelMessageAssociation": {
                          "$ref": "#/components/schemas/MessageChannelMessageAssociationForResponse"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/messageChannelMessageAssociations/duplicates": {
      "post": {
        "tags": [
          "messageChannelMessageAssociations"
        ],
        "summary": "Find messageChannelMessageAssociation Duplicates",
        "description": "**depth** can be provided to request your **messageChannelMessageAssociation**",
        "operationId": "findMessageChannelMessageAssociationDuplicates",
        "parameters": [
          {
            "$ref": "#/components/parameters/depth"
          }
        ],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/MessageChannelMessageAssociation"
                    }
                  },
                  "ids": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "uuid"
                    }
                  }
                },
                "example": {
                  "ids": [
                    "0606f5b9-f9b7-421d-a940-478b541c700a"
                  ]
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "totalCount": {
                            "type": "number"
                          },
                          "pageInfo": {
                            "type": "object",
                            "properties": {
                              "hasNextPage": {
                                "type": "boolean"
                              },
                              "startCursor": {
                                "type": "string",
                                "format": "uuid"
                              },
                              "endCursor": {
                                "type": "string",
                                "format": "uuid"
                              }
                            }
                          },
                          "messageChannelMessageAssociationDuplicates": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/MessageChannelMessageAssociationForResponse"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/messageChannels": {
      "get": {
        "tags": [
          "messageChannels"
        ],
        "summary": "Find Many messageChannels",
        "description": "**order_by**, **filter**, **limit**, **depth**, **starting_after** or **ending_before** can be provided to request your **messageChannels**",
        "operationId": "findManyMessageChannels",
        "parameters": [
          {
            "$ref": "#/components/parameters/orderBy"
          },
          {
            "$ref": "#/components/parameters/filter"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/depth"
          },
          {
            "$ref": "#/components/parameters/startingAfter"
          },
          {
            "$ref": "#/components/parameters/endingBefore"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "messageChannels": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/MessageChannelForResponse"
                          }
                        }
                      }
                    },
                    "pageInfo": {
                      "type": "object",
                      "properties": {
                        "hasNextPage": {
                          "type": "boolean"
                        },
                        "startCursor": {
                          "type": "string",
                          "format": "uuid"
                        },
                        "endCursor": {
                          "type": "string",
                          "format": "uuid"
                        }
                      }
                    },
                    "totalCount": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      },
      "post": {
        "tags": [
          "messageChannels"
        ],
        "summary": "Create One messageChannel",
        "operationId": "createOneMessageChannel",
        "parameters": [
          {
            "$ref": "#/components/parameters/depth"
          }
        ],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MessageChannel"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "createMessageChannel": {
                          "$ref": "#/components/schemas/MessageChannelForResponse"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/batch/messageChannels": {
      "post": {
        "tags": [
          "messageChannels"
        ],
        "summary": "Create Many messageChannels",
        "operationId": "createManyMessageChannels",
        "parameters": [
          {
            "$ref": "#/components/parameters/depth"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/MessageChannel"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "createMessageChannels": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/MessageChannelForResponse"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/messageChannels/{id}": {
      "get": {
        "tags": [
          "messageChannels"
        ],
        "summary": "Find One messageChannel",
        "description": "**depth** can be provided to request your **messageChannel**",
        "operationId": "findOneMessageChannel",
        "parameters": [
          {
            "$ref": "#/components/parameters/idPath"
          },
          {
            "$ref": "#/components/parameters/depth"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "messageChannel": {
                          "$ref": "#/components/schemas/MessageChannelForResponse"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      },
      "delete": {
        "tags": [
          "messageChannels"
        ],
        "summary": "Delete One messageChannel",
        "operationId": "deleteOneMessageChannel",
        "parameters": [
          {
            "$ref": "#/components/parameters/idPath"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "deleteMessageChannel": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string",
                              "format": "uuid"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      },
      "patch": {
        "tags": [
          "messageChannels"
        ],
        "summary": "Update One messageChannel",
        "operationId": "UpdateOneMessageChannel",
        "parameters": [
          {
            "$ref": "#/components/parameters/idPath"
          },
          {
            "$ref": "#/components/parameters/depth"
          }
        ],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MessageChannelForUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "updateMessageChannel": {
                          "$ref": "#/components/schemas/MessageChannelForResponse"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/messageChannels/duplicates": {
      "post": {
        "tags": [
          "messageChannels"
        ],
        "summary": "Find messageChannel Duplicates",
        "description": "**depth** can be provided to request your **messageChannel**",
        "operationId": "findMessageChannelDuplicates",
        "parameters": [
          {
            "$ref": "#/components/parameters/depth"
          }
        ],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/MessageChannel"
                    }
                  },
                  "ids": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "uuid"
                    }
                  }
                },
                "example": {
                  "ids": [
                    "29d590e6-62b9-438a-858a-9c41c7cf13cc"
                  ]
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "totalCount": {
                            "type": "number"
                          },
                          "pageInfo": {
                            "type": "object",
                            "properties": {
                              "hasNextPage": {
                                "type": "boolean"
                              },
                              "startCursor": {
                                "type": "string",
                                "format": "uuid"
                              },
                              "endCursor": {
                                "type": "string",
                                "format": "uuid"
                              }
                            }
                          },
                          "messageChannelDuplicates": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/MessageChannelForResponse"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/messageFolders": {
      "get": {
        "tags": [
          "messageFolders"
        ],
        "summary": "Find Many messageFolders",
        "description": "**order_by**, **filter**, **limit**, **depth**, **starting_after** or **ending_before** can be provided to request your **messageFolders**",
        "operationId": "findManyMessageFolders",
        "parameters": [
          {
            "$ref": "#/components/parameters/orderBy"
          },
          {
            "$ref": "#/components/parameters/filter"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/depth"
          },
          {
            "$ref": "#/components/parameters/startingAfter"
          },
          {
            "$ref": "#/components/parameters/endingBefore"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "messageFolders": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/MessageFolderForResponse"
                          }
                        }
                      }
                    },
                    "pageInfo": {
                      "type": "object",
                      "properties": {
                        "hasNextPage": {
                          "type": "boolean"
                        },
                        "startCursor": {
                          "type": "string",
                          "format": "uuid"
                        },
                        "endCursor": {
                          "type": "string",
                          "format": "uuid"
                        }
                      }
                    },
                    "totalCount": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      },
      "post": {
        "tags": [
          "messageFolders"
        ],
        "summary": "Create One messageFolder",
        "operationId": "createOneMessageFolder",
        "parameters": [
          {
            "$ref": "#/components/parameters/depth"
          }
        ],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MessageFolder"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "createMessageFolder": {
                          "$ref": "#/components/schemas/MessageFolderForResponse"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/batch/messageFolders": {
      "post": {
        "tags": [
          "messageFolders"
        ],
        "summary": "Create Many messageFolders",
        "operationId": "createManyMessageFolders",
        "parameters": [
          {
            "$ref": "#/components/parameters/depth"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/MessageFolder"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "createMessageFolders": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/MessageFolderForResponse"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/messageFolders/{id}": {
      "get": {
        "tags": [
          "messageFolders"
        ],
        "summary": "Find One messageFolder",
        "description": "**depth** can be provided to request your **messageFolder**",
        "operationId": "findOneMessageFolder",
        "parameters": [
          {
            "$ref": "#/components/parameters/idPath"
          },
          {
            "$ref": "#/components/parameters/depth"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "messageFolder": {
                          "$ref": "#/components/schemas/MessageFolderForResponse"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      },
      "delete": {
        "tags": [
          "messageFolders"
        ],
        "summary": "Delete One messageFolder",
        "operationId": "deleteOneMessageFolder",
        "parameters": [
          {
            "$ref": "#/components/parameters/idPath"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "deleteMessageFolder": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string",
                              "format": "uuid"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      },
      "patch": {
        "tags": [
          "messageFolders"
        ],
        "summary": "Update One messageFolder",
        "operationId": "UpdateOneMessageFolder",
        "parameters": [
          {
            "$ref": "#/components/parameters/idPath"
          },
          {
            "$ref": "#/components/parameters/depth"
          }
        ],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MessageFolderForUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "updateMessageFolder": {
                          "$ref": "#/components/schemas/MessageFolderForResponse"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/messageFolders/duplicates": {
      "post": {
        "tags": [
          "messageFolders"
        ],
        "summary": "Find messageFolder Duplicates",
        "description": "**depth** can be provided to request your **messageFolder**",
        "operationId": "findMessageFolderDuplicates",
        "parameters": [
          {
            "$ref": "#/components/parameters/depth"
          }
        ],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/MessageFolder"
                    }
                  },
                  "ids": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "uuid"
                    }
                  }
                },
                "example": {
                  "ids": [
                    "9178f87b-e4b2-4b8b-89cf-e4e1b101fb6d"
                  ]
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "totalCount": {
                            "type": "number"
                          },
                          "pageInfo": {
                            "type": "object",
                            "properties": {
                              "hasNextPage": {
                                "type": "boolean"
                              },
                              "startCursor": {
                                "type": "string",
                                "format": "uuid"
                              },
                              "endCursor": {
                                "type": "string",
                                "format": "uuid"
                              }
                            }
                          },
                          "messageFolderDuplicates": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/MessageFolderForResponse"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/messageParticipants": {
      "get": {
        "tags": [
          "messageParticipants"
        ],
        "summary": "Find Many messageParticipants",
        "description": "**order_by**, **filter**, **limit**, **depth**, **starting_after** or **ending_before** can be provided to request your **messageParticipants**",
        "operationId": "findManyMessageParticipants",
        "parameters": [
          {
            "$ref": "#/components/parameters/orderBy"
          },
          {
            "$ref": "#/components/parameters/filter"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/depth"
          },
          {
            "$ref": "#/components/parameters/startingAfter"
          },
          {
            "$ref": "#/components/parameters/endingBefore"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "messageParticipants": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/MessageParticipantForResponse"
                          }
                        }
                      }
                    },
                    "pageInfo": {
                      "type": "object",
                      "properties": {
                        "hasNextPage": {
                          "type": "boolean"
                        },
                        "startCursor": {
                          "type": "string",
                          "format": "uuid"
                        },
                        "endCursor": {
                          "type": "string",
                          "format": "uuid"
                        }
                      }
                    },
                    "totalCount": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      },
      "post": {
        "tags": [
          "messageParticipants"
        ],
        "summary": "Create One messageParticipant",
        "operationId": "createOneMessageParticipant",
        "parameters": [
          {
            "$ref": "#/components/parameters/depth"
          }
        ],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MessageParticipant"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "createMessageParticipant": {
                          "$ref": "#/components/schemas/MessageParticipantForResponse"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/batch/messageParticipants": {
      "post": {
        "tags": [
          "messageParticipants"
        ],
        "summary": "Create Many messageParticipants",
        "operationId": "createManyMessageParticipants",
        "parameters": [
          {
            "$ref": "#/components/parameters/depth"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/MessageParticipant"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "createMessageParticipants": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/MessageParticipantForResponse"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/messageParticipants/{id}": {
      "get": {
        "tags": [
          "messageParticipants"
        ],
        "summary": "Find One messageParticipant",
        "description": "**depth** can be provided to request your **messageParticipant**",
        "operationId": "findOneMessageParticipant",
        "parameters": [
          {
            "$ref": "#/components/parameters/idPath"
          },
          {
            "$ref": "#/components/parameters/depth"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "messageParticipant": {
                          "$ref": "#/components/schemas/MessageParticipantForResponse"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      },
      "delete": {
        "tags": [
          "messageParticipants"
        ],
        "summary": "Delete One messageParticipant",
        "operationId": "deleteOneMessageParticipant",
        "parameters": [
          {
            "$ref": "#/components/parameters/idPath"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "deleteMessageParticipant": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string",
                              "format": "uuid"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      },
      "patch": {
        "tags": [
          "messageParticipants"
        ],
        "summary": "Update One messageParticipant",
        "operationId": "UpdateOneMessageParticipant",
        "parameters": [
          {
            "$ref": "#/components/parameters/idPath"
          },
          {
            "$ref": "#/components/parameters/depth"
          }
        ],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MessageParticipantForUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "updateMessageParticipant": {
                          "$ref": "#/components/schemas/MessageParticipantForResponse"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/messageParticipants/duplicates": {
      "post": {
        "tags": [
          "messageParticipants"
        ],
        "summary": "Find messageParticipant Duplicates",
        "description": "**depth** can be provided to request your **messageParticipant**",
        "operationId": "findMessageParticipantDuplicates",
        "parameters": [
          {
            "$ref": "#/components/parameters/depth"
          }
        ],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/MessageParticipant"
                    }
                  },
                  "ids": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "uuid"
                    }
                  }
                },
                "example": {
                  "ids": [
                    "18768939-6a6a-4b5a-bca2-b4d947950be2"
                  ]
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "totalCount": {
                            "type": "number"
                          },
                          "pageInfo": {
                            "type": "object",
                            "properties": {
                              "hasNextPage": {
                                "type": "boolean"
                              },
                              "startCursor": {
                                "type": "string",
                                "format": "uuid"
                              },
                              "endCursor": {
                                "type": "string",
                                "format": "uuid"
                              }
                            }
                          },
                          "messageParticipantDuplicates": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/MessageParticipantForResponse"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/messages": {
      "get": {
        "tags": [
          "messages"
        ],
        "summary": "Find Many messages",
        "description": "**order_by**, **filter**, **limit**, **depth**, **starting_after** or **ending_before** can be provided to request your **messages**",
        "operationId": "findManyMessages",
        "parameters": [
          {
            "$ref": "#/components/parameters/orderBy"
          },
          {
            "$ref": "#/components/parameters/filter"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/depth"
          },
          {
            "$ref": "#/components/parameters/startingAfter"
          },
          {
            "$ref": "#/components/parameters/endingBefore"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "messages": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/MessageForResponse"
                          }
                        }
                      }
                    },
                    "pageInfo": {
                      "type": "object",
                      "properties": {
                        "hasNextPage": {
                          "type": "boolean"
                        },
                        "startCursor": {
                          "type": "string",
                          "format": "uuid"
                        },
                        "endCursor": {
                          "type": "string",
                          "format": "uuid"
                        }
                      }
                    },
                    "totalCount": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      },
      "post": {
        "tags": [
          "messages"
        ],
        "summary": "Create One message",
        "operationId": "createOneMessage",
        "parameters": [
          {
            "$ref": "#/components/parameters/depth"
          }
        ],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Message"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "createMessage": {
                          "$ref": "#/components/schemas/MessageForResponse"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/batch/messages": {
      "post": {
        "tags": [
          "messages"
        ],
        "summary": "Create Many messages",
        "operationId": "createManyMessages",
        "parameters": [
          {
            "$ref": "#/components/parameters/depth"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "createMessages": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/MessageForResponse"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/messages/{id}": {
      "get": {
        "tags": [
          "messages"
        ],
        "summary": "Find One message",
        "description": "**depth** can be provided to request your **message**",
        "operationId": "findOneMessage",
        "parameters": [
          {
            "$ref": "#/components/parameters/idPath"
          },
          {
            "$ref": "#/components/parameters/depth"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "message": {
                          "$ref": "#/components/schemas/MessageForResponse"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      },
      "delete": {
        "tags": [
          "messages"
        ],
        "summary": "Delete One message",
        "operationId": "deleteOneMessage",
        "parameters": [
          {
            "$ref": "#/components/parameters/idPath"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "deleteMessage": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string",
                              "format": "uuid"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      },
      "patch": {
        "tags": [
          "messages"
        ],
        "summary": "Update One message",
        "operationId": "UpdateOneMessage",
        "parameters": [
          {
            "$ref": "#/components/parameters/idPath"
          },
          {
            "$ref": "#/components/parameters/depth"
          }
        ],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MessageForUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "updateMessage": {
                          "$ref": "#/components/schemas/MessageForResponse"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/messages/duplicates": {
      "post": {
        "tags": [
          "messages"
        ],
        "summary": "Find message Duplicates",
        "description": "**depth** can be provided to request your **message**",
        "operationId": "findMessageDuplicates",
        "parameters": [
          {
            "$ref": "#/components/parameters/depth"
          }
        ],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/Message"
                    }
                  },
                  "ids": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "uuid"
                    }
                  }
                },
                "example": {
                  "ids": [
                    "27bbd58c-d76c-4f91-a823-f464cdca1a6d"
                  ]
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "totalCount": {
                            "type": "number"
                          },
                          "pageInfo": {
                            "type": "object",
                            "properties": {
                              "hasNextPage": {
                                "type": "boolean"
                              },
                              "startCursor": {
                                "type": "string",
                                "format": "uuid"
                              },
                              "endCursor": {
                                "type": "string",
                                "format": "uuid"
                              }
                            }
                          },
                          "messageDuplicates": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/MessageForResponse"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/messageThreads": {
      "get": {
        "tags": [
          "messageThreads"
        ],
        "summary": "Find Many messageThreads",
        "description": "**order_by**, **filter**, **limit**, **depth**, **starting_after** or **ending_before** can be provided to request your **messageThreads**",
        "operationId": "findManyMessageThreads",
        "parameters": [
          {
            "$ref": "#/components/parameters/orderBy"
          },
          {
            "$ref": "#/components/parameters/filter"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/depth"
          },
          {
            "$ref": "#/components/parameters/startingAfter"
          },
          {
            "$ref": "#/components/parameters/endingBefore"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "messageThreads": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/MessageThreadForResponse"
                          }
                        }
                      }
                    },
                    "pageInfo": {
                      "type": "object",
                      "properties": {
                        "hasNextPage": {
                          "type": "boolean"
                        },
                        "startCursor": {
                          "type": "string",
                          "format": "uuid"
                        },
                        "endCursor": {
                          "type": "string",
                          "format": "uuid"
                        }
                      }
                    },
                    "totalCount": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      },
      "post": {
        "tags": [
          "messageThreads"
        ],
        "summary": "Create One messageThread",
        "operationId": "createOneMessageThread",
        "parameters": [
          {
            "$ref": "#/components/parameters/depth"
          }
        ],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MessageThread"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "createMessageThread": {
                          "$ref": "#/components/schemas/MessageThreadForResponse"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/batch/messageThreads": {
      "post": {
        "tags": [
          "messageThreads"
        ],
        "summary": "Create Many messageThreads",
        "operationId": "createManyMessageThreads",
        "parameters": [
          {
            "$ref": "#/components/parameters/depth"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/MessageThread"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "createMessageThreads": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/MessageThreadForResponse"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/messageThreads/{id}": {
      "get": {
        "tags": [
          "messageThreads"
        ],
        "summary": "Find One messageThread",
        "description": "**depth** can be provided to request your **messageThread**",
        "operationId": "findOneMessageThread",
        "parameters": [
          {
            "$ref": "#/components/parameters/idPath"
          },
          {
            "$ref": "#/components/parameters/depth"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "messageThread": {
                          "$ref": "#/components/schemas/MessageThreadForResponse"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      },
      "delete": {
        "tags": [
          "messageThreads"
        ],
        "summary": "Delete One messageThread",
        "operationId": "deleteOneMessageThread",
        "parameters": [
          {
            "$ref": "#/components/parameters/idPath"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "deleteMessageThread": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string",
                              "format": "uuid"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      },
      "patch": {
        "tags": [
          "messageThreads"
        ],
        "summary": "Update One messageThread",
        "operationId": "UpdateOneMessageThread",
        "parameters": [
          {
            "$ref": "#/components/parameters/idPath"
          },
          {
            "$ref": "#/components/parameters/depth"
          }
        ],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MessageThreadForUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "updateMessageThread": {
                          "$ref": "#/components/schemas/MessageThreadForResponse"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/messageThreads/duplicates": {
      "post": {
        "tags": [
          "messageThreads"
        ],
        "summary": "Find messageThread Duplicates",
        "description": "**depth** can be provided to request your **messageThread**",
        "operationId": "findMessageThreadDuplicates",
        "parameters": [
          {
            "$ref": "#/components/parameters/depth"
          }
        ],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/MessageThread"
                    }
                  },
                  "ids": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "uuid"
                    }
                  }
                },
                "example": {
                  "ids": [
                    "0c2cbd4f-81d1-494d-aaad-3d2ebd25515e"
                  ]
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "totalCount": {
                            "type": "number"
                          },
                          "pageInfo": {
                            "type": "object",
                            "properties": {
                              "hasNextPage": {
                                "type": "boolean"
                              },
                              "startCursor": {
                                "type": "string",
                                "format": "uuid"
                              },
                              "endCursor": {
                                "type": "string",
                                "format": "uuid"
                              }
                            }
                          },
                          "messageThreadDuplicates": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/MessageThreadForResponse"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/notes": {
      "get": {
        "tags": [
          "notes"
        ],
        "summary": "Find Many notes",
        "description": "**order_by**, **filter**, **limit**, **depth**, **starting_after** or **ending_before** can be provided to request your **notes**",
        "operationId": "findManyNotes",
        "parameters": [
          {
            "$ref": "#/components/parameters/orderBy"
          },
          {
            "$ref": "#/components/parameters/filter"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/depth"
          },
          {
            "$ref": "#/components/parameters/startingAfter"
          },
          {
            "$ref": "#/components/parameters/endingBefore"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "notes": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/NoteForResponse"
                          }
                        }
                      }
                    },
                    "pageInfo": {
                      "type": "object",
                      "properties": {
                        "hasNextPage": {
                          "type": "boolean"
                        },
                        "startCursor": {
                          "type": "string",
                          "format": "uuid"
                        },
                        "endCursor": {
                          "type": "string",
                          "format": "uuid"
                        }
                      }
                    },
                    "totalCount": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      },
      "post": {
        "tags": [
          "notes"
        ],
        "summary": "Create One note",
        "operationId": "createOneNote",
        "parameters": [
          {
            "$ref": "#/components/parameters/depth"
          }
        ],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Note"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "createNote": {
                          "$ref": "#/components/schemas/NoteForResponse"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/batch/notes": {
      "post": {
        "tags": [
          "notes"
        ],
        "summary": "Create Many notes",
        "operationId": "createManyNotes",
        "parameters": [
          {
            "$ref": "#/components/parameters/depth"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Note"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "createNotes": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/NoteForResponse"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/notes/{id}": {
      "get": {
        "tags": [
          "notes"
        ],
        "summary": "Find One note",
        "description": "**depth** can be provided to request your **note**",
        "operationId": "findOneNote",
        "parameters": [
          {
            "$ref": "#/components/parameters/idPath"
          },
          {
            "$ref": "#/components/parameters/depth"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "note": {
                          "$ref": "#/components/schemas/NoteForResponse"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      },
      "delete": {
        "tags": [
          "notes"
        ],
        "summary": "Delete One note",
        "operationId": "deleteOneNote",
        "parameters": [
          {
            "$ref": "#/components/parameters/idPath"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "deleteNote": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string",
                              "format": "uuid"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      },
      "patch": {
        "tags": [
          "notes"
        ],
        "summary": "Update One note",
        "operationId": "UpdateOneNote",
        "parameters": [
          {
            "$ref": "#/components/parameters/idPath"
          },
          {
            "$ref": "#/components/parameters/depth"
          }
        ],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NoteForUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "updateNote": {
                          "$ref": "#/components/schemas/NoteForResponse"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/notes/duplicates": {
      "post": {
        "tags": [
          "notes"
        ],
        "summary": "Find note Duplicates",
        "description": "**depth** can be provided to request your **note**",
        "operationId": "findNoteDuplicates",
        "parameters": [
          {
            "$ref": "#/components/parameters/depth"
          }
        ],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/Note"
                    }
                  },
                  "ids": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "uuid"
                    }
                  }
                },
                "example": {
                  "ids": [
                    "215c5a6a-4f52-4160-a1e3-81cf10f04847"
                  ]
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "totalCount": {
                            "type": "number"
                          },
                          "pageInfo": {
                            "type": "object",
                            "properties": {
                              "hasNextPage": {
                                "type": "boolean"
                              },
                              "startCursor": {
                                "type": "string",
                                "format": "uuid"
                              },
                              "endCursor": {
                                "type": "string",
                                "format": "uuid"
                              }
                            }
                          },
                          "noteDuplicates": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/NoteForResponse"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/noteTargets": {
      "get": {
        "tags": [
          "noteTargets"
        ],
        "summary": "Find Many noteTargets",
        "description": "**order_by**, **filter**, **limit**, **depth**, **starting_after** or **ending_before** can be provided to request your **noteTargets**",
        "operationId": "findManyNoteTargets",
        "parameters": [
          {
            "$ref": "#/components/parameters/orderBy"
          },
          {
            "$ref": "#/components/parameters/filter"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/depth"
          },
          {
            "$ref": "#/components/parameters/startingAfter"
          },
          {
            "$ref": "#/components/parameters/endingBefore"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "noteTargets": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/NoteTargetForResponse"
                          }
                        }
                      }
                    },
                    "pageInfo": {
                      "type": "object",
                      "properties": {
                        "hasNextPage": {
                          "type": "boolean"
                        },
                        "startCursor": {
                          "type": "string",
                          "format": "uuid"
                        },
                        "endCursor": {
                          "type": "string",
                          "format": "uuid"
                        }
                      }
                    },
                    "totalCount": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      },
      "post": {
        "tags": [
          "noteTargets"
        ],
        "summary": "Create One noteTarget",
        "operationId": "createOneNoteTarget",
        "parameters": [
          {
            "$ref": "#/components/parameters/depth"
          }
        ],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NoteTarget"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "createNoteTarget": {
                          "$ref": "#/components/schemas/NoteTargetForResponse"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/batch/noteTargets": {
      "post": {
        "tags": [
          "noteTargets"
        ],
        "summary": "Create Many noteTargets",
        "operationId": "createManyNoteTargets",
        "parameters": [
          {
            "$ref": "#/components/parameters/depth"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/NoteTarget"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "createNoteTargets": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/NoteTargetForResponse"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/noteTargets/{id}": {
      "get": {
        "tags": [
          "noteTargets"
        ],
        "summary": "Find One noteTarget",
        "description": "**depth** can be provided to request your **noteTarget**",
        "operationId": "findOneNoteTarget",
        "parameters": [
          {
            "$ref": "#/components/parameters/idPath"
          },
          {
            "$ref": "#/components/parameters/depth"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "noteTarget": {
                          "$ref": "#/components/schemas/NoteTargetForResponse"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      },
      "delete": {
        "tags": [
          "noteTargets"
        ],
        "summary": "Delete One noteTarget",
        "operationId": "deleteOneNoteTarget",
        "parameters": [
          {
            "$ref": "#/components/parameters/idPath"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "deleteNoteTarget": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string",
                              "format": "uuid"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      },
      "patch": {
        "tags": [
          "noteTargets"
        ],
        "summary": "Update One noteTarget",
        "operationId": "UpdateOneNoteTarget",
        "parameters": [
          {
            "$ref": "#/components/parameters/idPath"
          },
          {
            "$ref": "#/components/parameters/depth"
          }
        ],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NoteTargetForUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "updateNoteTarget": {
                          "$ref": "#/components/schemas/NoteTargetForResponse"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/noteTargets/duplicates": {
      "post": {
        "tags": [
          "noteTargets"
        ],
        "summary": "Find noteTarget Duplicates",
        "description": "**depth** can be provided to request your **noteTarget**",
        "operationId": "findNoteTargetDuplicates",
        "parameters": [
          {
            "$ref": "#/components/parameters/depth"
          }
        ],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/NoteTarget"
                    }
                  },
                  "ids": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "uuid"
                    }
                  }
                },
                "example": {
                  "ids": [
                    "9bbd7542-aa25-4953-ac42-607b751cdc1d"
                  ]
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "totalCount": {
                            "type": "number"
                          },
                          "pageInfo": {
                            "type": "object",
                            "properties": {
                              "hasNextPage": {
                                "type": "boolean"
                              },
                              "startCursor": {
                                "type": "string",
                                "format": "uuid"
                              },
                              "endCursor": {
                                "type": "string",
                                "format": "uuid"
                              }
                            }
                          },
                          "noteTargetDuplicates": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/NoteTargetForResponse"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/opportunities": {
      "get": {
        "tags": [
          "opportunities"
        ],
        "summary": "Find Many opportunities",
        "description": "**order_by**, **filter**, **limit**, **depth**, **starting_after** or **ending_before** can be provided to request your **opportunities**",
        "operationId": "findManyOpportunities",
        "parameters": [
          {
            "$ref": "#/components/parameters/orderBy"
          },
          {
            "$ref": "#/components/parameters/filter"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/depth"
          },
          {
            "$ref": "#/components/parameters/startingAfter"
          },
          {
            "$ref": "#/components/parameters/endingBefore"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "opportunities": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/OpportunityForResponse"
                          }
                        }
                      }
                    },
                    "pageInfo": {
                      "type": "object",
                      "properties": {
                        "hasNextPage": {
                          "type": "boolean"
                        },
                        "startCursor": {
                          "type": "string",
                          "format": "uuid"
                        },
                        "endCursor": {
                          "type": "string",
                          "format": "uuid"
                        }
                      }
                    },
                    "totalCount": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      },
      "post": {
        "tags": [
          "opportunities"
        ],
        "summary": "Create One opportunity",
        "operationId": "createOneOpportunity",
        "parameters": [
          {
            "$ref": "#/components/parameters/depth"
          }
        ],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Opportunity"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "createOpportunity": {
                          "$ref": "#/components/schemas/OpportunityForResponse"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/batch/opportunities": {
      "post": {
        "tags": [
          "opportunities"
        ],
        "summary": "Create Many opportunities",
        "operationId": "createManyOpportunities",
        "parameters": [
          {
            "$ref": "#/components/parameters/depth"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Opportunity"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "createOpportunities": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/OpportunityForResponse"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/opportunities/{id}": {
      "get": {
        "tags": [
          "opportunities"
        ],
        "summary": "Find One opportunity",
        "description": "**depth** can be provided to request your **opportunity**",
        "operationId": "findOneOpportunity",
        "parameters": [
          {
            "$ref": "#/components/parameters/idPath"
          },
          {
            "$ref": "#/components/parameters/depth"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "opportunity": {
                          "$ref": "#/components/schemas/OpportunityForResponse"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      },
      "delete": {
        "tags": [
          "opportunities"
        ],
        "summary": "Delete One opportunity",
        "operationId": "deleteOneOpportunity",
        "parameters": [
          {
            "$ref": "#/components/parameters/idPath"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "deleteOpportunity": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string",
                              "format": "uuid"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      },
      "patch": {
        "tags": [
          "opportunities"
        ],
        "summary": "Update One opportunity",
        "operationId": "UpdateOneOpportunity",
        "parameters": [
          {
            "$ref": "#/components/parameters/idPath"
          },
          {
            "$ref": "#/components/parameters/depth"
          }
        ],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OpportunityForUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "updateOpportunity": {
                          "$ref": "#/components/schemas/OpportunityForResponse"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/opportunities/duplicates": {
      "post": {
        "tags": [
          "opportunities"
        ],
        "summary": "Find opportunity Duplicates",
        "description": "**depth** can be provided to request your **opportunity**",
        "operationId": "findOpportunityDuplicates",
        "parameters": [
          {
            "$ref": "#/components/parameters/depth"
          }
        ],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/Opportunity"
                    }
                  },
                  "ids": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "uuid"
                    }
                  }
                },
                "example": {
                  "ids": [
                    "37750117-e2e6-49a5-813c-8d080e278e5f"
                  ]
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "totalCount": {
                            "type": "number"
                          },
                          "pageInfo": {
                            "type": "object",
                            "properties": {
                              "hasNextPage": {
                                "type": "boolean"
                              },
                              "startCursor": {
                                "type": "string",
                                "format": "uuid"
                              },
                              "endCursor": {
                                "type": "string",
                                "format": "uuid"
                              }
                            }
                          },
                          "opportunityDuplicates": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/OpportunityForResponse"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/people": {
      "get": {
        "tags": [
          "people"
        ],
        "summary": "Find Many people",
        "description": "**order_by**, **filter**, **limit**, **depth**, **starting_after** or **ending_before** can be provided to request your **people**",
        "operationId": "findManyPeople",
        "parameters": [
          {
            "$ref": "#/components/parameters/orderBy"
          },
          {
            "$ref": "#/components/parameters/filter"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/depth"
          },
          {
            "$ref": "#/components/parameters/startingAfter"
          },
          {
            "$ref": "#/components/parameters/endingBefore"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "people": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/PersonForResponse"
                          }
                        }
                      }
                    },
                    "pageInfo": {
                      "type": "object",
                      "properties": {
                        "hasNextPage": {
                          "type": "boolean"
                        },
                        "startCursor": {
                          "type": "string",
                          "format": "uuid"
                        },
                        "endCursor": {
                          "type": "string",
                          "format": "uuid"
                        }
                      }
                    },
                    "totalCount": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      },
      "post": {
        "tags": [
          "people"
        ],
        "summary": "Create One person",
        "operationId": "createOnePerson",
        "parameters": [
          {
            "$ref": "#/components/parameters/depth"
          }
        ],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Person"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "createPerson": {
                          "$ref": "#/components/schemas/PersonForResponse"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/batch/people": {
      "post": {
        "tags": [
          "people"
        ],
        "summary": "Create Many people",
        "operationId": "createManyPeople",
        "parameters": [
          {
            "$ref": "#/components/parameters/depth"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Person"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "createPeople": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/PersonForResponse"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/people/{id}": {
      "get": {
        "tags": [
          "people"
        ],
        "summary": "Find One person",
        "description": "**depth** can be provided to request your **person**",
        "operationId": "findOnePerson",
        "parameters": [
          {
            "$ref": "#/components/parameters/idPath"
          },
          {
            "$ref": "#/components/parameters/depth"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "person": {
                          "$ref": "#/components/schemas/PersonForResponse"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      },
      "delete": {
        "tags": [
          "people"
        ],
        "summary": "Delete One person",
        "operationId": "deleteOnePerson",
        "parameters": [
          {
            "$ref": "#/components/parameters/idPath"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "deletePerson": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string",
                              "format": "uuid"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      },
      "patch": {
        "tags": [
          "people"
        ],
        "summary": "Update One person",
        "operationId": "UpdateOnePerson",
        "parameters": [
          {
            "$ref": "#/components/parameters/idPath"
          },
          {
            "$ref": "#/components/parameters/depth"
          }
        ],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PersonForUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "updatePerson": {
                          "$ref": "#/components/schemas/PersonForResponse"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/people/duplicates": {
      "post": {
        "tags": [
          "people"
        ],
        "summary": "Find person Duplicates",
        "description": "**depth** can be provided to request your **person**",
        "operationId": "findPersonDuplicates",
        "parameters": [
          {
            "$ref": "#/components/parameters/depth"
          }
        ],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/Person"
                    }
                  },
                  "ids": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "uuid"
                    }
                  }
                },
                "example": {
                  "ids": [
                    "a56c5a4c-f4af-4109-b440-1e010c2f8db7"
                  ]
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "totalCount": {
                            "type": "number"
                          },
                          "pageInfo": {
                            "type": "object",
                            "properties": {
                              "hasNextPage": {
                                "type": "boolean"
                              },
                              "startCursor": {
                                "type": "string",
                                "format": "uuid"
                              },
                              "endCursor": {
                                "type": "string",
                                "format": "uuid"
                              }
                            }
                          },
                          "personDuplicates": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/PersonForResponse"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/tasks": {
      "get": {
        "tags": [
          "tasks"
        ],
        "summary": "Find Many tasks",
        "description": "**order_by**, **filter**, **limit**, **depth**, **starting_after** or **ending_before** can be provided to request your **tasks**",
        "operationId": "findManyTasks",
        "parameters": [
          {
            "$ref": "#/components/parameters/orderBy"
          },
          {
            "$ref": "#/components/parameters/filter"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/depth"
          },
          {
            "$ref": "#/components/parameters/startingAfter"
          },
          {
            "$ref": "#/components/parameters/endingBefore"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "tasks": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/TaskForResponse"
                          }
                        }
                      }
                    },
                    "pageInfo": {
                      "type": "object",
                      "properties": {
                        "hasNextPage": {
                          "type": "boolean"
                        },
                        "startCursor": {
                          "type": "string",
                          "format": "uuid"
                        },
                        "endCursor": {
                          "type": "string",
                          "format": "uuid"
                        }
                      }
                    },
                    "totalCount": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      },
      "post": {
        "tags": [
          "tasks"
        ],
        "summary": "Create One task",
        "operationId": "createOneTask",
        "parameters": [
          {
            "$ref": "#/components/parameters/depth"
          }
        ],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Task"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "createTask": {
                          "$ref": "#/components/schemas/TaskForResponse"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/batch/tasks": {
      "post": {
        "tags": [
          "tasks"
        ],
        "summary": "Create Many tasks",
        "operationId": "createManyTasks",
        "parameters": [
          {
            "$ref": "#/components/parameters/depth"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Task"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "createTasks": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/TaskForResponse"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/tasks/{id}": {
      "get": {
        "tags": [
          "tasks"
        ],
        "summary": "Find One task",
        "description": "**depth** can be provided to request your **task**",
        "operationId": "findOneTask",
        "parameters": [
          {
            "$ref": "#/components/parameters/idPath"
          },
          {
            "$ref": "#/components/parameters/depth"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "task": {
                          "$ref": "#/components/schemas/TaskForResponse"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      },
      "delete": {
        "tags": [
          "tasks"
        ],
        "summary": "Delete One task",
        "operationId": "deleteOneTask",
        "parameters": [
          {
            "$ref": "#/components/parameters/idPath"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "deleteTask": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string",
                              "format": "uuid"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      },
      "patch": {
        "tags": [
          "tasks"
        ],
        "summary": "Update One task",
        "operationId": "UpdateOneTask",
        "parameters": [
          {
            "$ref": "#/components/parameters/idPath"
          },
          {
            "$ref": "#/components/parameters/depth"
          }
        ],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaskForUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "updateTask": {
                          "$ref": "#/components/schemas/TaskForResponse"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/tasks/duplicates": {
      "post": {
        "tags": [
          "tasks"
        ],
        "summary": "Find task Duplicates",
        "description": "**depth** can be provided to request your **task**",
        "operationId": "findTaskDuplicates",
        "parameters": [
          {
            "$ref": "#/components/parameters/depth"
          }
        ],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/Task"
                    }
                  },
                  "ids": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "uuid"
                    }
                  }
                },
                "example": {
                  "ids": [
                    "e4956527-be2f-40b8-8e85-6f701896ceca"
                  ]
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "totalCount": {
                            "type": "number"
                          },
                          "pageInfo": {
                            "type": "object",
                            "properties": {
                              "hasNextPage": {
                                "type": "boolean"
                              },
                              "startCursor": {
                                "type": "string",
                                "format": "uuid"
                              },
                              "endCursor": {
                                "type": "string",
                                "format": "uuid"
                              }
                            }
                          },
                          "taskDuplicates": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/TaskForResponse"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/taskTargets": {
      "get": {
        "tags": [
          "taskTargets"
        ],
        "summary": "Find Many taskTargets",
        "description": "**order_by**, **filter**, **limit**, **depth**, **starting_after** or **ending_before** can be provided to request your **taskTargets**",
        "operationId": "findManyTaskTargets",
        "parameters": [
          {
            "$ref": "#/components/parameters/orderBy"
          },
          {
            "$ref": "#/components/parameters/filter"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/depth"
          },
          {
            "$ref": "#/components/parameters/startingAfter"
          },
          {
            "$ref": "#/components/parameters/endingBefore"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "taskTargets": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/TaskTargetForResponse"
                          }
                        }
                      }
                    },
                    "pageInfo": {
                      "type": "object",
                      "properties": {
                        "hasNextPage": {
                          "type": "boolean"
                        },
                        "startCursor": {
                          "type": "string",
                          "format": "uuid"
                        },
                        "endCursor": {
                          "type": "string",
                          "format": "uuid"
                        }
                      }
                    },
                    "totalCount": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      },
      "post": {
        "tags": [
          "taskTargets"
        ],
        "summary": "Create One taskTarget",
        "operationId": "createOneTaskTarget",
        "parameters": [
          {
            "$ref": "#/components/parameters/depth"
          }
        ],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaskTarget"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "createTaskTarget": {
                          "$ref": "#/components/schemas/TaskTargetForResponse"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/batch/taskTargets": {
      "post": {
        "tags": [
          "taskTargets"
        ],
        "summary": "Create Many taskTargets",
        "operationId": "createManyTaskTargets",
        "parameters": [
          {
            "$ref": "#/components/parameters/depth"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/TaskTarget"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "createTaskTargets": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/TaskTargetForResponse"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/taskTargets/{id}": {
      "get": {
        "tags": [
          "taskTargets"
        ],
        "summary": "Find One taskTarget",
        "description": "**depth** can be provided to request your **taskTarget**",
        "operationId": "findOneTaskTarget",
        "parameters": [
          {
            "$ref": "#/components/parameters/idPath"
          },
          {
            "$ref": "#/components/parameters/depth"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "taskTarget": {
                          "$ref": "#/components/schemas/TaskTargetForResponse"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      },
      "delete": {
        "tags": [
          "taskTargets"
        ],
        "summary": "Delete One taskTarget",
        "operationId": "deleteOneTaskTarget",
        "parameters": [
          {
            "$ref": "#/components/parameters/idPath"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "deleteTaskTarget": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string",
                              "format": "uuid"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      },
      "patch": {
        "tags": [
          "taskTargets"
        ],
        "summary": "Update One taskTarget",
        "operationId": "UpdateOneTaskTarget",
        "parameters": [
          {
            "$ref": "#/components/parameters/idPath"
          },
          {
            "$ref": "#/components/parameters/depth"
          }
        ],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaskTargetForUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "updateTaskTarget": {
                          "$ref": "#/components/schemas/TaskTargetForResponse"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/taskTargets/duplicates": {
      "post": {
        "tags": [
          "taskTargets"
        ],
        "summary": "Find taskTarget Duplicates",
        "description": "**depth** can be provided to request your **taskTarget**",
        "operationId": "findTaskTargetDuplicates",
        "parameters": [
          {
            "$ref": "#/components/parameters/depth"
          }
        ],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/TaskTarget"
                    }
                  },
                  "ids": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "uuid"
                    }
                  }
                },
                "example": {
                  "ids": [
                    "e3975e51-6f4a-4882-ba90-7b4394379a67"
                  ]
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "totalCount": {
                            "type": "number"
                          },
                          "pageInfo": {
                            "type": "object",
                            "properties": {
                              "hasNextPage": {
                                "type": "boolean"
                              },
                              "startCursor": {
                                "type": "string",
                                "format": "uuid"
                              },
                              "endCursor": {
                                "type": "string",
                                "format": "uuid"
                              }
                            }
                          },
                          "taskTargetDuplicates": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/TaskTargetForResponse"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/timelineActivities": {
      "get": {
        "tags": [
          "timelineActivities"
        ],
        "summary": "Find Many timelineActivities",
        "description": "**order_by**, **filter**, **limit**, **depth**, **starting_after** or **ending_before** can be provided to request your **timelineActivities**",
        "operationId": "findManyTimelineActivities",
        "parameters": [
          {
            "$ref": "#/components/parameters/orderBy"
          },
          {
            "$ref": "#/components/parameters/filter"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/depth"
          },
          {
            "$ref": "#/components/parameters/startingAfter"
          },
          {
            "$ref": "#/components/parameters/endingBefore"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "timelineActivities": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/TimelineActivityForResponse"
                          }
                        }
                      }
                    },
                    "pageInfo": {
                      "type": "object",
                      "properties": {
                        "hasNextPage": {
                          "type": "boolean"
                        },
                        "startCursor": {
                          "type": "string",
                          "format": "uuid"
                        },
                        "endCursor": {
                          "type": "string",
                          "format": "uuid"
                        }
                      }
                    },
                    "totalCount": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      },
      "post": {
        "tags": [
          "timelineActivities"
        ],
        "summary": "Create One timelineActivity",
        "operationId": "createOneTimelineActivity",
        "parameters": [
          {
            "$ref": "#/components/parameters/depth"
          }
        ],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TimelineActivity"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "createTimelineActivity": {
                          "$ref": "#/components/schemas/TimelineActivityForResponse"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/batch/timelineActivities": {
      "post": {
        "tags": [
          "timelineActivities"
        ],
        "summary": "Create Many timelineActivities",
        "operationId": "createManyTimelineActivities",
        "parameters": [
          {
            "$ref": "#/components/parameters/depth"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/TimelineActivity"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "createTimelineActivities": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/TimelineActivityForResponse"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/timelineActivities/{id}": {
      "get": {
        "tags": [
          "timelineActivities"
        ],
        "summary": "Find One timelineActivity",
        "description": "**depth** can be provided to request your **timelineActivity**",
        "operationId": "findOneTimelineActivity",
        "parameters": [
          {
            "$ref": "#/components/parameters/idPath"
          },
          {
            "$ref": "#/components/parameters/depth"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "timelineActivity": {
                          "$ref": "#/components/schemas/TimelineActivityForResponse"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      },
      "delete": {
        "tags": [
          "timelineActivities"
        ],
        "summary": "Delete One timelineActivity",
        "operationId": "deleteOneTimelineActivity",
        "parameters": [
          {
            "$ref": "#/components/parameters/idPath"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "deleteTimelineActivity": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string",
                              "format": "uuid"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      },
      "patch": {
        "tags": [
          "timelineActivities"
        ],
        "summary": "Update One timelineActivity",
        "operationId": "UpdateOneTimelineActivity",
        "parameters": [
          {
            "$ref": "#/components/parameters/idPath"
          },
          {
            "$ref": "#/components/parameters/depth"
          }
        ],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TimelineActivityForUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "updateTimelineActivity": {
                          "$ref": "#/components/schemas/TimelineActivityForResponse"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/timelineActivities/duplicates": {
      "post": {
        "tags": [
          "timelineActivities"
        ],
        "summary": "Find timelineActivity Duplicates",
        "description": "**depth** can be provided to request your **timelineActivity**",
        "operationId": "findTimelineActivityDuplicates",
        "parameters": [
          {
            "$ref": "#/components/parameters/depth"
          }
        ],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/TimelineActivity"
                    }
                  },
                  "ids": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "uuid"
                    }
                  }
                },
                "example": {
                  "ids": [
                    "42bb4c99-1fc8-473e-94c6-4d9c46e8bd1f"
                  ]
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "totalCount": {
                            "type": "number"
                          },
                          "pageInfo": {
                            "type": "object",
                            "properties": {
                              "hasNextPage": {
                                "type": "boolean"
                              },
                              "startCursor": {
                                "type": "string",
                                "format": "uuid"
                              },
                              "endCursor": {
                                "type": "string",
                                "format": "uuid"
                              }
                            }
                          },
                          "timelineActivityDuplicates": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/TimelineActivityForResponse"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/viewFields": {
      "get": {
        "tags": [
          "viewFields"
        ],
        "summary": "Find Many viewFields",
        "description": "**order_by**, **filter**, **limit**, **depth**, **starting_after** or **ending_before** can be provided to request your **viewFields**",
        "operationId": "findManyViewFields",
        "parameters": [
          {
            "$ref": "#/components/parameters/orderBy"
          },
          {
            "$ref": "#/components/parameters/filter"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/depth"
          },
          {
            "$ref": "#/components/parameters/startingAfter"
          },
          {
            "$ref": "#/components/parameters/endingBefore"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "viewFields": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/ViewFieldForResponse"
                          }
                        }
                      }
                    },
                    "pageInfo": {
                      "type": "object",
                      "properties": {
                        "hasNextPage": {
                          "type": "boolean"
                        },
                        "startCursor": {
                          "type": "string",
                          "format": "uuid"
                        },
                        "endCursor": {
                          "type": "string",
                          "format": "uuid"
                        }
                      }
                    },
                    "totalCount": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      },
      "post": {
        "tags": [
          "viewFields"
        ],
        "summary": "Create One viewField",
        "operationId": "createOneViewField",
        "parameters": [
          {
            "$ref": "#/components/parameters/depth"
          }
        ],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ViewField"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "createViewField": {
                          "$ref": "#/components/schemas/ViewFieldForResponse"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/batch/viewFields": {
      "post": {
        "tags": [
          "viewFields"
        ],
        "summary": "Create Many viewFields",
        "operationId": "createManyViewFields",
        "parameters": [
          {
            "$ref": "#/components/parameters/depth"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ViewField"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "createViewFields": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/ViewFieldForResponse"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/viewFields/{id}": {
      "get": {
        "tags": [
          "viewFields"
        ],
        "summary": "Find One viewField",
        "description": "**depth** can be provided to request your **viewField**",
        "operationId": "findOneViewField",
        "parameters": [
          {
            "$ref": "#/components/parameters/idPath"
          },
          {
            "$ref": "#/components/parameters/depth"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "viewField": {
                          "$ref": "#/components/schemas/ViewFieldForResponse"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      },
      "delete": {
        "tags": [
          "viewFields"
        ],
        "summary": "Delete One viewField",
        "operationId": "deleteOneViewField",
        "parameters": [
          {
            "$ref": "#/components/parameters/idPath"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "deleteViewField": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string",
                              "format": "uuid"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      },
      "patch": {
        "tags": [
          "viewFields"
        ],
        "summary": "Update One viewField",
        "operationId": "UpdateOneViewField",
        "parameters": [
          {
            "$ref": "#/components/parameters/idPath"
          },
          {
            "$ref": "#/components/parameters/depth"
          }
        ],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ViewFieldForUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "updateViewField": {
                          "$ref": "#/components/schemas/ViewFieldForResponse"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/viewFields/duplicates": {
      "post": {
        "tags": [
          "viewFields"
        ],
        "summary": "Find viewField Duplicates",
        "description": "**depth** can be provided to request your **viewField**",
        "operationId": "findViewFieldDuplicates",
        "parameters": [
          {
            "$ref": "#/components/parameters/depth"
          }
        ],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ViewField"
                    }
                  },
                  "ids": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "uuid"
                    }
                  }
                },
                "example": {
                  "ids": [
                    "2d247abf-580c-4498-8b66-4b41d5c8d88b"
                  ]
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "totalCount": {
                            "type": "number"
                          },
                          "pageInfo": {
                            "type": "object",
                            "properties": {
                              "hasNextPage": {
                                "type": "boolean"
                              },
                              "startCursor": {
                                "type": "string",
                                "format": "uuid"
                              },
                              "endCursor": {
                                "type": "string",
                                "format": "uuid"
                              }
                            }
                          },
                          "viewFieldDuplicates": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/ViewFieldForResponse"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/viewFilterGroups": {
      "get": {
        "tags": [
          "viewFilterGroups"
        ],
        "summary": "Find Many viewFilterGroups",
        "description": "**order_by**, **filter**, **limit**, **depth**, **starting_after** or **ending_before** can be provided to request your **viewFilterGroups**",
        "operationId": "findManyViewFilterGroups",
        "parameters": [
          {
            "$ref": "#/components/parameters/orderBy"
          },
          {
            "$ref": "#/components/parameters/filter"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/depth"
          },
          {
            "$ref": "#/components/parameters/startingAfter"
          },
          {
            "$ref": "#/components/parameters/endingBefore"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "viewFilterGroups": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/ViewFilterGroupForResponse"
                          }
                        }
                      }
                    },
                    "pageInfo": {
                      "type": "object",
                      "properties": {
                        "hasNextPage": {
                          "type": "boolean"
                        },
                        "startCursor": {
                          "type": "string",
                          "format": "uuid"
                        },
                        "endCursor": {
                          "type": "string",
                          "format": "uuid"
                        }
                      }
                    },
                    "totalCount": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      },
      "post": {
        "tags": [
          "viewFilterGroups"
        ],
        "summary": "Create One viewFilterGroup",
        "operationId": "createOneViewFilterGroup",
        "parameters": [
          {
            "$ref": "#/components/parameters/depth"
          }
        ],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ViewFilterGroup"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "createViewFilterGroup": {
                          "$ref": "#/components/schemas/ViewFilterGroupForResponse"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/batch/viewFilterGroups": {
      "post": {
        "tags": [
          "viewFilterGroups"
        ],
        "summary": "Create Many viewFilterGroups",
        "operationId": "createManyViewFilterGroups",
        "parameters": [
          {
            "$ref": "#/components/parameters/depth"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ViewFilterGroup"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "createViewFilterGroups": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/ViewFilterGroupForResponse"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/viewFilterGroups/{id}": {
      "get": {
        "tags": [
          "viewFilterGroups"
        ],
        "summary": "Find One viewFilterGroup",
        "description": "**depth** can be provided to request your **viewFilterGroup**",
        "operationId": "findOneViewFilterGroup",
        "parameters": [
          {
            "$ref": "#/components/parameters/idPath"
          },
          {
            "$ref": "#/components/parameters/depth"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "viewFilterGroup": {
                          "$ref": "#/components/schemas/ViewFilterGroupForResponse"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      },
      "delete": {
        "tags": [
          "viewFilterGroups"
        ],
        "summary": "Delete One viewFilterGroup",
        "operationId": "deleteOneViewFilterGroup",
        "parameters": [
          {
            "$ref": "#/components/parameters/idPath"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "deleteViewFilterGroup": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string",
                              "format": "uuid"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      },
      "patch": {
        "tags": [
          "viewFilterGroups"
        ],
        "summary": "Update One viewFilterGroup",
        "operationId": "UpdateOneViewFilterGroup",
        "parameters": [
          {
            "$ref": "#/components/parameters/idPath"
          },
          {
            "$ref": "#/components/parameters/depth"
          }
        ],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ViewFilterGroupForUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "updateViewFilterGroup": {
                          "$ref": "#/components/schemas/ViewFilterGroupForResponse"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/viewFilterGroups/duplicates": {
      "post": {
        "tags": [
          "viewFilterGroups"
        ],
        "summary": "Find viewFilterGroup Duplicates",
        "description": "**depth** can be provided to request your **viewFilterGroup**",
        "operationId": "findViewFilterGroupDuplicates",
        "parameters": [
          {
            "$ref": "#/components/parameters/depth"
          }
        ],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ViewFilterGroup"
                    }
                  },
                  "ids": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "uuid"
                    }
                  }
                },
                "example": {
                  "ids": [
                    "e7108b2c-d1ec-41e6-976a-a7380328e941"
                  ]
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "totalCount": {
                            "type": "number"
                          },
                          "pageInfo": {
                            "type": "object",
                            "properties": {
                              "hasNextPage": {
                                "type": "boolean"
                              },
                              "startCursor": {
                                "type": "string",
                                "format": "uuid"
                              },
                              "endCursor": {
                                "type": "string",
                                "format": "uuid"
                              }
                            }
                          },
                          "viewFilterGroupDuplicates": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/ViewFilterGroupForResponse"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/viewFilters": {
      "get": {
        "tags": [
          "viewFilters"
        ],
        "summary": "Find Many viewFilters",
        "description": "**order_by**, **filter**, **limit**, **depth**, **starting_after** or **ending_before** can be provided to request your **viewFilters**",
        "operationId": "findManyViewFilters",
        "parameters": [
          {
            "$ref": "#/components/parameters/orderBy"
          },
          {
            "$ref": "#/components/parameters/filter"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/depth"
          },
          {
            "$ref": "#/components/parameters/startingAfter"
          },
          {
            "$ref": "#/components/parameters/endingBefore"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "viewFilters": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/ViewFilterForResponse"
                          }
                        }
                      }
                    },
                    "pageInfo": {
                      "type": "object",
                      "properties": {
                        "hasNextPage": {
                          "type": "boolean"
                        },
                        "startCursor": {
                          "type": "string",
                          "format": "uuid"
                        },
                        "endCursor": {
                          "type": "string",
                          "format": "uuid"
                        }
                      }
                    },
                    "totalCount": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      },
      "post": {
        "tags": [
          "viewFilters"
        ],
        "summary": "Create One viewFilter",
        "operationId": "createOneViewFilter",
        "parameters": [
          {
            "$ref": "#/components/parameters/depth"
          }
        ],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ViewFilter"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "createViewFilter": {
                          "$ref": "#/components/schemas/ViewFilterForResponse"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/batch/viewFilters": {
      "post": {
        "tags": [
          "viewFilters"
        ],
        "summary": "Create Many viewFilters",
        "operationId": "createManyViewFilters",
        "parameters": [
          {
            "$ref": "#/components/parameters/depth"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ViewFilter"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "createViewFilters": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/ViewFilterForResponse"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/viewFilters/{id}": {
      "get": {
        "tags": [
          "viewFilters"
        ],
        "summary": "Find One viewFilter",
        "description": "**depth** can be provided to request your **viewFilter**",
        "operationId": "findOneViewFilter",
        "parameters": [
          {
            "$ref": "#/components/parameters/idPath"
          },
          {
            "$ref": "#/components/parameters/depth"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "viewFilter": {
                          "$ref": "#/components/schemas/ViewFilterForResponse"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      },
      "delete": {
        "tags": [
          "viewFilters"
        ],
        "summary": "Delete One viewFilter",
        "operationId": "deleteOneViewFilter",
        "parameters": [
          {
            "$ref": "#/components/parameters/idPath"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "deleteViewFilter": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string",
                              "format": "uuid"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      },
      "patch": {
        "tags": [
          "viewFilters"
        ],
        "summary": "Update One viewFilter",
        "operationId": "UpdateOneViewFilter",
        "parameters": [
          {
            "$ref": "#/components/parameters/idPath"
          },
          {
            "$ref": "#/components/parameters/depth"
          }
        ],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ViewFilterForUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "updateViewFilter": {
                          "$ref": "#/components/schemas/ViewFilterForResponse"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/viewFilters/duplicates": {
      "post": {
        "tags": [
          "viewFilters"
        ],
        "summary": "Find viewFilter Duplicates",
        "description": "**depth** can be provided to request your **viewFilter**",
        "operationId": "findViewFilterDuplicates",
        "parameters": [
          {
            "$ref": "#/components/parameters/depth"
          }
        ],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ViewFilter"
                    }
                  },
                  "ids": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "uuid"
                    }
                  }
                },
                "example": {
                  "ids": [
                    "476703c8-217b-4cc3-8578-ecf19041bb35"
                  ]
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "totalCount": {
                            "type": "number"
                          },
                          "pageInfo": {
                            "type": "object",
                            "properties": {
                              "hasNextPage": {
                                "type": "boolean"
                              },
                              "startCursor": {
                                "type": "string",
                                "format": "uuid"
                              },
                              "endCursor": {
                                "type": "string",
                                "format": "uuid"
                              }
                            }
                          },
                          "viewFilterDuplicates": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/ViewFilterForResponse"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/viewGroups": {
      "get": {
        "tags": [
          "viewGroups"
        ],
        "summary": "Find Many viewGroups",
        "description": "**order_by**, **filter**, **limit**, **depth**, **starting_after** or **ending_before** can be provided to request your **viewGroups**",
        "operationId": "findManyViewGroups",
        "parameters": [
          {
            "$ref": "#/components/parameters/orderBy"
          },
          {
            "$ref": "#/components/parameters/filter"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/depth"
          },
          {
            "$ref": "#/components/parameters/startingAfter"
          },
          {
            "$ref": "#/components/parameters/endingBefore"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "viewGroups": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/ViewGroupForResponse"
                          }
                        }
                      }
                    },
                    "pageInfo": {
                      "type": "object",
                      "properties": {
                        "hasNextPage": {
                          "type": "boolean"
                        },
                        "startCursor": {
                          "type": "string",
                          "format": "uuid"
                        },
                        "endCursor": {
                          "type": "string",
                          "format": "uuid"
                        }
                      }
                    },
                    "totalCount": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      },
      "post": {
        "tags": [
          "viewGroups"
        ],
        "summary": "Create One viewGroup",
        "operationId": "createOneViewGroup",
        "parameters": [
          {
            "$ref": "#/components/parameters/depth"
          }
        ],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ViewGroup"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "createViewGroup": {
                          "$ref": "#/components/schemas/ViewGroupForResponse"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/batch/viewGroups": {
      "post": {
        "tags": [
          "viewGroups"
        ],
        "summary": "Create Many viewGroups",
        "operationId": "createManyViewGroups",
        "parameters": [
          {
            "$ref": "#/components/parameters/depth"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ViewGroup"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "createViewGroups": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/ViewGroupForResponse"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/viewGroups/{id}": {
      "get": {
        "tags": [
          "viewGroups"
        ],
        "summary": "Find One viewGroup",
        "description": "**depth** can be provided to request your **viewGroup**",
        "operationId": "findOneViewGroup",
        "parameters": [
          {
            "$ref": "#/components/parameters/idPath"
          },
          {
            "$ref": "#/components/parameters/depth"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "viewGroup": {
                          "$ref": "#/components/schemas/ViewGroupForResponse"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      },
      "delete": {
        "tags": [
          "viewGroups"
        ],
        "summary": "Delete One viewGroup",
        "operationId": "deleteOneViewGroup",
        "parameters": [
          {
            "$ref": "#/components/parameters/idPath"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "deleteViewGroup": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string",
                              "format": "uuid"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      },
      "patch": {
        "tags": [
          "viewGroups"
        ],
        "summary": "Update One viewGroup",
        "operationId": "UpdateOneViewGroup",
        "parameters": [
          {
            "$ref": "#/components/parameters/idPath"
          },
          {
            "$ref": "#/components/parameters/depth"
          }
        ],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ViewGroupForUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "updateViewGroup": {
                          "$ref": "#/components/schemas/ViewGroupForResponse"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/viewGroups/duplicates": {
      "post": {
        "tags": [
          "viewGroups"
        ],
        "summary": "Find viewGroup Duplicates",
        "description": "**depth** can be provided to request your **viewGroup**",
        "operationId": "findViewGroupDuplicates",
        "parameters": [
          {
            "$ref": "#/components/parameters/depth"
          }
        ],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ViewGroup"
                    }
                  },
                  "ids": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "uuid"
                    }
                  }
                },
                "example": {
                  "ids": [
                    "9fe50d5f-9738-4318-a541-0e60912d43f5"
                  ]
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "totalCount": {
                            "type": "number"
                          },
                          "pageInfo": {
                            "type": "object",
                            "properties": {
                              "hasNextPage": {
                                "type": "boolean"
                              },
                              "startCursor": {
                                "type": "string",
                                "format": "uuid"
                              },
                              "endCursor": {
                                "type": "string",
                                "format": "uuid"
                              }
                            }
                          },
                          "viewGroupDuplicates": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/ViewGroupForResponse"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/views": {
      "get": {
        "tags": [
          "views"
        ],
        "summary": "Find Many views",
        "description": "**order_by**, **filter**, **limit**, **depth**, **starting_after** or **ending_before** can be provided to request your **views**",
        "operationId": "findManyViews",
        "parameters": [
          {
            "$ref": "#/components/parameters/orderBy"
          },
          {
            "$ref": "#/components/parameters/filter"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/depth"
          },
          {
            "$ref": "#/components/parameters/startingAfter"
          },
          {
            "$ref": "#/components/parameters/endingBefore"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "views": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/ViewForResponse"
                          }
                        }
                      }
                    },
                    "pageInfo": {
                      "type": "object",
                      "properties": {
                        "hasNextPage": {
                          "type": "boolean"
                        },
                        "startCursor": {
                          "type": "string",
                          "format": "uuid"
                        },
                        "endCursor": {
                          "type": "string",
                          "format": "uuid"
                        }
                      }
                    },
                    "totalCount": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      },
      "post": {
        "tags": [
          "views"
        ],
        "summary": "Create One view",
        "operationId": "createOneView",
        "parameters": [
          {
            "$ref": "#/components/parameters/depth"
          }
        ],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/View"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "createView": {
                          "$ref": "#/components/schemas/ViewForResponse"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/batch/views": {
      "post": {
        "tags": [
          "views"
        ],
        "summary": "Create Many views",
        "operationId": "createManyViews",
        "parameters": [
          {
            "$ref": "#/components/parameters/depth"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/View"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "createViews": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/ViewForResponse"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/views/{id}": {
      "get": {
        "tags": [
          "views"
        ],
        "summary": "Find One view",
        "description": "**depth** can be provided to request your **view**",
        "operationId": "findOneView",
        "parameters": [
          {
            "$ref": "#/components/parameters/idPath"
          },
          {
            "$ref": "#/components/parameters/depth"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "view": {
                          "$ref": "#/components/schemas/ViewForResponse"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      },
      "delete": {
        "tags": [
          "views"
        ],
        "summary": "Delete One view",
        "operationId": "deleteOneView",
        "parameters": [
          {
            "$ref": "#/components/parameters/idPath"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "deleteView": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string",
                              "format": "uuid"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      },
      "patch": {
        "tags": [
          "views"
        ],
        "summary": "Update One view",
        "operationId": "UpdateOneView",
        "parameters": [
          {
            "$ref": "#/components/parameters/idPath"
          },
          {
            "$ref": "#/components/parameters/depth"
          }
        ],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ViewForUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "updateView": {
                          "$ref": "#/components/schemas/ViewForResponse"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/views/duplicates": {
      "post": {
        "tags": [
          "views"
        ],
        "summary": "Find view Duplicates",
        "description": "**depth** can be provided to request your **view**",
        "operationId": "findViewDuplicates",
        "parameters": [
          {
            "$ref": "#/components/parameters/depth"
          }
        ],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/View"
                    }
                  },
                  "ids": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "uuid"
                    }
                  }
                },
                "example": {
                  "ids": [
                    "5da740c8-061b-4d30-95f4-1179912f119d"
                  ]
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "totalCount": {
                            "type": "number"
                          },
                          "pageInfo": {
                            "type": "object",
                            "properties": {
                              "hasNextPage": {
                                "type": "boolean"
                              },
                              "startCursor": {
                                "type": "string",
                                "format": "uuid"
                              },
                              "endCursor": {
                                "type": "string",
                                "format": "uuid"
                              }
                            }
                          },
                          "viewDuplicates": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/ViewForResponse"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/viewSorts": {
      "get": {
        "tags": [
          "viewSorts"
        ],
        "summary": "Find Many viewSorts",
        "description": "**order_by**, **filter**, **limit**, **depth**, **starting_after** or **ending_before** can be provided to request your **viewSorts**",
        "operationId": "findManyViewSorts",
        "parameters": [
          {
            "$ref": "#/components/parameters/orderBy"
          },
          {
            "$ref": "#/components/parameters/filter"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/depth"
          },
          {
            "$ref": "#/components/parameters/startingAfter"
          },
          {
            "$ref": "#/components/parameters/endingBefore"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "viewSorts": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/ViewSortForResponse"
                          }
                        }
                      }
                    },
                    "pageInfo": {
                      "type": "object",
                      "properties": {
                        "hasNextPage": {
                          "type": "boolean"
                        },
                        "startCursor": {
                          "type": "string",
                          "format": "uuid"
                        },
                        "endCursor": {
                          "type": "string",
                          "format": "uuid"
                        }
                      }
                    },
                    "totalCount": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      },
      "post": {
        "tags": [
          "viewSorts"
        ],
        "summary": "Create One viewSort",
        "operationId": "createOneViewSort",
        "parameters": [
          {
            "$ref": "#/components/parameters/depth"
          }
        ],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ViewSort"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "createViewSort": {
                          "$ref": "#/components/schemas/ViewSortForResponse"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/batch/viewSorts": {
      "post": {
        "tags": [
          "viewSorts"
        ],
        "summary": "Create Many viewSorts",
        "operationId": "createManyViewSorts",
        "parameters": [
          {
            "$ref": "#/components/parameters/depth"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ViewSort"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "createViewSorts": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/ViewSortForResponse"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/viewSorts/{id}": {
      "get": {
        "tags": [
          "viewSorts"
        ],
        "summary": "Find One viewSort",
        "description": "**depth** can be provided to request your **viewSort**",
        "operationId": "findOneViewSort",
        "parameters": [
          {
            "$ref": "#/components/parameters/idPath"
          },
          {
            "$ref": "#/components/parameters/depth"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "viewSort": {
                          "$ref": "#/components/schemas/ViewSortForResponse"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      },
      "delete": {
        "tags": [
          "viewSorts"
        ],
        "summary": "Delete One viewSort",
        "operationId": "deleteOneViewSort",
        "parameters": [
          {
            "$ref": "#/components/parameters/idPath"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "deleteViewSort": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string",
                              "format": "uuid"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      },
      "patch": {
        "tags": [
          "viewSorts"
        ],
        "summary": "Update One viewSort",
        "operationId": "UpdateOneViewSort",
        "parameters": [
          {
            "$ref": "#/components/parameters/idPath"
          },
          {
            "$ref": "#/components/parameters/depth"
          }
        ],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ViewSortForUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "updateViewSort": {
                          "$ref": "#/components/schemas/ViewSortForResponse"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/viewSorts/duplicates": {
      "post": {
        "tags": [
          "viewSorts"
        ],
        "summary": "Find viewSort Duplicates",
        "description": "**depth** can be provided to request your **viewSort**",
        "operationId": "findViewSortDuplicates",
        "parameters": [
          {
            "$ref": "#/components/parameters/depth"
          }
        ],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ViewSort"
                    }
                  },
                  "ids": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "uuid"
                    }
                  }
                },
                "example": {
                  "ids": [
                    "5cb72e02-9fb1-4f58-a595-9f4e97d3469e"
                  ]
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "totalCount": {
                            "type": "number"
                          },
                          "pageInfo": {
                            "type": "object",
                            "properties": {
                              "hasNextPage": {
                                "type": "boolean"
                              },
                              "startCursor": {
                                "type": "string",
                                "format": "uuid"
                              },
                              "endCursor": {
                                "type": "string",
                                "format": "uuid"
                              }
                            }
                          },
                          "viewSortDuplicates": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/ViewSortForResponse"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/workflowAutomatedTriggers": {
      "get": {
        "tags": [
          "workflowAutomatedTriggers"
        ],
        "summary": "Find Many workflowAutomatedTriggers",
        "description": "**order_by**, **filter**, **limit**, **depth**, **starting_after** or **ending_before** can be provided to request your **workflowAutomatedTriggers**",
        "operationId": "findManyWorkflowAutomatedTriggers",
        "parameters": [
          {
            "$ref": "#/components/parameters/orderBy"
          },
          {
            "$ref": "#/components/parameters/filter"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/depth"
          },
          {
            "$ref": "#/components/parameters/startingAfter"
          },
          {
            "$ref": "#/components/parameters/endingBefore"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "workflowAutomatedTriggers": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/WorkflowAutomatedTriggerForResponse"
                          }
                        }
                      }
                    },
                    "pageInfo": {
                      "type": "object",
                      "properties": {
                        "hasNextPage": {
                          "type": "boolean"
                        },
                        "startCursor": {
                          "type": "string",
                          "format": "uuid"
                        },
                        "endCursor": {
                          "type": "string",
                          "format": "uuid"
                        }
                      }
                    },
                    "totalCount": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      },
      "post": {
        "tags": [
          "workflowAutomatedTriggers"
        ],
        "summary": "Create One workflowAutomatedTrigger",
        "operationId": "createOneWorkflowAutomatedTrigger",
        "parameters": [
          {
            "$ref": "#/components/parameters/depth"
          }
        ],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WorkflowAutomatedTrigger"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "createWorkflowAutomatedTrigger": {
                          "$ref": "#/components/schemas/WorkflowAutomatedTriggerForResponse"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/batch/workflowAutomatedTriggers": {
      "post": {
        "tags": [
          "workflowAutomatedTriggers"
        ],
        "summary": "Create Many workflowAutomatedTriggers",
        "operationId": "createManyWorkflowAutomatedTriggers",
        "parameters": [
          {
            "$ref": "#/components/parameters/depth"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/WorkflowAutomatedTrigger"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "createWorkflowAutomatedTriggers": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/WorkflowAutomatedTriggerForResponse"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/workflowAutomatedTriggers/{id}": {
      "get": {
        "tags": [
          "workflowAutomatedTriggers"
        ],
        "summary": "Find One workflowAutomatedTrigger",
        "description": "**depth** can be provided to request your **workflowAutomatedTrigger**",
        "operationId": "findOneWorkflowAutomatedTrigger",
        "parameters": [
          {
            "$ref": "#/components/parameters/idPath"
          },
          {
            "$ref": "#/components/parameters/depth"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "workflowAutomatedTrigger": {
                          "$ref": "#/components/schemas/WorkflowAutomatedTriggerForResponse"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      },
      "delete": {
        "tags": [
          "workflowAutomatedTriggers"
        ],
        "summary": "Delete One workflowAutomatedTrigger",
        "operationId": "deleteOneWorkflowAutomatedTrigger",
        "parameters": [
          {
            "$ref": "#/components/parameters/idPath"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "deleteWorkflowAutomatedTrigger": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string",
                              "format": "uuid"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      },
      "patch": {
        "tags": [
          "workflowAutomatedTriggers"
        ],
        "summary": "Update One workflowAutomatedTrigger",
        "operationId": "UpdateOneWorkflowAutomatedTrigger",
        "parameters": [
          {
            "$ref": "#/components/parameters/idPath"
          },
          {
            "$ref": "#/components/parameters/depth"
          }
        ],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WorkflowAutomatedTriggerForUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "updateWorkflowAutomatedTrigger": {
                          "$ref": "#/components/schemas/WorkflowAutomatedTriggerForResponse"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/workflowAutomatedTriggers/duplicates": {
      "post": {
        "tags": [
          "workflowAutomatedTriggers"
        ],
        "summary": "Find workflowAutomatedTrigger Duplicates",
        "description": "**depth** can be provided to request your **workflowAutomatedTrigger**",
        "operationId": "findWorkflowAutomatedTriggerDuplicates",
        "parameters": [
          {
            "$ref": "#/components/parameters/depth"
          }
        ],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/WorkflowAutomatedTrigger"
                    }
                  },
                  "ids": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "uuid"
                    }
                  }
                },
                "example": {
                  "ids": [
                    "70d46144-cefb-4741-8da1-c4add9a11f5a"
                  ]
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "totalCount": {
                            "type": "number"
                          },
                          "pageInfo": {
                            "type": "object",
                            "properties": {
                              "hasNextPage": {
                                "type": "boolean"
                              },
                              "startCursor": {
                                "type": "string",
                                "format": "uuid"
                              },
                              "endCursor": {
                                "type": "string",
                                "format": "uuid"
                              }
                            }
                          },
                          "workflowAutomatedTriggerDuplicates": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/WorkflowAutomatedTriggerForResponse"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/workflowRuns": {
      "get": {
        "tags": [
          "workflowRuns"
        ],
        "summary": "Find Many workflowRuns",
        "description": "**order_by**, **filter**, **limit**, **depth**, **starting_after** or **ending_before** can be provided to request your **workflowRuns**",
        "operationId": "findManyWorkflowRuns",
        "parameters": [
          {
            "$ref": "#/components/parameters/orderBy"
          },
          {
            "$ref": "#/components/parameters/filter"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/depth"
          },
          {
            "$ref": "#/components/parameters/startingAfter"
          },
          {
            "$ref": "#/components/parameters/endingBefore"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "workflowRuns": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/WorkflowRunForResponse"
                          }
                        }
                      }
                    },
                    "pageInfo": {
                      "type": "object",
                      "properties": {
                        "hasNextPage": {
                          "type": "boolean"
                        },
                        "startCursor": {
                          "type": "string",
                          "format": "uuid"
                        },
                        "endCursor": {
                          "type": "string",
                          "format": "uuid"
                        }
                      }
                    },
                    "totalCount": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      },
      "post": {
        "tags": [
          "workflowRuns"
        ],
        "summary": "Create One workflowRun",
        "operationId": "createOneWorkflowRun",
        "parameters": [
          {
            "$ref": "#/components/parameters/depth"
          }
        ],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WorkflowRun"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "createWorkflowRun": {
                          "$ref": "#/components/schemas/WorkflowRunForResponse"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/batch/workflowRuns": {
      "post": {
        "tags": [
          "workflowRuns"
        ],
        "summary": "Create Many workflowRuns",
        "operationId": "createManyWorkflowRuns",
        "parameters": [
          {
            "$ref": "#/components/parameters/depth"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/WorkflowRun"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "createWorkflowRuns": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/WorkflowRunForResponse"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/workflowRuns/{id}": {
      "get": {
        "tags": [
          "workflowRuns"
        ],
        "summary": "Find One workflowRun",
        "description": "**depth** can be provided to request your **workflowRun**",
        "operationId": "findOneWorkflowRun",
        "parameters": [
          {
            "$ref": "#/components/parameters/idPath"
          },
          {
            "$ref": "#/components/parameters/depth"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "workflowRun": {
                          "$ref": "#/components/schemas/WorkflowRunForResponse"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      },
      "delete": {
        "tags": [
          "workflowRuns"
        ],
        "summary": "Delete One workflowRun",
        "operationId": "deleteOneWorkflowRun",
        "parameters": [
          {
            "$ref": "#/components/parameters/idPath"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "deleteWorkflowRun": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string",
                              "format": "uuid"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      },
      "patch": {
        "tags": [
          "workflowRuns"
        ],
        "summary": "Update One workflowRun",
        "operationId": "UpdateOneWorkflowRun",
        "parameters": [
          {
            "$ref": "#/components/parameters/idPath"
          },
          {
            "$ref": "#/components/parameters/depth"
          }
        ],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WorkflowRunForUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "updateWorkflowRun": {
                          "$ref": "#/components/schemas/WorkflowRunForResponse"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/workflowRuns/duplicates": {
      "post": {
        "tags": [
          "workflowRuns"
        ],
        "summary": "Find workflowRun Duplicates",
        "description": "**depth** can be provided to request your **workflowRun**",
        "operationId": "findWorkflowRunDuplicates",
        "parameters": [
          {
            "$ref": "#/components/parameters/depth"
          }
        ],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/WorkflowRun"
                    }
                  },
                  "ids": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "uuid"
                    }
                  }
                },
                "example": {
                  "ids": [
                    "565ddcf5-bad5-4411-869b-3e45e172bbd3"
                  ]
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "totalCount": {
                            "type": "number"
                          },
                          "pageInfo": {
                            "type": "object",
                            "properties": {
                              "hasNextPage": {
                                "type": "boolean"
                              },
                              "startCursor": {
                                "type": "string",
                                "format": "uuid"
                              },
                              "endCursor": {
                                "type": "string",
                                "format": "uuid"
                              }
                            }
                          },
                          "workflowRunDuplicates": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/WorkflowRunForResponse"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/workflows": {
      "get": {
        "tags": [
          "workflows"
        ],
        "summary": "Find Many workflows",
        "description": "**order_by**, **filter**, **limit**, **depth**, **starting_after** or **ending_before** can be provided to request your **workflows**",
        "operationId": "findManyWorkflows",
        "parameters": [
          {
            "$ref": "#/components/parameters/orderBy"
          },
          {
            "$ref": "#/components/parameters/filter"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/depth"
          },
          {
            "$ref": "#/components/parameters/startingAfter"
          },
          {
            "$ref": "#/components/parameters/endingBefore"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "workflows": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/WorkflowForResponse"
                          }
                        }
                      }
                    },
                    "pageInfo": {
                      "type": "object",
                      "properties": {
                        "hasNextPage": {
                          "type": "boolean"
                        },
                        "startCursor": {
                          "type": "string",
                          "format": "uuid"
                        },
                        "endCursor": {
                          "type": "string",
                          "format": "uuid"
                        }
                      }
                    },
                    "totalCount": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      },
      "post": {
        "tags": [
          "workflows"
        ],
        "summary": "Create One workflow",
        "operationId": "createOneWorkflow",
        "parameters": [
          {
            "$ref": "#/components/parameters/depth"
          }
        ],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Workflow"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "createWorkflow": {
                          "$ref": "#/components/schemas/WorkflowForResponse"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/batch/workflows": {
      "post": {
        "tags": [
          "workflows"
        ],
        "summary": "Create Many workflows",
        "operationId": "createManyWorkflows",
        "parameters": [
          {
            "$ref": "#/components/parameters/depth"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Workflow"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "createWorkflows": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/WorkflowForResponse"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/workflows/{id}": {
      "get": {
        "tags": [
          "workflows"
        ],
        "summary": "Find One workflow",
        "description": "**depth** can be provided to request your **workflow**",
        "operationId": "findOneWorkflow",
        "parameters": [
          {
            "$ref": "#/components/parameters/idPath"
          },
          {
            "$ref": "#/components/parameters/depth"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "workflow": {
                          "$ref": "#/components/schemas/WorkflowForResponse"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      },
      "delete": {
        "tags": [
          "workflows"
        ],
        "summary": "Delete One workflow",
        "operationId": "deleteOneWorkflow",
        "parameters": [
          {
            "$ref": "#/components/parameters/idPath"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "deleteWorkflow": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string",
                              "format": "uuid"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      },
      "patch": {
        "tags": [
          "workflows"
        ],
        "summary": "Update One workflow",
        "operationId": "UpdateOneWorkflow",
        "parameters": [
          {
            "$ref": "#/components/parameters/idPath"
          },
          {
            "$ref": "#/components/parameters/depth"
          }
        ],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WorkflowForUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "updateWorkflow": {
                          "$ref": "#/components/schemas/WorkflowForResponse"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/workflows/duplicates": {
      "post": {
        "tags": [
          "workflows"
        ],
        "summary": "Find workflow Duplicates",
        "description": "**depth** can be provided to request your **workflow**",
        "operationId": "findWorkflowDuplicates",
        "parameters": [
          {
            "$ref": "#/components/parameters/depth"
          }
        ],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/Workflow"
                    }
                  },
                  "ids": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "uuid"
                    }
                  }
                },
                "example": {
                  "ids": [
                    "eee993e2-cafe-4003-842b-bf9534a16bbd"
                  ]
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "totalCount": {
                            "type": "number"
                          },
                          "pageInfo": {
                            "type": "object",
                            "properties": {
                              "hasNextPage": {
                                "type": "boolean"
                              },
                              "startCursor": {
                                "type": "string",
                                "format": "uuid"
                              },
                              "endCursor": {
                                "type": "string",
                                "format": "uuid"
                              }
                            }
                          },
                          "workflowDuplicates": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/WorkflowForResponse"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/workflowVersions": {
      "get": {
        "tags": [
          "workflowVersions"
        ],
        "summary": "Find Many workflowVersions",
        "description": "**order_by**, **filter**, **limit**, **depth**, **starting_after** or **ending_before** can be provided to request your **workflowVersions**",
        "operationId": "findManyWorkflowVersions",
        "parameters": [
          {
            "$ref": "#/components/parameters/orderBy"
          },
          {
            "$ref": "#/components/parameters/filter"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/depth"
          },
          {
            "$ref": "#/components/parameters/startingAfter"
          },
          {
            "$ref": "#/components/parameters/endingBefore"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "workflowVersions": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/WorkflowVersionForResponse"
                          }
                        }
                      }
                    },
                    "pageInfo": {
                      "type": "object",
                      "properties": {
                        "hasNextPage": {
                          "type": "boolean"
                        },
                        "startCursor": {
                          "type": "string",
                          "format": "uuid"
                        },
                        "endCursor": {
                          "type": "string",
                          "format": "uuid"
                        }
                      }
                    },
                    "totalCount": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      },
      "post": {
        "tags": [
          "workflowVersions"
        ],
        "summary": "Create One workflowVersion",
        "operationId": "createOneWorkflowVersion",
        "parameters": [
          {
            "$ref": "#/components/parameters/depth"
          }
        ],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WorkflowVersion"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "createWorkflowVersion": {
                          "$ref": "#/components/schemas/WorkflowVersionForResponse"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/batch/workflowVersions": {
      "post": {
        "tags": [
          "workflowVersions"
        ],
        "summary": "Create Many workflowVersions",
        "operationId": "createManyWorkflowVersions",
        "parameters": [
          {
            "$ref": "#/components/parameters/depth"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/WorkflowVersion"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "createWorkflowVersions": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/WorkflowVersionForResponse"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/workflowVersions/{id}": {
      "get": {
        "tags": [
          "workflowVersions"
        ],
        "summary": "Find One workflowVersion",
        "description": "**depth** can be provided to request your **workflowVersion**",
        "operationId": "findOneWorkflowVersion",
        "parameters": [
          {
            "$ref": "#/components/parameters/idPath"
          },
          {
            "$ref": "#/components/parameters/depth"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "workflowVersion": {
                          "$ref": "#/components/schemas/WorkflowVersionForResponse"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      },
      "delete": {
        "tags": [
          "workflowVersions"
        ],
        "summary": "Delete One workflowVersion",
        "operationId": "deleteOneWorkflowVersion",
        "parameters": [
          {
            "$ref": "#/components/parameters/idPath"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "deleteWorkflowVersion": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string",
                              "format": "uuid"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      },
      "patch": {
        "tags": [
          "workflowVersions"
        ],
        "summary": "Update One workflowVersion",
        "operationId": "UpdateOneWorkflowVersion",
        "parameters": [
          {
            "$ref": "#/components/parameters/idPath"
          },
          {
            "$ref": "#/components/parameters/depth"
          }
        ],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WorkflowVersionForUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "updateWorkflowVersion": {
                          "$ref": "#/components/schemas/WorkflowVersionForResponse"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/workflowVersions/duplicates": {
      "post": {
        "tags": [
          "workflowVersions"
        ],
        "summary": "Find workflowVersion Duplicates",
        "description": "**depth** can be provided to request your **workflowVersion**",
        "operationId": "findWorkflowVersionDuplicates",
        "parameters": [
          {
            "$ref": "#/components/parameters/depth"
          }
        ],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/WorkflowVersion"
                    }
                  },
                  "ids": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "uuid"
                    }
                  }
                },
                "example": {
                  "ids": [
                    "a55a1a98-89e5-4804-bf74-990ebd797acf"
                  ]
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "totalCount": {
                            "type": "number"
                          },
                          "pageInfo": {
                            "type": "object",
                            "properties": {
                              "hasNextPage": {
                                "type": "boolean"
                              },
                              "startCursor": {
                                "type": "string",
                                "format": "uuid"
                              },
                              "endCursor": {
                                "type": "string",
                                "format": "uuid"
                              }
                            }
                          },
                          "workflowVersionDuplicates": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/WorkflowVersionForResponse"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/workspaceMembers": {
      "get": {
        "tags": [
          "workspaceMembers"
        ],
        "summary": "Find Many workspaceMembers",
        "description": "**order_by**, **filter**, **limit**, **depth**, **starting_after** or **ending_before** can be provided to request your **workspaceMembers**",
        "operationId": "findManyWorkspaceMembers",
        "parameters": [
          {
            "$ref": "#/components/parameters/orderBy"
          },
          {
            "$ref": "#/components/parameters/filter"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/depth"
          },
          {
            "$ref": "#/components/parameters/startingAfter"
          },
          {
            "$ref": "#/components/parameters/endingBefore"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "workspaceMembers": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/WorkspaceMemberForResponse"
                          }
                        }
                      }
                    },
                    "pageInfo": {
                      "type": "object",
                      "properties": {
                        "hasNextPage": {
                          "type": "boolean"
                        },
                        "startCursor": {
                          "type": "string",
                          "format": "uuid"
                        },
                        "endCursor": {
                          "type": "string",
                          "format": "uuid"
                        }
                      }
                    },
                    "totalCount": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      },
      "post": {
        "tags": [
          "workspaceMembers"
        ],
        "summary": "Create One workspaceMember",
        "operationId": "createOneWorkspaceMember",
        "parameters": [
          {
            "$ref": "#/components/parameters/depth"
          }
        ],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WorkspaceMember"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "createWorkspaceMember": {
                          "$ref": "#/components/schemas/WorkspaceMemberForResponse"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/batch/workspaceMembers": {
      "post": {
        "tags": [
          "workspaceMembers"
        ],
        "summary": "Create Many workspaceMembers",
        "operationId": "createManyWorkspaceMembers",
        "parameters": [
          {
            "$ref": "#/components/parameters/depth"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/WorkspaceMember"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "createWorkspaceMembers": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/WorkspaceMemberForResponse"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/workspaceMembers/{id}": {
      "get": {
        "tags": [
          "workspaceMembers"
        ],
        "summary": "Find One workspaceMember",
        "description": "**depth** can be provided to request your **workspaceMember**",
        "operationId": "findOneWorkspaceMember",
        "parameters": [
          {
            "$ref": "#/components/parameters/idPath"
          },
          {
            "$ref": "#/components/parameters/depth"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "workspaceMember": {
                          "$ref": "#/components/schemas/WorkspaceMemberForResponse"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      },
      "delete": {
        "tags": [
          "workspaceMembers"
        ],
        "summary": "Delete One workspaceMember",
        "operationId": "deleteOneWorkspaceMember",
        "parameters": [
          {
            "$ref": "#/components/parameters/idPath"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "deleteWorkspaceMember": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string",
                              "format": "uuid"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      },
      "patch": {
        "tags": [
          "workspaceMembers"
        ],
        "summary": "Update One workspaceMember",
        "operationId": "UpdateOneWorkspaceMember",
        "parameters": [
          {
            "$ref": "#/components/parameters/idPath"
          },
          {
            "$ref": "#/components/parameters/depth"
          }
        ],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WorkspaceMemberForUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "updateWorkspaceMember": {
                          "$ref": "#/components/schemas/WorkspaceMemberForResponse"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/workspaceMembers/duplicates": {
      "post": {
        "tags": [
          "workspaceMembers"
        ],
        "summary": "Find workspaceMember Duplicates",
        "description": "**depth** can be provided to request your **workspaceMember**",
        "operationId": "findWorkspaceMemberDuplicates",
        "parameters": [
          {
            "$ref": "#/components/parameters/depth"
          }
        ],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/WorkspaceMember"
                    }
                  },
                  "ids": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "uuid"
                    }
                  }
                },
                "example": {
                  "ids": [
                    "6415013b-ca6d-47a6-a713-cb385f1b2128"
                  ]
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "totalCount": {
                            "type": "number"
                          },
                          "pageInfo": {
                            "type": "object",
                            "properties": {
                              "hasNextPage": {
                                "type": "boolean"
                              },
                              "startCursor": {
                                "type": "string",
                                "format": "uuid"
                              },
                              "endCursor": {
                                "type": "string",
                                "format": "uuid"
                              }
                            }
                          },
                          "workspaceMemberDuplicates": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/WorkspaceMemberForResponse"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    }
  },
  "webhooks": {
    "Attachment Created": {
      "post": {
        "tags": [
          "attachment"
        ],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": {
              "type": "string"
            },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": {
              "type": "string"
            },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": {
              "type": "string"
            },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": {
                    "type": "string",
                    "example": "https://example.com/incomingWebhook"
                  },
                  "eventName": {
                    "type": "string",
                    "example": "attachment.created"
                  },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "example": "370985db-22d8-4463-8e5f-2271d30913bd"
                      },
                      "nameSingular": {
                        "type": "string",
                        "enum": [
                          "attachment"
                        ]
                      }
                    }
                  },
                  "workspaceId": {
                    "type": "string",
                    "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
                  },
                  "webhookId": {
                    "type": "string",
                    "example": "90056586-1228-4e03-a507-70140aa85c05"
                  },
                  "eventDate": {
                    "type": "string",
                    "example": "2024-02-14T11:27:01.779Z"
                  },
                  "record": {
                    "$ref": "#/components/schemas/AttachmentForResponse"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        }
      }
    },
    "Attachment Updated": {
      "post": {
        "tags": [
          "attachment"
        ],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": {
              "type": "string"
            },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": {
              "type": "string"
            },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": {
              "type": "string"
            },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": {
                    "type": "string",
                    "example": "https://example.com/incomingWebhook"
                  },
                  "eventName": {
                    "type": "string",
                    "example": "attachment.updated"
                  },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "example": "370985db-22d8-4463-8e5f-2271d30913bd"
                      },
                      "nameSingular": {
                        "type": "string",
                        "enum": [
                          "attachment"
                        ]
                      }
                    }
                  },
                  "workspaceId": {
                    "type": "string",
                    "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
                  },
                  "webhookId": {
                    "type": "string",
                    "example": "90056586-1228-4e03-a507-70140aa85c05"
                  },
                  "eventDate": {
                    "type": "string",
                    "example": "2024-02-14T11:27:01.779Z"
                  },
                  "record": {
                    "$ref": "#/components/schemas/AttachmentForResponse"
                  },
                  "updatedFields": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        }
      }
    },
    "Attachment Deleted": {
      "post": {
        "tags": [
          "attachment"
        ],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": {
              "type": "string"
            },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": {
              "type": "string"
            },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": {
              "type": "string"
            },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": {
                    "type": "string",
                    "example": "https://example.com/incomingWebhook"
                  },
                  "eventName": {
                    "type": "string",
                    "example": "attachment.deleted"
                  },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "example": "370985db-22d8-4463-8e5f-2271d30913bd"
                      },
                      "nameSingular": {
                        "type": "string",
                        "enum": [
                          "attachment"
                        ]
                      }
                    }
                  },
                  "workspaceId": {
                    "type": "string",
                    "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
                  },
                  "webhookId": {
                    "type": "string",
                    "example": "90056586-1228-4e03-a507-70140aa85c05"
                  },
                  "eventDate": {
                    "type": "string",
                    "example": "2024-02-14T11:27:01.779Z"
                  },
                  "record": {
                    "$ref": "#/components/schemas/AttachmentForResponse"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        }
      }
    },
    "Blocklist Created": {
      "post": {
        "tags": [
          "blocklist"
        ],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": {
              "type": "string"
            },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": {
              "type": "string"
            },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": {
              "type": "string"
            },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": {
                    "type": "string",
                    "example": "https://example.com/incomingWebhook"
                  },
                  "eventName": {
                    "type": "string",
                    "example": "blocklist.created"
                  },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "example": "370985db-22d8-4463-8e5f-2271d30913bd"
                      },
                      "nameSingular": {
                        "type": "string",
                        "enum": [
                          "blocklist"
                        ]
                      }
                    }
                  },
                  "workspaceId": {
                    "type": "string",
                    "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
                  },
                  "webhookId": {
                    "type": "string",
                    "example": "90056586-1228-4e03-a507-70140aa85c05"
                  },
                  "eventDate": {
                    "type": "string",
                    "example": "2024-02-14T11:27:01.779Z"
                  },
                  "record": {
                    "$ref": "#/components/schemas/BlocklistForResponse"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        }
      }
    },
    "Blocklist Updated": {
      "post": {
        "tags": [
          "blocklist"
        ],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": {
              "type": "string"
            },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": {
              "type": "string"
            },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": {
              "type": "string"
            },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": {
                    "type": "string",
                    "example": "https://example.com/incomingWebhook"
                  },
                  "eventName": {
                    "type": "string",
                    "example": "blocklist.updated"
                  },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "example": "370985db-22d8-4463-8e5f-2271d30913bd"
                      },
                      "nameSingular": {
                        "type": "string",
                        "enum": [
                          "blocklist"
                        ]
                      }
                    }
                  },
                  "workspaceId": {
                    "type": "string",
                    "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
                  },
                  "webhookId": {
                    "type": "string",
                    "example": "90056586-1228-4e03-a507-70140aa85c05"
                  },
                  "eventDate": {
                    "type": "string",
                    "example": "2024-02-14T11:27:01.779Z"
                  },
                  "record": {
                    "$ref": "#/components/schemas/BlocklistForResponse"
                  },
                  "updatedFields": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        }
      }
    },
    "Blocklist Deleted": {
      "post": {
        "tags": [
          "blocklist"
        ],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": {
              "type": "string"
            },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": {
              "type": "string"
            },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": {
              "type": "string"
            },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": {
                    "type": "string",
                    "example": "https://example.com/incomingWebhook"
                  },
                  "eventName": {
                    "type": "string",
                    "example": "blocklist.deleted"
                  },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "example": "370985db-22d8-4463-8e5f-2271d30913bd"
                      },
                      "nameSingular": {
                        "type": "string",
                        "enum": [
                          "blocklist"
                        ]
                      }
                    }
                  },
                  "workspaceId": {
                    "type": "string",
                    "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
                  },
                  "webhookId": {
                    "type": "string",
                    "example": "90056586-1228-4e03-a507-70140aa85c05"
                  },
                  "eventDate": {
                    "type": "string",
                    "example": "2024-02-14T11:27:01.779Z"
                  },
                  "record": {
                    "$ref": "#/components/schemas/BlocklistForResponse"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        }
      }
    },
    "CalendarChannelEventAssociation Created": {
      "post": {
        "tags": [
          "calendarChannelEventAssociation"
        ],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": {
              "type": "string"
            },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": {
              "type": "string"
            },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": {
              "type": "string"
            },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": {
                    "type": "string",
                    "example": "https://example.com/incomingWebhook"
                  },
                  "eventName": {
                    "type": "string",
                    "example": "calendarChannelEventAssociation.created"
                  },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "example": "370985db-22d8-4463-8e5f-2271d30913bd"
                      },
                      "nameSingular": {
                        "type": "string",
                        "enum": [
                          "calendarChannelEventAssociation"
                        ]
                      }
                    }
                  },
                  "workspaceId": {
                    "type": "string",
                    "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
                  },
                  "webhookId": {
                    "type": "string",
                    "example": "90056586-1228-4e03-a507-70140aa85c05"
                  },
                  "eventDate": {
                    "type": "string",
                    "example": "2024-02-14T11:27:01.779Z"
                  },
                  "record": {
                    "$ref": "#/components/schemas/CalendarChannelEventAssociationForResponse"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        }
      }
    },
    "CalendarChannelEventAssociation Updated": {
      "post": {
        "tags": [
          "calendarChannelEventAssociation"
        ],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": {
              "type": "string"
            },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": {
              "type": "string"
            },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": {
              "type": "string"
            },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": {
                    "type": "string",
                    "example": "https://example.com/incomingWebhook"
                  },
                  "eventName": {
                    "type": "string",
                    "example": "calendarChannelEventAssociation.updated"
                  },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "example": "370985db-22d8-4463-8e5f-2271d30913bd"
                      },
                      "nameSingular": {
                        "type": "string",
                        "enum": [
                          "calendarChannelEventAssociation"
                        ]
                      }
                    }
                  },
                  "workspaceId": {
                    "type": "string",
                    "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
                  },
                  "webhookId": {
                    "type": "string",
                    "example": "90056586-1228-4e03-a507-70140aa85c05"
                  },
                  "eventDate": {
                    "type": "string",
                    "example": "2024-02-14T11:27:01.779Z"
                  },
                  "record": {
                    "$ref": "#/components/schemas/CalendarChannelEventAssociationForResponse"
                  },
                  "updatedFields": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        }
      }
    },
    "CalendarChannelEventAssociation Deleted": {
      "post": {
        "tags": [
          "calendarChannelEventAssociation"
        ],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": {
              "type": "string"
            },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": {
              "type": "string"
            },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": {
              "type": "string"
            },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": {
                    "type": "string",
                    "example": "https://example.com/incomingWebhook"
                  },
                  "eventName": {
                    "type": "string",
                    "example": "calendarChannelEventAssociation.deleted"
                  },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "example": "370985db-22d8-4463-8e5f-2271d30913bd"
                      },
                      "nameSingular": {
                        "type": "string",
                        "enum": [
                          "calendarChannelEventAssociation"
                        ]
                      }
                    }
                  },
                  "workspaceId": {
                    "type": "string",
                    "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
                  },
                  "webhookId": {
                    "type": "string",
                    "example": "90056586-1228-4e03-a507-70140aa85c05"
                  },
                  "eventDate": {
                    "type": "string",
                    "example": "2024-02-14T11:27:01.779Z"
                  },
                  "record": {
                    "$ref": "#/components/schemas/CalendarChannelEventAssociationForResponse"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        }
      }
    },
    "CalendarChannel Created": {
      "post": {
        "tags": [
          "calendarChannel"
        ],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": {
              "type": "string"
            },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": {
              "type": "string"
            },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": {
              "type": "string"
            },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": {
                    "type": "string",
                    "example": "https://example.com/incomingWebhook"
                  },
                  "eventName": {
                    "type": "string",
                    "example": "calendarChannel.created"
                  },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "example": "370985db-22d8-4463-8e5f-2271d30913bd"
                      },
                      "nameSingular": {
                        "type": "string",
                        "enum": [
                          "calendarChannel"
                        ]
                      }
                    }
                  },
                  "workspaceId": {
                    "type": "string",
                    "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
                  },
                  "webhookId": {
                    "type": "string",
                    "example": "90056586-1228-4e03-a507-70140aa85c05"
                  },
                  "eventDate": {
                    "type": "string",
                    "example": "2024-02-14T11:27:01.779Z"
                  },
                  "record": {
                    "$ref": "#/components/schemas/CalendarChannelForResponse"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        }
      }
    },
    "CalendarChannel Updated": {
      "post": {
        "tags": [
          "calendarChannel"
        ],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": {
              "type": "string"
            },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": {
              "type": "string"
            },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": {
              "type": "string"
            },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": {
                    "type": "string",
                    "example": "https://example.com/incomingWebhook"
                  },
                  "eventName": {
                    "type": "string",
                    "example": "calendarChannel.updated"
                  },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "example": "370985db-22d8-4463-8e5f-2271d30913bd"
                      },
                      "nameSingular": {
                        "type": "string",
                        "enum": [
                          "calendarChannel"
                        ]
                      }
                    }
                  },
                  "workspaceId": {
                    "type": "string",
                    "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
                  },
                  "webhookId": {
                    "type": "string",
                    "example": "90056586-1228-4e03-a507-70140aa85c05"
                  },
                  "eventDate": {
                    "type": "string",
                    "example": "2024-02-14T11:27:01.779Z"
                  },
                  "record": {
                    "$ref": "#/components/schemas/CalendarChannelForResponse"
                  },
                  "updatedFields": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        }
      }
    },
    "CalendarChannel Deleted": {
      "post": {
        "tags": [
          "calendarChannel"
        ],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": {
              "type": "string"
            },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": {
              "type": "string"
            },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": {
              "type": "string"
            },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": {
                    "type": "string",
                    "example": "https://example.com/incomingWebhook"
                  },
                  "eventName": {
                    "type": "string",
                    "example": "calendarChannel.deleted"
                  },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "example": "370985db-22d8-4463-8e5f-2271d30913bd"
                      },
                      "nameSingular": {
                        "type": "string",
                        "enum": [
                          "calendarChannel"
                        ]
                      }
                    }
                  },
                  "workspaceId": {
                    "type": "string",
                    "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
                  },
                  "webhookId": {
                    "type": "string",
                    "example": "90056586-1228-4e03-a507-70140aa85c05"
                  },
                  "eventDate": {
                    "type": "string",
                    "example": "2024-02-14T11:27:01.779Z"
                  },
                  "record": {
                    "$ref": "#/components/schemas/CalendarChannelForResponse"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        }
      }
    },
    "CalendarEventParticipant Created": {
      "post": {
        "tags": [
          "calendarEventParticipant"
        ],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": {
              "type": "string"
            },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": {
              "type": "string"
            },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": {
              "type": "string"
            },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": {
                    "type": "string",
                    "example": "https://example.com/incomingWebhook"
                  },
                  "eventName": {
                    "type": "string",
                    "example": "calendarEventParticipant.created"
                  },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "example": "370985db-22d8-4463-8e5f-2271d30913bd"
                      },
                      "nameSingular": {
                        "type": "string",
                        "enum": [
                          "calendarEventParticipant"
                        ]
                      }
                    }
                  },
                  "workspaceId": {
                    "type": "string",
                    "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
                  },
                  "webhookId": {
                    "type": "string",
                    "example": "90056586-1228-4e03-a507-70140aa85c05"
                  },
                  "eventDate": {
                    "type": "string",
                    "example": "2024-02-14T11:27:01.779Z"
                  },
                  "record": {
                    "$ref": "#/components/schemas/CalendarEventParticipantForResponse"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        }
      }
    },
    "CalendarEventParticipant Updated": {
      "post": {
        "tags": [
          "calendarEventParticipant"
        ],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": {
              "type": "string"
            },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": {
              "type": "string"
            },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": {
              "type": "string"
            },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": {
                    "type": "string",
                    "example": "https://example.com/incomingWebhook"
                  },
                  "eventName": {
                    "type": "string",
                    "example": "calendarEventParticipant.updated"
                  },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "example": "370985db-22d8-4463-8e5f-2271d30913bd"
                      },
                      "nameSingular": {
                        "type": "string",
                        "enum": [
                          "calendarEventParticipant"
                        ]
                      }
                    }
                  },
                  "workspaceId": {
                    "type": "string",
                    "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
                  },
                  "webhookId": {
                    "type": "string",
                    "example": "90056586-1228-4e03-a507-70140aa85c05"
                  },
                  "eventDate": {
                    "type": "string",
                    "example": "2024-02-14T11:27:01.779Z"
                  },
                  "record": {
                    "$ref": "#/components/schemas/CalendarEventParticipantForResponse"
                  },
                  "updatedFields": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        }
      }
    },
    "CalendarEventParticipant Deleted": {
      "post": {
        "tags": [
          "calendarEventParticipant"
        ],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": {
              "type": "string"
            },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": {
              "type": "string"
            },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": {
              "type": "string"
            },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": {
                    "type": "string",
                    "example": "https://example.com/incomingWebhook"
                  },
                  "eventName": {
                    "type": "string",
                    "example": "calendarEventParticipant.deleted"
                  },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "example": "370985db-22d8-4463-8e5f-2271d30913bd"
                      },
                      "nameSingular": {
                        "type": "string",
                        "enum": [
                          "calendarEventParticipant"
                        ]
                      }
                    }
                  },
                  "workspaceId": {
                    "type": "string",
                    "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
                  },
                  "webhookId": {
                    "type": "string",
                    "example": "90056586-1228-4e03-a507-70140aa85c05"
                  },
                  "eventDate": {
                    "type": "string",
                    "example": "2024-02-14T11:27:01.779Z"
                  },
                  "record": {
                    "$ref": "#/components/schemas/CalendarEventParticipantForResponse"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        }
      }
    },
    "CalendarEvent Created": {
      "post": {
        "tags": [
          "calendarEvent"
        ],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": {
              "type": "string"
            },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": {
              "type": "string"
            },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": {
              "type": "string"
            },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": {
                    "type": "string",
                    "example": "https://example.com/incomingWebhook"
                  },
                  "eventName": {
                    "type": "string",
                    "example": "calendarEvent.created"
                  },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "example": "370985db-22d8-4463-8e5f-2271d30913bd"
                      },
                      "nameSingular": {
                        "type": "string",
                        "enum": [
                          "calendarEvent"
                        ]
                      }
                    }
                  },
                  "workspaceId": {
                    "type": "string",
                    "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
                  },
                  "webhookId": {
                    "type": "string",
                    "example": "90056586-1228-4e03-a507-70140aa85c05"
                  },
                  "eventDate": {
                    "type": "string",
                    "example": "2024-02-14T11:27:01.779Z"
                  },
                  "record": {
                    "$ref": "#/components/schemas/CalendarEventForResponse"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        }
      }
    },
    "CalendarEvent Updated": {
      "post": {
        "tags": [
          "calendarEvent"
        ],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": {
              "type": "string"
            },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": {
              "type": "string"
            },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": {
              "type": "string"
            },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": {
                    "type": "string",
                    "example": "https://example.com/incomingWebhook"
                  },
                  "eventName": {
                    "type": "string",
                    "example": "calendarEvent.updated"
                  },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "example": "370985db-22d8-4463-8e5f-2271d30913bd"
                      },
                      "nameSingular": {
                        "type": "string",
                        "enum": [
                          "calendarEvent"
                        ]
                      }
                    }
                  },
                  "workspaceId": {
                    "type": "string",
                    "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
                  },
                  "webhookId": {
                    "type": "string",
                    "example": "90056586-1228-4e03-a507-70140aa85c05"
                  },
                  "eventDate": {
                    "type": "string",
                    "example": "2024-02-14T11:27:01.779Z"
                  },
                  "record": {
                    "$ref": "#/components/schemas/CalendarEventForResponse"
                  },
                  "updatedFields": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        }
      }
    },
    "CalendarEvent Deleted": {
      "post": {
        "tags": [
          "calendarEvent"
        ],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": {
              "type": "string"
            },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": {
              "type": "string"
            },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": {
              "type": "string"
            },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": {
                    "type": "string",
                    "example": "https://example.com/incomingWebhook"
                  },
                  "eventName": {
                    "type": "string",
                    "example": "calendarEvent.deleted"
                  },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "example": "370985db-22d8-4463-8e5f-2271d30913bd"
                      },
                      "nameSingular": {
                        "type": "string",
                        "enum": [
                          "calendarEvent"
                        ]
                      }
                    }
                  },
                  "workspaceId": {
                    "type": "string",
                    "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
                  },
                  "webhookId": {
                    "type": "string",
                    "example": "90056586-1228-4e03-a507-70140aa85c05"
                  },
                  "eventDate": {
                    "type": "string",
                    "example": "2024-02-14T11:27:01.779Z"
                  },
                  "record": {
                    "$ref": "#/components/schemas/CalendarEventForResponse"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        }
      }
    },
    "Company Created": {
      "post": {
        "tags": [
          "company"
        ],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": {
              "type": "string"
            },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": {
              "type": "string"
            },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": {
              "type": "string"
            },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": {
                    "type": "string",
                    "example": "https://example.com/incomingWebhook"
                  },
                  "eventName": {
                    "type": "string",
                    "example": "company.created"
                  },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "example": "370985db-22d8-4463-8e5f-2271d30913bd"
                      },
                      "nameSingular": {
                        "type": "string",
                        "enum": [
                          "company"
                        ]
                      }
                    }
                  },
                  "workspaceId": {
                    "type": "string",
                    "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
                  },
                  "webhookId": {
                    "type": "string",
                    "example": "90056586-1228-4e03-a507-70140aa85c05"
                  },
                  "eventDate": {
                    "type": "string",
                    "example": "2024-02-14T11:27:01.779Z"
                  },
                  "record": {
                    "$ref": "#/components/schemas/CompanyForResponse"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        }
      }
    },
    "Company Updated": {
      "post": {
        "tags": [
          "company"
        ],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": {
              "type": "string"
            },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": {
              "type": "string"
            },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": {
              "type": "string"
            },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": {
                    "type": "string",
                    "example": "https://example.com/incomingWebhook"
                  },
                  "eventName": {
                    "type": "string",
                    "example": "company.updated"
                  },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "example": "370985db-22d8-4463-8e5f-2271d30913bd"
                      },
                      "nameSingular": {
                        "type": "string",
                        "enum": [
                          "company"
                        ]
                      }
                    }
                  },
                  "workspaceId": {
                    "type": "string",
                    "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
                  },
                  "webhookId": {
                    "type": "string",
                    "example": "90056586-1228-4e03-a507-70140aa85c05"
                  },
                  "eventDate": {
                    "type": "string",
                    "example": "2024-02-14T11:27:01.779Z"
                  },
                  "record": {
                    "$ref": "#/components/schemas/CompanyForResponse"
                  },
                  "updatedFields": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        }
      }
    },
    "Company Deleted": {
      "post": {
        "tags": [
          "company"
        ],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": {
              "type": "string"
            },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": {
              "type": "string"
            },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": {
              "type": "string"
            },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": {
                    "type": "string",
                    "example": "https://example.com/incomingWebhook"
                  },
                  "eventName": {
                    "type": "string",
                    "example": "company.deleted"
                  },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "example": "370985db-22d8-4463-8e5f-2271d30913bd"
                      },
                      "nameSingular": {
                        "type": "string",
                        "enum": [
                          "company"
                        ]
                      }
                    }
                  },
                  "workspaceId": {
                    "type": "string",
                    "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
                  },
                  "webhookId": {
                    "type": "string",
                    "example": "90056586-1228-4e03-a507-70140aa85c05"
                  },
                  "eventDate": {
                    "type": "string",
                    "example": "2024-02-14T11:27:01.779Z"
                  },
                  "record": {
                    "$ref": "#/components/schemas/CompanyForResponse"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        }
      }
    },
    "ConnectedAccount Created": {
      "post": {
        "tags": [
          "connectedAccount"
        ],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": {
              "type": "string"
            },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": {
              "type": "string"
            },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": {
              "type": "string"
            },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": {
                    "type": "string",
                    "example": "https://example.com/incomingWebhook"
                  },
                  "eventName": {
                    "type": "string",
                    "example": "connectedAccount.created"
                  },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "example": "370985db-22d8-4463-8e5f-2271d30913bd"
                      },
                      "nameSingular": {
                        "type": "string",
                        "enum": [
                          "connectedAccount"
                        ]
                      }
                    }
                  },
                  "workspaceId": {
                    "type": "string",
                    "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
                  },
                  "webhookId": {
                    "type": "string",
                    "example": "90056586-1228-4e03-a507-70140aa85c05"
                  },
                  "eventDate": {
                    "type": "string",
                    "example": "2024-02-14T11:27:01.779Z"
                  },
                  "record": {
                    "$ref": "#/components/schemas/ConnectedAccountForResponse"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        }
      }
    },
    "ConnectedAccount Updated": {
      "post": {
        "tags": [
          "connectedAccount"
        ],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": {
              "type": "string"
            },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": {
              "type": "string"
            },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": {
              "type": "string"
            },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": {
                    "type": "string",
                    "example": "https://example.com/incomingWebhook"
                  },
                  "eventName": {
                    "type": "string",
                    "example": "connectedAccount.updated"
                  },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "example": "370985db-22d8-4463-8e5f-2271d30913bd"
                      },
                      "nameSingular": {
                        "type": "string",
                        "enum": [
                          "connectedAccount"
                        ]
                      }
                    }
                  },
                  "workspaceId": {
                    "type": "string",
                    "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
                  },
                  "webhookId": {
                    "type": "string",
                    "example": "90056586-1228-4e03-a507-70140aa85c05"
                  },
                  "eventDate": {
                    "type": "string",
                    "example": "2024-02-14T11:27:01.779Z"
                  },
                  "record": {
                    "$ref": "#/components/schemas/ConnectedAccountForResponse"
                  },
                  "updatedFields": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        }
      }
    },
    "ConnectedAccount Deleted": {
      "post": {
        "tags": [
          "connectedAccount"
        ],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": {
              "type": "string"
            },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": {
              "type": "string"
            },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": {
              "type": "string"
            },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": {
                    "type": "string",
                    "example": "https://example.com/incomingWebhook"
                  },
                  "eventName": {
                    "type": "string",
                    "example": "connectedAccount.deleted"
                  },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "example": "370985db-22d8-4463-8e5f-2271d30913bd"
                      },
                      "nameSingular": {
                        "type": "string",
                        "enum": [
                          "connectedAccount"
                        ]
                      }
                    }
                  },
                  "workspaceId": {
                    "type": "string",
                    "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
                  },
                  "webhookId": {
                    "type": "string",
                    "example": "90056586-1228-4e03-a507-70140aa85c05"
                  },
                  "eventDate": {
                    "type": "string",
                    "example": "2024-02-14T11:27:01.779Z"
                  },
                  "record": {
                    "$ref": "#/components/schemas/ConnectedAccountForResponse"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        }
      }
    },
    "FavoriteFolder Created": {
      "post": {
        "tags": [
          "favoriteFolder"
        ],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": {
              "type": "string"
            },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": {
              "type": "string"
            },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": {
              "type": "string"
            },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": {
                    "type": "string",
                    "example": "https://example.com/incomingWebhook"
                  },
                  "eventName": {
                    "type": "string",
                    "example": "favoriteFolder.created"
                  },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "example": "370985db-22d8-4463-8e5f-2271d30913bd"
                      },
                      "nameSingular": {
                        "type": "string",
                        "enum": [
                          "favoriteFolder"
                        ]
                      }
                    }
                  },
                  "workspaceId": {
                    "type": "string",
                    "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
                  },
                  "webhookId": {
                    "type": "string",
                    "example": "90056586-1228-4e03-a507-70140aa85c05"
                  },
                  "eventDate": {
                    "type": "string",
                    "example": "2024-02-14T11:27:01.779Z"
                  },
                  "record": {
                    "$ref": "#/components/schemas/FavoriteFolderForResponse"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        }
      }
    },
    "FavoriteFolder Updated": {
      "post": {
        "tags": [
          "favoriteFolder"
        ],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": {
              "type": "string"
            },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": {
              "type": "string"
            },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": {
              "type": "string"
            },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": {
                    "type": "string",
                    "example": "https://example.com/incomingWebhook"
                  },
                  "eventName": {
                    "type": "string",
                    "example": "favoriteFolder.updated"
                  },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "example": "370985db-22d8-4463-8e5f-2271d30913bd"
                      },
                      "nameSingular": {
                        "type": "string",
                        "enum": [
                          "favoriteFolder"
                        ]
                      }
                    }
                  },
                  "workspaceId": {
                    "type": "string",
                    "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
                  },
                  "webhookId": {
                    "type": "string",
                    "example": "90056586-1228-4e03-a507-70140aa85c05"
                  },
                  "eventDate": {
                    "type": "string",
                    "example": "2024-02-14T11:27:01.779Z"
                  },
                  "record": {
                    "$ref": "#/components/schemas/FavoriteFolderForResponse"
                  },
                  "updatedFields": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        }
      }
    },
    "FavoriteFolder Deleted": {
      "post": {
        "tags": [
          "favoriteFolder"
        ],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": {
              "type": "string"
            },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": {
              "type": "string"
            },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": {
              "type": "string"
            },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": {
                    "type": "string",
                    "example": "https://example.com/incomingWebhook"
                  },
                  "eventName": {
                    "type": "string",
                    "example": "favoriteFolder.deleted"
                  },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "example": "370985db-22d8-4463-8e5f-2271d30913bd"
                      },
                      "nameSingular": {
                        "type": "string",
                        "enum": [
                          "favoriteFolder"
                        ]
                      }
                    }
                  },
                  "workspaceId": {
                    "type": "string",
                    "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
                  },
                  "webhookId": {
                    "type": "string",
                    "example": "90056586-1228-4e03-a507-70140aa85c05"
                  },
                  "eventDate": {
                    "type": "string",
                    "example": "2024-02-14T11:27:01.779Z"
                  },
                  "record": {
                    "$ref": "#/components/schemas/FavoriteFolderForResponse"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        }
      }
    },
    "Favorite Created": {
      "post": {
        "tags": [
          "favorite"
        ],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": {
              "type": "string"
            },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": {
              "type": "string"
            },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": {
              "type": "string"
            },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": {
                    "type": "string",
                    "example": "https://example.com/incomingWebhook"
                  },
                  "eventName": {
                    "type": "string",
                    "example": "favorite.created"
                  },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "example": "370985db-22d8-4463-8e5f-2271d30913bd"
                      },
                      "nameSingular": {
                        "type": "string",
                        "enum": [
                          "favorite"
                        ]
                      }
                    }
                  },
                  "workspaceId": {
                    "type": "string",
                    "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
                  },
                  "webhookId": {
                    "type": "string",
                    "example": "90056586-1228-4e03-a507-70140aa85c05"
                  },
                  "eventDate": {
                    "type": "string",
                    "example": "2024-02-14T11:27:01.779Z"
                  },
                  "record": {
                    "$ref": "#/components/schemas/FavoriteForResponse"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        }
      }
    },
    "Favorite Updated": {
      "post": {
        "tags": [
          "favorite"
        ],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": {
              "type": "string"
            },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": {
              "type": "string"
            },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": {
              "type": "string"
            },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": {
                    "type": "string",
                    "example": "https://example.com/incomingWebhook"
                  },
                  "eventName": {
                    "type": "string",
                    "example": "favorite.updated"
                  },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "example": "370985db-22d8-4463-8e5f-2271d30913bd"
                      },
                      "nameSingular": {
                        "type": "string",
                        "enum": [
                          "favorite"
                        ]
                      }
                    }
                  },
                  "workspaceId": {
                    "type": "string",
                    "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
                  },
                  "webhookId": {
                    "type": "string",
                    "example": "90056586-1228-4e03-a507-70140aa85c05"
                  },
                  "eventDate": {
                    "type": "string",
                    "example": "2024-02-14T11:27:01.779Z"
                  },
                  "record": {
                    "$ref": "#/components/schemas/FavoriteForResponse"
                  },
                  "updatedFields": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        }
      }
    },
    "Favorite Deleted": {
      "post": {
        "tags": [
          "favorite"
        ],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": {
              "type": "string"
            },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": {
              "type": "string"
            },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": {
              "type": "string"
            },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": {
                    "type": "string",
                    "example": "https://example.com/incomingWebhook"
                  },
                  "eventName": {
                    "type": "string",
                    "example": "favorite.deleted"
                  },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "example": "370985db-22d8-4463-8e5f-2271d30913bd"
                      },
                      "nameSingular": {
                        "type": "string",
                        "enum": [
                          "favorite"
                        ]
                      }
                    }
                  },
                  "workspaceId": {
                    "type": "string",
                    "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
                  },
                  "webhookId": {
                    "type": "string",
                    "example": "90056586-1228-4e03-a507-70140aa85c05"
                  },
                  "eventDate": {
                    "type": "string",
                    "example": "2024-02-14T11:27:01.779Z"
                  },
                  "record": {
                    "$ref": "#/components/schemas/FavoriteForResponse"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        }
      }
    },
    "LeadsLinkedinScraping Created": {
      "post": {
        "tags": [
          "leadsLinkedinScraping"
        ],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": {
              "type": "string"
            },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": {
              "type": "string"
            },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": {
              "type": "string"
            },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": {
                    "type": "string",
                    "example": "https://example.com/incomingWebhook"
                  },
                  "eventName": {
                    "type": "string",
                    "example": "leadsLinkedinScraping.created"
                  },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "example": "370985db-22d8-4463-8e5f-2271d30913bd"
                      },
                      "nameSingular": {
                        "type": "string",
                        "enum": [
                          "leadsLinkedinScraping"
                        ]
                      }
                    }
                  },
                  "workspaceId": {
                    "type": "string",
                    "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
                  },
                  "webhookId": {
                    "type": "string",
                    "example": "90056586-1228-4e03-a507-70140aa85c05"
                  },
                  "eventDate": {
                    "type": "string",
                    "example": "2024-02-14T11:27:01.779Z"
                  },
                  "record": {
                    "$ref": "#/components/schemas/LeadsLinkedinScrapingForResponse"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        }
      }
    },
    "LeadsLinkedinScraping Updated": {
      "post": {
        "tags": [
          "leadsLinkedinScraping"
        ],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": {
              "type": "string"
            },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": {
              "type": "string"
            },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": {
              "type": "string"
            },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": {
                    "type": "string",
                    "example": "https://example.com/incomingWebhook"
                  },
                  "eventName": {
                    "type": "string",
                    "example": "leadsLinkedinScraping.updated"
                  },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "example": "370985db-22d8-4463-8e5f-2271d30913bd"
                      },
                      "nameSingular": {
                        "type": "string",
                        "enum": [
                          "leadsLinkedinScraping"
                        ]
                      }
                    }
                  },
                  "workspaceId": {
                    "type": "string",
                    "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
                  },
                  "webhookId": {
                    "type": "string",
                    "example": "90056586-1228-4e03-a507-70140aa85c05"
                  },
                  "eventDate": {
                    "type": "string",
                    "example": "2024-02-14T11:27:01.779Z"
                  },
                  "record": {
                    "$ref": "#/components/schemas/LeadsLinkedinScrapingForResponse"
                  },
                  "updatedFields": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        }
      }
    },
    "LeadsLinkedinScraping Deleted": {
      "post": {
        "tags": [
          "leadsLinkedinScraping"
        ],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": {
              "type": "string"
            },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": {
              "type": "string"
            },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": {
              "type": "string"
            },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": {
                    "type": "string",
                    "example": "https://example.com/incomingWebhook"
                  },
                  "eventName": {
                    "type": "string",
                    "example": "leadsLinkedinScraping.deleted"
                  },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "example": "370985db-22d8-4463-8e5f-2271d30913bd"
                      },
                      "nameSingular": {
                        "type": "string",
                        "enum": [
                          "leadsLinkedinScraping"
                        ]
                      }
                    }
                  },
                  "workspaceId": {
                    "type": "string",
                    "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
                  },
                  "webhookId": {
                    "type": "string",
                    "example": "90056586-1228-4e03-a507-70140aa85c05"
                  },
                  "eventDate": {
                    "type": "string",
                    "example": "2024-02-14T11:27:01.779Z"
                  },
                  "record": {
                    "$ref": "#/components/schemas/LeadsLinkedinScrapingForResponse"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        }
      }
    },
    "MessageChannelMessageAssociation Created": {
      "post": {
        "tags": [
          "messageChannelMessageAssociation"
        ],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": {
              "type": "string"
            },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": {
              "type": "string"
            },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": {
              "type": "string"
            },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": {
                    "type": "string",
                    "example": "https://example.com/incomingWebhook"
                  },
                  "eventName": {
                    "type": "string",
                    "example": "messageChannelMessageAssociation.created"
                  },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "example": "370985db-22d8-4463-8e5f-2271d30913bd"
                      },
                      "nameSingular": {
                        "type": "string",
                        "enum": [
                          "messageChannelMessageAssociation"
                        ]
                      }
                    }
                  },
                  "workspaceId": {
                    "type": "string",
                    "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
                  },
                  "webhookId": {
                    "type": "string",
                    "example": "90056586-1228-4e03-a507-70140aa85c05"
                  },
                  "eventDate": {
                    "type": "string",
                    "example": "2024-02-14T11:27:01.779Z"
                  },
                  "record": {
                    "$ref": "#/components/schemas/MessageChannelMessageAssociationForResponse"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        }
      }
    },
    "MessageChannelMessageAssociation Updated": {
      "post": {
        "tags": [
          "messageChannelMessageAssociation"
        ],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": {
              "type": "string"
            },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": {
              "type": "string"
            },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": {
              "type": "string"
            },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": {
                    "type": "string",
                    "example": "https://example.com/incomingWebhook"
                  },
                  "eventName": {
                    "type": "string",
                    "example": "messageChannelMessageAssociation.updated"
                  },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "example": "370985db-22d8-4463-8e5f-2271d30913bd"
                      },
                      "nameSingular": {
                        "type": "string",
                        "enum": [
                          "messageChannelMessageAssociation"
                        ]
                      }
                    }
                  },
                  "workspaceId": {
                    "type": "string",
                    "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
                  },
                  "webhookId": {
                    "type": "string",
                    "example": "90056586-1228-4e03-a507-70140aa85c05"
                  },
                  "eventDate": {
                    "type": "string",
                    "example": "2024-02-14T11:27:01.779Z"
                  },
                  "record": {
                    "$ref": "#/components/schemas/MessageChannelMessageAssociationForResponse"
                  },
                  "updatedFields": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        }
      }
    },
    "MessageChannelMessageAssociation Deleted": {
      "post": {
        "tags": [
          "messageChannelMessageAssociation"
        ],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": {
              "type": "string"
            },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": {
              "type": "string"
            },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": {
              "type": "string"
            },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": {
                    "type": "string",
                    "example": "https://example.com/incomingWebhook"
                  },
                  "eventName": {
                    "type": "string",
                    "example": "messageChannelMessageAssociation.deleted"
                  },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "example": "370985db-22d8-4463-8e5f-2271d30913bd"
                      },
                      "nameSingular": {
                        "type": "string",
                        "enum": [
                          "messageChannelMessageAssociation"
                        ]
                      }
                    }
                  },
                  "workspaceId": {
                    "type": "string",
                    "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
                  },
                  "webhookId": {
                    "type": "string",
                    "example": "90056586-1228-4e03-a507-70140aa85c05"
                  },
                  "eventDate": {
                    "type": "string",
                    "example": "2024-02-14T11:27:01.779Z"
                  },
                  "record": {
                    "$ref": "#/components/schemas/MessageChannelMessageAssociationForResponse"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        }
      }
    },
    "MessageChannel Created": {
      "post": {
        "tags": [
          "messageChannel"
        ],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": {
              "type": "string"
            },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": {
              "type": "string"
            },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": {
              "type": "string"
            },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": {
                    "type": "string",
                    "example": "https://example.com/incomingWebhook"
                  },
                  "eventName": {
                    "type": "string",
                    "example": "messageChannel.created"
                  },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "example": "370985db-22d8-4463-8e5f-2271d30913bd"
                      },
                      "nameSingular": {
                        "type": "string",
                        "enum": [
                          "messageChannel"
                        ]
                      }
                    }
                  },
                  "workspaceId": {
                    "type": "string",
                    "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
                  },
                  "webhookId": {
                    "type": "string",
                    "example": "90056586-1228-4e03-a507-70140aa85c05"
                  },
                  "eventDate": {
                    "type": "string",
                    "example": "2024-02-14T11:27:01.779Z"
                  },
                  "record": {
                    "$ref": "#/components/schemas/MessageChannelForResponse"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        }
      }
    },
    "MessageChannel Updated": {
      "post": {
        "tags": [
          "messageChannel"
        ],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": {
              "type": "string"
            },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": {
              "type": "string"
            },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": {
              "type": "string"
            },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": {
                    "type": "string",
                    "example": "https://example.com/incomingWebhook"
                  },
                  "eventName": {
                    "type": "string",
                    "example": "messageChannel.updated"
                  },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "example": "370985db-22d8-4463-8e5f-2271d30913bd"
                      },
                      "nameSingular": {
                        "type": "string",
                        "enum": [
                          "messageChannel"
                        ]
                      }
                    }
                  },
                  "workspaceId": {
                    "type": "string",
                    "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
                  },
                  "webhookId": {
                    "type": "string",
                    "example": "90056586-1228-4e03-a507-70140aa85c05"
                  },
                  "eventDate": {
                    "type": "string",
                    "example": "2024-02-14T11:27:01.779Z"
                  },
                  "record": {
                    "$ref": "#/components/schemas/MessageChannelForResponse"
                  },
                  "updatedFields": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        }
      }
    },
    "MessageChannel Deleted": {
      "post": {
        "tags": [
          "messageChannel"
        ],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": {
              "type": "string"
            },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": {
              "type": "string"
            },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": {
              "type": "string"
            },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": {
                    "type": "string",
                    "example": "https://example.com/incomingWebhook"
                  },
                  "eventName": {
                    "type": "string",
                    "example": "messageChannel.deleted"
                  },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "example": "370985db-22d8-4463-8e5f-2271d30913bd"
                      },
                      "nameSingular": {
                        "type": "string",
                        "enum": [
                          "messageChannel"
                        ]
                      }
                    }
                  },
                  "workspaceId": {
                    "type": "string",
                    "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
                  },
                  "webhookId": {
                    "type": "string",
                    "example": "90056586-1228-4e03-a507-70140aa85c05"
                  },
                  "eventDate": {
                    "type": "string",
                    "example": "2024-02-14T11:27:01.779Z"
                  },
                  "record": {
                    "$ref": "#/components/schemas/MessageChannelForResponse"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        }
      }
    },
    "MessageFolder Created": {
      "post": {
        "tags": [
          "messageFolder"
        ],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": {
              "type": "string"
            },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": {
              "type": "string"
            },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": {
              "type": "string"
            },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": {
                    "type": "string",
                    "example": "https://example.com/incomingWebhook"
                  },
                  "eventName": {
                    "type": "string",
                    "example": "messageFolder.created"
                  },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "example": "370985db-22d8-4463-8e5f-2271d30913bd"
                      },
                      "nameSingular": {
                        "type": "string",
                        "enum": [
                          "messageFolder"
                        ]
                      }
                    }
                  },
                  "workspaceId": {
                    "type": "string",
                    "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
                  },
                  "webhookId": {
                    "type": "string",
                    "example": "90056586-1228-4e03-a507-70140aa85c05"
                  },
                  "eventDate": {
                    "type": "string",
                    "example": "2024-02-14T11:27:01.779Z"
                  },
                  "record": {
                    "$ref": "#/components/schemas/MessageFolderForResponse"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        }
      }
    },
    "MessageFolder Updated": {
      "post": {
        "tags": [
          "messageFolder"
        ],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": {
              "type": "string"
            },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": {
              "type": "string"
            },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": {
              "type": "string"
            },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": {
                    "type": "string",
                    "example": "https://example.com/incomingWebhook"
                  },
                  "eventName": {
                    "type": "string",
                    "example": "messageFolder.updated"
                  },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "example": "370985db-22d8-4463-8e5f-2271d30913bd"
                      },
                      "nameSingular": {
                        "type": "string",
                        "enum": [
                          "messageFolder"
                        ]
                      }
                    }
                  },
                  "workspaceId": {
                    "type": "string",
                    "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
                  },
                  "webhookId": {
                    "type": "string",
                    "example": "90056586-1228-4e03-a507-70140aa85c05"
                  },
                  "eventDate": {
                    "type": "string",
                    "example": "2024-02-14T11:27:01.779Z"
                  },
                  "record": {
                    "$ref": "#/components/schemas/MessageFolderForResponse"
                  },
                  "updatedFields": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        }
      }
    },
    "MessageFolder Deleted": {
      "post": {
        "tags": [
          "messageFolder"
        ],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": {
              "type": "string"
            },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": {
              "type": "string"
            },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": {
              "type": "string"
            },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": {
                    "type": "string",
                    "example": "https://example.com/incomingWebhook"
                  },
                  "eventName": {
                    "type": "string",
                    "example": "messageFolder.deleted"
                  },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "example": "370985db-22d8-4463-8e5f-2271d30913bd"
                      },
                      "nameSingular": {
                        "type": "string",
                        "enum": [
                          "messageFolder"
                        ]
                      }
                    }
                  },
                  "workspaceId": {
                    "type": "string",
                    "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
                  },
                  "webhookId": {
                    "type": "string",
                    "example": "90056586-1228-4e03-a507-70140aa85c05"
                  },
                  "eventDate": {
                    "type": "string",
                    "example": "2024-02-14T11:27:01.779Z"
                  },
                  "record": {
                    "$ref": "#/components/schemas/MessageFolderForResponse"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        }
      }
    },
    "MessageParticipant Created": {
      "post": {
        "tags": [
          "messageParticipant"
        ],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": {
              "type": "string"
            },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": {
              "type": "string"
            },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": {
              "type": "string"
            },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": {
                    "type": "string",
                    "example": "https://example.com/incomingWebhook"
                  },
                  "eventName": {
                    "type": "string",
                    "example": "messageParticipant.created"
                  },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "example": "370985db-22d8-4463-8e5f-2271d30913bd"
                      },
                      "nameSingular": {
                        "type": "string",
                        "enum": [
                          "messageParticipant"
                        ]
                      }
                    }
                  },
                  "workspaceId": {
                    "type": "string",
                    "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
                  },
                  "webhookId": {
                    "type": "string",
                    "example": "90056586-1228-4e03-a507-70140aa85c05"
                  },
                  "eventDate": {
                    "type": "string",
                    "example": "2024-02-14T11:27:01.779Z"
                  },
                  "record": {
                    "$ref": "#/components/schemas/MessageParticipantForResponse"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        }
      }
    },
    "MessageParticipant Updated": {
      "post": {
        "tags": [
          "messageParticipant"
        ],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": {
              "type": "string"
            },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": {
              "type": "string"
            },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": {
              "type": "string"
            },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": {
                    "type": "string",
                    "example": "https://example.com/incomingWebhook"
                  },
                  "eventName": {
                    "type": "string",
                    "example": "messageParticipant.updated"
                  },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "example": "370985db-22d8-4463-8e5f-2271d30913bd"
                      },
                      "nameSingular": {
                        "type": "string",
                        "enum": [
                          "messageParticipant"
                        ]
                      }
                    }
                  },
                  "workspaceId": {
                    "type": "string",
                    "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
                  },
                  "webhookId": {
                    "type": "string",
                    "example": "90056586-1228-4e03-a507-70140aa85c05"
                  },
                  "eventDate": {
                    "type": "string",
                    "example": "2024-02-14T11:27:01.779Z"
                  },
                  "record": {
                    "$ref": "#/components/schemas/MessageParticipantForResponse"
                  },
                  "updatedFields": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        }
      }
    },
    "MessageParticipant Deleted": {
      "post": {
        "tags": [
          "messageParticipant"
        ],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": {
              "type": "string"
            },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": {
              "type": "string"
            },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": {
              "type": "string"
            },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": {
                    "type": "string",
                    "example": "https://example.com/incomingWebhook"
                  },
                  "eventName": {
                    "type": "string",
                    "example": "messageParticipant.deleted"
                  },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "example": "370985db-22d8-4463-8e5f-2271d30913bd"
                      },
                      "nameSingular": {
                        "type": "string",
                        "enum": [
                          "messageParticipant"
                        ]
                      }
                    }
                  },
                  "workspaceId": {
                    "type": "string",
                    "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
                  },
                  "webhookId": {
                    "type": "string",
                    "example": "90056586-1228-4e03-a507-70140aa85c05"
                  },
                  "eventDate": {
                    "type": "string",
                    "example": "2024-02-14T11:27:01.779Z"
                  },
                  "record": {
                    "$ref": "#/components/schemas/MessageParticipantForResponse"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        }
      }
    },
    "Message Created": {
      "post": {
        "tags": [
          "message"
        ],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": {
              "type": "string"
            },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": {
              "type": "string"
            },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": {
              "type": "string"
            },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": {
                    "type": "string",
                    "example": "https://example.com/incomingWebhook"
                  },
                  "eventName": {
                    "type": "string",
                    "example": "message.created"
                  },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "example": "370985db-22d8-4463-8e5f-2271d30913bd"
                      },
                      "nameSingular": {
                        "type": "string",
                        "enum": [
                          "message"
                        ]
                      }
                    }
                  },
                  "workspaceId": {
                    "type": "string",
                    "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
                  },
                  "webhookId": {
                    "type": "string",
                    "example": "90056586-1228-4e03-a507-70140aa85c05"
                  },
                  "eventDate": {
                    "type": "string",
                    "example": "2024-02-14T11:27:01.779Z"
                  },
                  "record": {
                    "$ref": "#/components/schemas/MessageForResponse"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        }
      }
    },
    "Message Updated": {
      "post": {
        "tags": [
          "message"
        ],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": {
              "type": "string"
            },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": {
              "type": "string"
            },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": {
              "type": "string"
            },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": {
                    "type": "string",
                    "example": "https://example.com/incomingWebhook"
                  },
                  "eventName": {
                    "type": "string",
                    "example": "message.updated"
                  },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "example": "370985db-22d8-4463-8e5f-2271d30913bd"
                      },
                      "nameSingular": {
                        "type": "string",
                        "enum": [
                          "message"
                        ]
                      }
                    }
                  },
                  "workspaceId": {
                    "type": "string",
                    "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
                  },
                  "webhookId": {
                    "type": "string",
                    "example": "90056586-1228-4e03-a507-70140aa85c05"
                  },
                  "eventDate": {
                    "type": "string",
                    "example": "2024-02-14T11:27:01.779Z"
                  },
                  "record": {
                    "$ref": "#/components/schemas/MessageForResponse"
                  },
                  "updatedFields": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        }
      }
    },
    "Message Deleted": {
      "post": {
        "tags": [
          "message"
        ],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": {
              "type": "string"
            },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": {
              "type": "string"
            },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": {
              "type": "string"
            },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": {
                    "type": "string",
                    "example": "https://example.com/incomingWebhook"
                  },
                  "eventName": {
                    "type": "string",
                    "example": "message.deleted"
                  },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "example": "370985db-22d8-4463-8e5f-2271d30913bd"
                      },
                      "nameSingular": {
                        "type": "string",
                        "enum": [
                          "message"
                        ]
                      }
                    }
                  },
                  "workspaceId": {
                    "type": "string",
                    "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
                  },
                  "webhookId": {
                    "type": "string",
                    "example": "90056586-1228-4e03-a507-70140aa85c05"
                  },
                  "eventDate": {
                    "type": "string",
                    "example": "2024-02-14T11:27:01.779Z"
                  },
                  "record": {
                    "$ref": "#/components/schemas/MessageForResponse"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        }
      }
    },
    "MessageThread Created": {
      "post": {
        "tags": [
          "messageThread"
        ],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": {
              "type": "string"
            },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": {
              "type": "string"
            },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": {
              "type": "string"
            },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": {
                    "type": "string",
                    "example": "https://example.com/incomingWebhook"
                  },
                  "eventName": {
                    "type": "string",
                    "example": "messageThread.created"
                  },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "example": "370985db-22d8-4463-8e5f-2271d30913bd"
                      },
                      "nameSingular": {
                        "type": "string",
                        "enum": [
                          "messageThread"
                        ]
                      }
                    }
                  },
                  "workspaceId": {
                    "type": "string",
                    "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
                  },
                  "webhookId": {
                    "type": "string",
                    "example": "90056586-1228-4e03-a507-70140aa85c05"
                  },
                  "eventDate": {
                    "type": "string",
                    "example": "2024-02-14T11:27:01.779Z"
                  },
                  "record": {
                    "$ref": "#/components/schemas/MessageThreadForResponse"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        }
      }
    },
    "MessageThread Updated": {
      "post": {
        "tags": [
          "messageThread"
        ],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": {
              "type": "string"
            },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": {
              "type": "string"
            },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": {
              "type": "string"
            },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": {
                    "type": "string",
                    "example": "https://example.com/incomingWebhook"
                  },
                  "eventName": {
                    "type": "string",
                    "example": "messageThread.updated"
                  },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "example": "370985db-22d8-4463-8e5f-2271d30913bd"
                      },
                      "nameSingular": {
                        "type": "string",
                        "enum": [
                          "messageThread"
                        ]
                      }
                    }
                  },
                  "workspaceId": {
                    "type": "string",
                    "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
                  },
                  "webhookId": {
                    "type": "string",
                    "example": "90056586-1228-4e03-a507-70140aa85c05"
                  },
                  "eventDate": {
                    "type": "string",
                    "example": "2024-02-14T11:27:01.779Z"
                  },
                  "record": {
                    "$ref": "#/components/schemas/MessageThreadForResponse"
                  },
                  "updatedFields": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        }
      }
    },
    "MessageThread Deleted": {
      "post": {
        "tags": [
          "messageThread"
        ],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": {
              "type": "string"
            },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": {
              "type": "string"
            },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": {
              "type": "string"
            },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": {
                    "type": "string",
                    "example": "https://example.com/incomingWebhook"
                  },
                  "eventName": {
                    "type": "string",
                    "example": "messageThread.deleted"
                  },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "example": "370985db-22d8-4463-8e5f-2271d30913bd"
                      },
                      "nameSingular": {
                        "type": "string",
                        "enum": [
                          "messageThread"
                        ]
                      }
                    }
                  },
                  "workspaceId": {
                    "type": "string",
                    "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
                  },
                  "webhookId": {
                    "type": "string",
                    "example": "90056586-1228-4e03-a507-70140aa85c05"
                  },
                  "eventDate": {
                    "type": "string",
                    "example": "2024-02-14T11:27:01.779Z"
                  },
                  "record": {
                    "$ref": "#/components/schemas/MessageThreadForResponse"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        }
      }
    },
    "Note Created": {
      "post": {
        "tags": [
          "note"
        ],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": {
              "type": "string"
            },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": {
              "type": "string"
            },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": {
              "type": "string"
            },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": {
                    "type": "string",
                    "example": "https://example.com/incomingWebhook"
                  },
                  "eventName": {
                    "type": "string",
                    "example": "note.created"
                  },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "example": "370985db-22d8-4463-8e5f-2271d30913bd"
                      },
                      "nameSingular": {
                        "type": "string",
                        "enum": [
                          "note"
                        ]
                      }
                    }
                  },
                  "workspaceId": {
                    "type": "string",
                    "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
                  },
                  "webhookId": {
                    "type": "string",
                    "example": "90056586-1228-4e03-a507-70140aa85c05"
                  },
                  "eventDate": {
                    "type": "string",
                    "example": "2024-02-14T11:27:01.779Z"
                  },
                  "record": {
                    "$ref": "#/components/schemas/NoteForResponse"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        }
      }
    },
    "Note Updated": {
      "post": {
        "tags": [
          "note"
        ],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": {
              "type": "string"
            },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": {
              "type": "string"
            },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": {
              "type": "string"
            },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": {
                    "type": "string",
                    "example": "https://example.com/incomingWebhook"
                  },
                  "eventName": {
                    "type": "string",
                    "example": "note.updated"
                  },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "example": "370985db-22d8-4463-8e5f-2271d30913bd"
                      },
                      "nameSingular": {
                        "type": "string",
                        "enum": [
                          "note"
                        ]
                      }
                    }
                  },
                  "workspaceId": {
                    "type": "string",
                    "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
                  },
                  "webhookId": {
                    "type": "string",
                    "example": "90056586-1228-4e03-a507-70140aa85c05"
                  },
                  "eventDate": {
                    "type": "string",
                    "example": "2024-02-14T11:27:01.779Z"
                  },
                  "record": {
                    "$ref": "#/components/schemas/NoteForResponse"
                  },
                  "updatedFields": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        }
      }
    },
    "Note Deleted": {
      "post": {
        "tags": [
          "note"
        ],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": {
              "type": "string"
            },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": {
              "type": "string"
            },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": {
              "type": "string"
            },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": {
                    "type": "string",
                    "example": "https://example.com/incomingWebhook"
                  },
                  "eventName": {
                    "type": "string",
                    "example": "note.deleted"
                  },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "example": "370985db-22d8-4463-8e5f-2271d30913bd"
                      },
                      "nameSingular": {
                        "type": "string",
                        "enum": [
                          "note"
                        ]
                      }
                    }
                  },
                  "workspaceId": {
                    "type": "string",
                    "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
                  },
                  "webhookId": {
                    "type": "string",
                    "example": "90056586-1228-4e03-a507-70140aa85c05"
                  },
                  "eventDate": {
                    "type": "string",
                    "example": "2024-02-14T11:27:01.779Z"
                  },
                  "record": {
                    "$ref": "#/components/schemas/NoteForResponse"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        }
      }
    },
    "NoteTarget Created": {
      "post": {
        "tags": [
          "noteTarget"
        ],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": {
              "type": "string"
            },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": {
              "type": "string"
            },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": {
              "type": "string"
            },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": {
                    "type": "string",
                    "example": "https://example.com/incomingWebhook"
                  },
                  "eventName": {
                    "type": "string",
                    "example": "noteTarget.created"
                  },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "example": "370985db-22d8-4463-8e5f-2271d30913bd"
                      },
                      "nameSingular": {
                        "type": "string",
                        "enum": [
                          "noteTarget"
                        ]
                      }
                    }
                  },
                  "workspaceId": {
                    "type": "string",
                    "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
                  },
                  "webhookId": {
                    "type": "string",
                    "example": "90056586-1228-4e03-a507-70140aa85c05"
                  },
                  "eventDate": {
                    "type": "string",
                    "example": "2024-02-14T11:27:01.779Z"
                  },
                  "record": {
                    "$ref": "#/components/schemas/NoteTargetForResponse"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        }
      }
    },
    "NoteTarget Updated": {
      "post": {
        "tags": [
          "noteTarget"
        ],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": {
              "type": "string"
            },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": {
              "type": "string"
            },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": {
              "type": "string"
            },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": {
                    "type": "string",
                    "example": "https://example.com/incomingWebhook"
                  },
                  "eventName": {
                    "type": "string",
                    "example": "noteTarget.updated"
                  },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "example": "370985db-22d8-4463-8e5f-2271d30913bd"
                      },
                      "nameSingular": {
                        "type": "string",
                        "enum": [
                          "noteTarget"
                        ]
                      }
                    }
                  },
                  "workspaceId": {
                    "type": "string",
                    "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
                  },
                  "webhookId": {
                    "type": "string",
                    "example": "90056586-1228-4e03-a507-70140aa85c05"
                  },
                  "eventDate": {
                    "type": "string",
                    "example": "2024-02-14T11:27:01.779Z"
                  },
                  "record": {
                    "$ref": "#/components/schemas/NoteTargetForResponse"
                  },
                  "updatedFields": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        }
      }
    },
    "NoteTarget Deleted": {
      "post": {
        "tags": [
          "noteTarget"
        ],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": {
              "type": "string"
            },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": {
              "type": "string"
            },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": {
              "type": "string"
            },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": {
                    "type": "string",
                    "example": "https://example.com/incomingWebhook"
                  },
                  "eventName": {
                    "type": "string",
                    "example": "noteTarget.deleted"
                  },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "example": "370985db-22d8-4463-8e5f-2271d30913bd"
                      },
                      "nameSingular": {
                        "type": "string",
                        "enum": [
                          "noteTarget"
                        ]
                      }
                    }
                  },
                  "workspaceId": {
                    "type": "string",
                    "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
                  },
                  "webhookId": {
                    "type": "string",
                    "example": "90056586-1228-4e03-a507-70140aa85c05"
                  },
                  "eventDate": {
                    "type": "string",
                    "example": "2024-02-14T11:27:01.779Z"
                  },
                  "record": {
                    "$ref": "#/components/schemas/NoteTargetForResponse"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        }
      }
    },
    "Opportunity Created": {
      "post": {
        "tags": [
          "opportunity"
        ],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": {
              "type": "string"
            },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": {
              "type": "string"
            },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": {
              "type": "string"
            },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": {
                    "type": "string",
                    "example": "https://example.com/incomingWebhook"
                  },
                  "eventName": {
                    "type": "string",
                    "example": "opportunity.created"
                  },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "example": "370985db-22d8-4463-8e5f-2271d30913bd"
                      },
                      "nameSingular": {
                        "type": "string",
                        "enum": [
                          "opportunity"
                        ]
                      }
                    }
                  },
                  "workspaceId": {
                    "type": "string",
                    "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
                  },
                  "webhookId": {
                    "type": "string",
                    "example": "90056586-1228-4e03-a507-70140aa85c05"
                  },
                  "eventDate": {
                    "type": "string",
                    "example": "2024-02-14T11:27:01.779Z"
                  },
                  "record": {
                    "$ref": "#/components/schemas/OpportunityForResponse"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        }
      }
    },
    "Opportunity Updated": {
      "post": {
        "tags": [
          "opportunity"
        ],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": {
              "type": "string"
            },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": {
              "type": "string"
            },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": {
              "type": "string"
            },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": {
                    "type": "string",
                    "example": "https://example.com/incomingWebhook"
                  },
                  "eventName": {
                    "type": "string",
                    "example": "opportunity.updated"
                  },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "example": "370985db-22d8-4463-8e5f-2271d30913bd"
                      },
                      "nameSingular": {
                        "type": "string",
                        "enum": [
                          "opportunity"
                        ]
                      }
                    }
                  },
                  "workspaceId": {
                    "type": "string",
                    "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
                  },
                  "webhookId": {
                    "type": "string",
                    "example": "90056586-1228-4e03-a507-70140aa85c05"
                  },
                  "eventDate": {
                    "type": "string",
                    "example": "2024-02-14T11:27:01.779Z"
                  },
                  "record": {
                    "$ref": "#/components/schemas/OpportunityForResponse"
                  },
                  "updatedFields": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        }
      }
    },
    "Opportunity Deleted": {
      "post": {
        "tags": [
          "opportunity"
        ],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": {
              "type": "string"
            },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": {
              "type": "string"
            },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": {
              "type": "string"
            },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": {
                    "type": "string",
                    "example": "https://example.com/incomingWebhook"
                  },
                  "eventName": {
                    "type": "string",
                    "example": "opportunity.deleted"
                  },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "example": "370985db-22d8-4463-8e5f-2271d30913bd"
                      },
                      "nameSingular": {
                        "type": "string",
                        "enum": [
                          "opportunity"
                        ]
                      }
                    }
                  },
                  "workspaceId": {
                    "type": "string",
                    "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
                  },
                  "webhookId": {
                    "type": "string",
                    "example": "90056586-1228-4e03-a507-70140aa85c05"
                  },
                  "eventDate": {
                    "type": "string",
                    "example": "2024-02-14T11:27:01.779Z"
                  },
                  "record": {
                    "$ref": "#/components/schemas/OpportunityForResponse"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        }
      }
    },
    "Person Created": {
      "post": {
        "tags": [
          "person"
        ],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": {
              "type": "string"
            },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": {
              "type": "string"
            },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": {
              "type": "string"
            },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": {
                    "type": "string",
                    "example": "https://example.com/incomingWebhook"
                  },
                  "eventName": {
                    "type": "string",
                    "example": "person.created"
                  },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "example": "370985db-22d8-4463-8e5f-2271d30913bd"
                      },
                      "nameSingular": {
                        "type": "string",
                        "enum": [
                          "person"
                        ]
                      }
                    }
                  },
                  "workspaceId": {
                    "type": "string",
                    "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
                  },
                  "webhookId": {
                    "type": "string",
                    "example": "90056586-1228-4e03-a507-70140aa85c05"
                  },
                  "eventDate": {
                    "type": "string",
                    "example": "2024-02-14T11:27:01.779Z"
                  },
                  "record": {
                    "$ref": "#/components/schemas/PersonForResponse"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        }
      }
    },
    "Person Updated": {
      "post": {
        "tags": [
          "person"
        ],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": {
              "type": "string"
            },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": {
              "type": "string"
            },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": {
              "type": "string"
            },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": {
                    "type": "string",
                    "example": "https://example.com/incomingWebhook"
                  },
                  "eventName": {
                    "type": "string",
                    "example": "person.updated"
                  },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "example": "370985db-22d8-4463-8e5f-2271d30913bd"
                      },
                      "nameSingular": {
                        "type": "string",
                        "enum": [
                          "person"
                        ]
                      }
                    }
                  },
                  "workspaceId": {
                    "type": "string",
                    "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
                  },
                  "webhookId": {
                    "type": "string",
                    "example": "90056586-1228-4e03-a507-70140aa85c05"
                  },
                  "eventDate": {
                    "type": "string",
                    "example": "2024-02-14T11:27:01.779Z"
                  },
                  "record": {
                    "$ref": "#/components/schemas/PersonForResponse"
                  },
                  "updatedFields": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        }
      }
    },
    "Person Deleted": {
      "post": {
        "tags": [
          "person"
        ],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": {
              "type": "string"
            },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": {
              "type": "string"
            },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": {
              "type": "string"
            },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": {
                    "type": "string",
                    "example": "https://example.com/incomingWebhook"
                  },
                  "eventName": {
                    "type": "string",
                    "example": "person.deleted"
                  },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "example": "370985db-22d8-4463-8e5f-2271d30913bd"
                      },
                      "nameSingular": {
                        "type": "string",
                        "enum": [
                          "person"
                        ]
                      }
                    }
                  },
                  "workspaceId": {
                    "type": "string",
                    "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
                  },
                  "webhookId": {
                    "type": "string",
                    "example": "90056586-1228-4e03-a507-70140aa85c05"
                  },
                  "eventDate": {
                    "type": "string",
                    "example": "2024-02-14T11:27:01.779Z"
                  },
                  "record": {
                    "$ref": "#/components/schemas/PersonForResponse"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        }
      }
    },
    "Task Created": {
      "post": {
        "tags": [
          "task"
        ],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": {
              "type": "string"
            },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": {
              "type": "string"
            },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": {
              "type": "string"
            },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": {
                    "type": "string",
                    "example": "https://example.com/incomingWebhook"
                  },
                  "eventName": {
                    "type": "string",
                    "example": "task.created"
                  },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "example": "370985db-22d8-4463-8e5f-2271d30913bd"
                      },
                      "nameSingular": {
                        "type": "string",
                        "enum": [
                          "task"
                        ]
                      }
                    }
                  },
                  "workspaceId": {
                    "type": "string",
                    "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
                  },
                  "webhookId": {
                    "type": "string",
                    "example": "90056586-1228-4e03-a507-70140aa85c05"
                  },
                  "eventDate": {
                    "type": "string",
                    "example": "2024-02-14T11:27:01.779Z"
                  },
                  "record": {
                    "$ref": "#/components/schemas/TaskForResponse"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        }
      }
    },
    "Task Updated": {
      "post": {
        "tags": [
          "task"
        ],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": {
              "type": "string"
            },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": {
              "type": "string"
            },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": {
              "type": "string"
            },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": {
                    "type": "string",
                    "example": "https://example.com/incomingWebhook"
                  },
                  "eventName": {
                    "type": "string",
                    "example": "task.updated"
                  },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "example": "370985db-22d8-4463-8e5f-2271d30913bd"
                      },
                      "nameSingular": {
                        "type": "string",
                        "enum": [
                          "task"
                        ]
                      }
                    }
                  },
                  "workspaceId": {
                    "type": "string",
                    "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
                  },
                  "webhookId": {
                    "type": "string",
                    "example": "90056586-1228-4e03-a507-70140aa85c05"
                  },
                  "eventDate": {
                    "type": "string",
                    "example": "2024-02-14T11:27:01.779Z"
                  },
                  "record": {
                    "$ref": "#/components/schemas/TaskForResponse"
                  },
                  "updatedFields": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        }
      }
    },
    "Task Deleted": {
      "post": {
        "tags": [
          "task"
        ],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": {
              "type": "string"
            },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": {
              "type": "string"
            },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": {
              "type": "string"
            },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": {
                    "type": "string",
                    "example": "https://example.com/incomingWebhook"
                  },
                  "eventName": {
                    "type": "string",
                    "example": "task.deleted"
                  },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "example": "370985db-22d8-4463-8e5f-2271d30913bd"
                      },
                      "nameSingular": {
                        "type": "string",
                        "enum": [
                          "task"
                        ]
                      }
                    }
                  },
                  "workspaceId": {
                    "type": "string",
                    "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
                  },
                  "webhookId": {
                    "type": "string",
                    "example": "90056586-1228-4e03-a507-70140aa85c05"
                  },
                  "eventDate": {
                    "type": "string",
                    "example": "2024-02-14T11:27:01.779Z"
                  },
                  "record": {
                    "$ref": "#/components/schemas/TaskForResponse"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        }
      }
    },
    "TaskTarget Created": {
      "post": {
        "tags": [
          "taskTarget"
        ],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": {
              "type": "string"
            },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": {
              "type": "string"
            },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": {
              "type": "string"
            },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": {
                    "type": "string",
                    "example": "https://example.com/incomingWebhook"
                  },
                  "eventName": {
                    "type": "string",
                    "example": "taskTarget.created"
                  },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "example": "370985db-22d8-4463-8e5f-2271d30913bd"
                      },
                      "nameSingular": {
                        "type": "string",
                        "enum": [
                          "taskTarget"
                        ]
                      }
                    }
                  },
                  "workspaceId": {
                    "type": "string",
                    "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
                  },
                  "webhookId": {
                    "type": "string",
                    "example": "90056586-1228-4e03-a507-70140aa85c05"
                  },
                  "eventDate": {
                    "type": "string",
                    "example": "2024-02-14T11:27:01.779Z"
                  },
                  "record": {
                    "$ref": "#/components/schemas/TaskTargetForResponse"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        }
      }
    },
    "TaskTarget Updated": {
      "post": {
        "tags": [
          "taskTarget"
        ],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": {
              "type": "string"
            },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": {
              "type": "string"
            },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": {
              "type": "string"
            },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": {
                    "type": "string",
                    "example": "https://example.com/incomingWebhook"
                  },
                  "eventName": {
                    "type": "string",
                    "example": "taskTarget.updated"
                  },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "example": "370985db-22d8-4463-8e5f-2271d30913bd"
                      },
                      "nameSingular": {
                        "type": "string",
                        "enum": [
                          "taskTarget"
                        ]
                      }
                    }
                  },
                  "workspaceId": {
                    "type": "string",
                    "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
                  },
                  "webhookId": {
                    "type": "string",
                    "example": "90056586-1228-4e03-a507-70140aa85c05"
                  },
                  "eventDate": {
                    "type": "string",
                    "example": "2024-02-14T11:27:01.779Z"
                  },
                  "record": {
                    "$ref": "#/components/schemas/TaskTargetForResponse"
                  },
                  "updatedFields": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        }
      }
    },
    "TaskTarget Deleted": {
      "post": {
        "tags": [
          "taskTarget"
        ],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": {
              "type": "string"
            },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": {
              "type": "string"
            },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": {
              "type": "string"
            },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": {
                    "type": "string",
                    "example": "https://example.com/incomingWebhook"
                  },
                  "eventName": {
                    "type": "string",
                    "example": "taskTarget.deleted"
                  },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "example": "370985db-22d8-4463-8e5f-2271d30913bd"
                      },
                      "nameSingular": {
                        "type": "string",
                        "enum": [
                          "taskTarget"
                        ]
                      }
                    }
                  },
                  "workspaceId": {
                    "type": "string",
                    "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
                  },
                  "webhookId": {
                    "type": "string",
                    "example": "90056586-1228-4e03-a507-70140aa85c05"
                  },
                  "eventDate": {
                    "type": "string",
                    "example": "2024-02-14T11:27:01.779Z"
                  },
                  "record": {
                    "$ref": "#/components/schemas/TaskTargetForResponse"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        }
      }
    },
    "TimelineActivity Created": {
      "post": {
        "tags": [
          "timelineActivity"
        ],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": {
              "type": "string"
            },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": {
              "type": "string"
            },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": {
              "type": "string"
            },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": {
                    "type": "string",
                    "example": "https://example.com/incomingWebhook"
                  },
                  "eventName": {
                    "type": "string",
                    "example": "timelineActivity.created"
                  },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "example": "370985db-22d8-4463-8e5f-2271d30913bd"
                      },
                      "nameSingular": {
                        "type": "string",
                        "enum": [
                          "timelineActivity"
                        ]
                      }
                    }
                  },
                  "workspaceId": {
                    "type": "string",
                    "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
                  },
                  "webhookId": {
                    "type": "string",
                    "example": "90056586-1228-4e03-a507-70140aa85c05"
                  },
                  "eventDate": {
                    "type": "string",
                    "example": "2024-02-14T11:27:01.779Z"
                  },
                  "record": {
                    "$ref": "#/components/schemas/TimelineActivityForResponse"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        }
      }
    },
    "TimelineActivity Updated": {
      "post": {
        "tags": [
          "timelineActivity"
        ],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": {
              "type": "string"
            },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": {
              "type": "string"
            },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": {
              "type": "string"
            },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": {
                    "type": "string",
                    "example": "https://example.com/incomingWebhook"
                  },
                  "eventName": {
                    "type": "string",
                    "example": "timelineActivity.updated"
                  },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "example": "370985db-22d8-4463-8e5f-2271d30913bd"
                      },
                      "nameSingular": {
                        "type": "string",
                        "enum": [
                          "timelineActivity"
                        ]
                      }
                    }
                  },
                  "workspaceId": {
                    "type": "string",
                    "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
                  },
                  "webhookId": {
                    "type": "string",
                    "example": "90056586-1228-4e03-a507-70140aa85c05"
                  },
                  "eventDate": {
                    "type": "string",
                    "example": "2024-02-14T11:27:01.779Z"
                  },
                  "record": {
                    "$ref": "#/components/schemas/TimelineActivityForResponse"
                  },
                  "updatedFields": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        }
      }
    },
    "TimelineActivity Deleted": {
      "post": {
        "tags": [
          "timelineActivity"
        ],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": {
              "type": "string"
            },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": {
              "type": "string"
            },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": {
              "type": "string"
            },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": {
                    "type": "string",
                    "example": "https://example.com/incomingWebhook"
                  },
                  "eventName": {
                    "type": "string",
                    "example": "timelineActivity.deleted"
                  },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "example": "370985db-22d8-4463-8e5f-2271d30913bd"
                      },
                      "nameSingular": {
                        "type": "string",
                        "enum": [
                          "timelineActivity"
                        ]
                      }
                    }
                  },
                  "workspaceId": {
                    "type": "string",
                    "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
                  },
                  "webhookId": {
                    "type": "string",
                    "example": "90056586-1228-4e03-a507-70140aa85c05"
                  },
                  "eventDate": {
                    "type": "string",
                    "example": "2024-02-14T11:27:01.779Z"
                  },
                  "record": {
                    "$ref": "#/components/schemas/TimelineActivityForResponse"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        }
      }
    },
    "ViewField Created": {
      "post": {
        "tags": [
          "viewField"
        ],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": {
              "type": "string"
            },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": {
              "type": "string"
            },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": {
              "type": "string"
            },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": {
                    "type": "string",
                    "example": "https://example.com/incomingWebhook"
                  },
                  "eventName": {
                    "type": "string",
                    "example": "viewField.created"
                  },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "example": "370985db-22d8-4463-8e5f-2271d30913bd"
                      },
                      "nameSingular": {
                        "type": "string",
                        "enum": [
                          "viewField"
                        ]
                      }
                    }
                  },
                  "workspaceId": {
                    "type": "string",
                    "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
                  },
                  "webhookId": {
                    "type": "string",
                    "example": "90056586-1228-4e03-a507-70140aa85c05"
                  },
                  "eventDate": {
                    "type": "string",
                    "example": "2024-02-14T11:27:01.779Z"
                  },
                  "record": {
                    "$ref": "#/components/schemas/ViewFieldForResponse"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        }
      }
    },
    "ViewField Updated": {
      "post": {
        "tags": [
          "viewField"
        ],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": {
              "type": "string"
            },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": {
              "type": "string"
            },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": {
              "type": "string"
            },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": {
                    "type": "string",
                    "example": "https://example.com/incomingWebhook"
                  },
                  "eventName": {
                    "type": "string",
                    "example": "viewField.updated"
                  },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "example": "370985db-22d8-4463-8e5f-2271d30913bd"
                      },
                      "nameSingular": {
                        "type": "string",
                        "enum": [
                          "viewField"
                        ]
                      }
                    }
                  },
                  "workspaceId": {
                    "type": "string",
                    "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
                  },
                  "webhookId": {
                    "type": "string",
                    "example": "90056586-1228-4e03-a507-70140aa85c05"
                  },
                  "eventDate": {
                    "type": "string",
                    "example": "2024-02-14T11:27:01.779Z"
                  },
                  "record": {
                    "$ref": "#/components/schemas/ViewFieldForResponse"
                  },
                  "updatedFields": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        }
      }
    },
    "ViewField Deleted": {
      "post": {
        "tags": [
          "viewField"
        ],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": {
              "type": "string"
            },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": {
              "type": "string"
            },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": {
              "type": "string"
            },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": {
                    "type": "string",
                    "example": "https://example.com/incomingWebhook"
                  },
                  "eventName": {
                    "type": "string",
                    "example": "viewField.deleted"
                  },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "example": "370985db-22d8-4463-8e5f-2271d30913bd"
                      },
                      "nameSingular": {
                        "type": "string",
                        "enum": [
                          "viewField"
                        ]
                      }
                    }
                  },
                  "workspaceId": {
                    "type": "string",
                    "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
                  },
                  "webhookId": {
                    "type": "string",
                    "example": "90056586-1228-4e03-a507-70140aa85c05"
                  },
                  "eventDate": {
                    "type": "string",
                    "example": "2024-02-14T11:27:01.779Z"
                  },
                  "record": {
                    "$ref": "#/components/schemas/ViewFieldForResponse"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        }
      }
    },
    "ViewFilterGroup Created": {
      "post": {
        "tags": [
          "viewFilterGroup"
        ],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": {
              "type": "string"
            },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": {
              "type": "string"
            },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": {
              "type": "string"
            },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": {
                    "type": "string",
                    "example": "https://example.com/incomingWebhook"
                  },
                  "eventName": {
                    "type": "string",
                    "example": "viewFilterGroup.created"
                  },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "example": "370985db-22d8-4463-8e5f-2271d30913bd"
                      },
                      "nameSingular": {
                        "type": "string",
                        "enum": [
                          "viewFilterGroup"
                        ]
                      }
                    }
                  },
                  "workspaceId": {
                    "type": "string",
                    "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
                  },
                  "webhookId": {
                    "type": "string",
                    "example": "90056586-1228-4e03-a507-70140aa85c05"
                  },
                  "eventDate": {
                    "type": "string",
                    "example": "2024-02-14T11:27:01.779Z"
                  },
                  "record": {
                    "$ref": "#/components/schemas/ViewFilterGroupForResponse"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        }
      }
    },
    "ViewFilterGroup Updated": {
      "post": {
        "tags": [
          "viewFilterGroup"
        ],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": {
              "type": "string"
            },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": {
              "type": "string"
            },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": {
              "type": "string"
            },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": {
                    "type": "string",
                    "example": "https://example.com/incomingWebhook"
                  },
                  "eventName": {
                    "type": "string",
                    "example": "viewFilterGroup.updated"
                  },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "example": "370985db-22d8-4463-8e5f-2271d30913bd"
                      },
                      "nameSingular": {
                        "type": "string",
                        "enum": [
                          "viewFilterGroup"
                        ]
                      }
                    }
                  },
                  "workspaceId": {
                    "type": "string",
                    "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
                  },
                  "webhookId": {
                    "type": "string",
                    "example": "90056586-1228-4e03-a507-70140aa85c05"
                  },
                  "eventDate": {
                    "type": "string",
                    "example": "2024-02-14T11:27:01.779Z"
                  },
                  "record": {
                    "$ref": "#/components/schemas/ViewFilterGroupForResponse"
                  },
                  "updatedFields": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        }
      }
    },
    "ViewFilterGroup Deleted": {
      "post": {
        "tags": [
          "viewFilterGroup"
        ],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": {
              "type": "string"
            },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": {
              "type": "string"
            },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": {
              "type": "string"
            },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": {
                    "type": "string",
                    "example": "https://example.com/incomingWebhook"
                  },
                  "eventName": {
                    "type": "string",
                    "example": "viewFilterGroup.deleted"
                  },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "example": "370985db-22d8-4463-8e5f-2271d30913bd"
                      },
                      "nameSingular": {
                        "type": "string",
                        "enum": [
                          "viewFilterGroup"
                        ]
                      }
                    }
                  },
                  "workspaceId": {
                    "type": "string",
                    "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
                  },
                  "webhookId": {
                    "type": "string",
                    "example": "90056586-1228-4e03-a507-70140aa85c05"
                  },
                  "eventDate": {
                    "type": "string",
                    "example": "2024-02-14T11:27:01.779Z"
                  },
                  "record": {
                    "$ref": "#/components/schemas/ViewFilterGroupForResponse"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        }
      }
    },
    "ViewFilter Created": {
      "post": {
        "tags": [
          "viewFilter"
        ],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": {
              "type": "string"
            },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": {
              "type": "string"
            },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": {
              "type": "string"
            },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": {
                    "type": "string",
                    "example": "https://example.com/incomingWebhook"
                  },
                  "eventName": {
                    "type": "string",
                    "example": "viewFilter.created"
                  },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "example": "370985db-22d8-4463-8e5f-2271d30913bd"
                      },
                      "nameSingular": {
                        "type": "string",
                        "enum": [
                          "viewFilter"
                        ]
                      }
                    }
                  },
                  "workspaceId": {
                    "type": "string",
                    "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
                  },
                  "webhookId": {
                    "type": "string",
                    "example": "90056586-1228-4e03-a507-70140aa85c05"
                  },
                  "eventDate": {
                    "type": "string",
                    "example": "2024-02-14T11:27:01.779Z"
                  },
                  "record": {
                    "$ref": "#/components/schemas/ViewFilterForResponse"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        }
      }
    },
    "ViewFilter Updated": {
      "post": {
        "tags": [
          "viewFilter"
        ],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": {
              "type": "string"
            },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": {
              "type": "string"
            },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": {
              "type": "string"
            },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": {
                    "type": "string",
                    "example": "https://example.com/incomingWebhook"
                  },
                  "eventName": {
                    "type": "string",
                    "example": "viewFilter.updated"
                  },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "example": "370985db-22d8-4463-8e5f-2271d30913bd"
                      },
                      "nameSingular": {
                        "type": "string",
                        "enum": [
                          "viewFilter"
                        ]
                      }
                    }
                  },
                  "workspaceId": {
                    "type": "string",
                    "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
                  },
                  "webhookId": {
                    "type": "string",
                    "example": "90056586-1228-4e03-a507-70140aa85c05"
                  },
                  "eventDate": {
                    "type": "string",
                    "example": "2024-02-14T11:27:01.779Z"
                  },
                  "record": {
                    "$ref": "#/components/schemas/ViewFilterForResponse"
                  },
                  "updatedFields": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        }
      }
    },
    "ViewFilter Deleted": {
      "post": {
        "tags": [
          "viewFilter"
        ],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": {
              "type": "string"
            },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": {
              "type": "string"
            },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": {
              "type": "string"
            },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": {
                    "type": "string",
                    "example": "https://example.com/incomingWebhook"
                  },
                  "eventName": {
                    "type": "string",
                    "example": "viewFilter.deleted"
                  },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "example": "370985db-22d8-4463-8e5f-2271d30913bd"
                      },
                      "nameSingular": {
                        "type": "string",
                        "enum": [
                          "viewFilter"
                        ]
                      }
                    }
                  },
                  "workspaceId": {
                    "type": "string",
                    "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
                  },
                  "webhookId": {
                    "type": "string",
                    "example": "90056586-1228-4e03-a507-70140aa85c05"
                  },
                  "eventDate": {
                    "type": "string",
                    "example": "2024-02-14T11:27:01.779Z"
                  },
                  "record": {
                    "$ref": "#/components/schemas/ViewFilterForResponse"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        }
      }
    },
    "ViewGroup Created": {
      "post": {
        "tags": [
          "viewGroup"
        ],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": {
              "type": "string"
            },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": {
              "type": "string"
            },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": {
              "type": "string"
            },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": {
                    "type": "string",
                    "example": "https://example.com/incomingWebhook"
                  },
                  "eventName": {
                    "type": "string",
                    "example": "viewGroup.created"
                  },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "example": "370985db-22d8-4463-8e5f-2271d30913bd"
                      },
                      "nameSingular": {
                        "type": "string",
                        "enum": [
                          "viewGroup"
                        ]
                      }
                    }
                  },
                  "workspaceId": {
                    "type": "string",
                    "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
                  },
                  "webhookId": {
                    "type": "string",
                    "example": "90056586-1228-4e03-a507-70140aa85c05"
                  },
                  "eventDate": {
                    "type": "string",
                    "example": "2024-02-14T11:27:01.779Z"
                  },
                  "record": {
                    "$ref": "#/components/schemas/ViewGroupForResponse"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        }
      }
    },
    "ViewGroup Updated": {
      "post": {
        "tags": [
          "viewGroup"
        ],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": {
              "type": "string"
            },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": {
              "type": "string"
            },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": {
              "type": "string"
            },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": {
                    "type": "string",
                    "example": "https://example.com/incomingWebhook"
                  },
                  "eventName": {
                    "type": "string",
                    "example": "viewGroup.updated"
                  },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "example": "370985db-22d8-4463-8e5f-2271d30913bd"
                      },
                      "nameSingular": {
                        "type": "string",
                        "enum": [
                          "viewGroup"
                        ]
                      }
                    }
                  },
                  "workspaceId": {
                    "type": "string",
                    "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
                  },
                  "webhookId": {
                    "type": "string",
                    "example": "90056586-1228-4e03-a507-70140aa85c05"
                  },
                  "eventDate": {
                    "type": "string",
                    "example": "2024-02-14T11:27:01.779Z"
                  },
                  "record": {
                    "$ref": "#/components/schemas/ViewGroupForResponse"
                  },
                  "updatedFields": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        }
      }
    },
    "ViewGroup Deleted": {
      "post": {
        "tags": [
          "viewGroup"
        ],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": {
              "type": "string"
            },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": {
              "type": "string"
            },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": {
              "type": "string"
            },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": {
                    "type": "string",
                    "example": "https://example.com/incomingWebhook"
                  },
                  "eventName": {
                    "type": "string",
                    "example": "viewGroup.deleted"
                  },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "example": "370985db-22d8-4463-8e5f-2271d30913bd"
                      },
                      "nameSingular": {
                        "type": "string",
                        "enum": [
                          "viewGroup"
                        ]
                      }
                    }
                  },
                  "workspaceId": {
                    "type": "string",
                    "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
                  },
                  "webhookId": {
                    "type": "string",
                    "example": "90056586-1228-4e03-a507-70140aa85c05"
                  },
                  "eventDate": {
                    "type": "string",
                    "example": "2024-02-14T11:27:01.779Z"
                  },
                  "record": {
                    "$ref": "#/components/schemas/ViewGroupForResponse"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        }
      }
    },
    "View Created": {
      "post": {
        "tags": [
          "view"
        ],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": {
              "type": "string"
            },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": {
              "type": "string"
            },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": {
              "type": "string"
            },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": {
                    "type": "string",
                    "example": "https://example.com/incomingWebhook"
                  },
                  "eventName": {
                    "type": "string",
                    "example": "view.created"
                  },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "example": "370985db-22d8-4463-8e5f-2271d30913bd"
                      },
                      "nameSingular": {
                        "type": "string",
                        "enum": [
                          "view"
                        ]
                      }
                    }
                  },
                  "workspaceId": {
                    "type": "string",
                    "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
                  },
                  "webhookId": {
                    "type": "string",
                    "example": "90056586-1228-4e03-a507-70140aa85c05"
                  },
                  "eventDate": {
                    "type": "string",
                    "example": "2024-02-14T11:27:01.779Z"
                  },
                  "record": {
                    "$ref": "#/components/schemas/ViewForResponse"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        }
      }
    },
    "View Updated": {
      "post": {
        "tags": [
          "view"
        ],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": {
              "type": "string"
            },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": {
              "type": "string"
            },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": {
              "type": "string"
            },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": {
                    "type": "string",
                    "example": "https://example.com/incomingWebhook"
                  },
                  "eventName": {
                    "type": "string",
                    "example": "view.updated"
                  },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "example": "370985db-22d8-4463-8e5f-2271d30913bd"
                      },
                      "nameSingular": {
                        "type": "string",
                        "enum": [
                          "view"
                        ]
                      }
                    }
                  },
                  "workspaceId": {
                    "type": "string",
                    "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
                  },
                  "webhookId": {
                    "type": "string",
                    "example": "90056586-1228-4e03-a507-70140aa85c05"
                  },
                  "eventDate": {
                    "type": "string",
                    "example": "2024-02-14T11:27:01.779Z"
                  },
                  "record": {
                    "$ref": "#/components/schemas/ViewForResponse"
                  },
                  "updatedFields": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        }
      }
    },
    "View Deleted": {
      "post": {
        "tags": [
          "view"
        ],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": {
              "type": "string"
            },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": {
              "type": "string"
            },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": {
              "type": "string"
            },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": {
                    "type": "string",
                    "example": "https://example.com/incomingWebhook"
                  },
                  "eventName": {
                    "type": "string",
                    "example": "view.deleted"
                  },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "example": "370985db-22d8-4463-8e5f-2271d30913bd"
                      },
                      "nameSingular": {
                        "type": "string",
                        "enum": [
                          "view"
                        ]
                      }
                    }
                  },
                  "workspaceId": {
                    "type": "string",
                    "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
                  },
                  "webhookId": {
                    "type": "string",
                    "example": "90056586-1228-4e03-a507-70140aa85c05"
                  },
                  "eventDate": {
                    "type": "string",
                    "example": "2024-02-14T11:27:01.779Z"
                  },
                  "record": {
                    "$ref": "#/components/schemas/ViewForResponse"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        }
      }
    },
    "ViewSort Created": {
      "post": {
        "tags": [
          "viewSort"
        ],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": {
              "type": "string"
            },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": {
              "type": "string"
            },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": {
              "type": "string"
            },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": {
                    "type": "string",
                    "example": "https://example.com/incomingWebhook"
                  },
                  "eventName": {
                    "type": "string",
                    "example": "viewSort.created"
                  },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "example": "370985db-22d8-4463-8e5f-2271d30913bd"
                      },
                      "nameSingular": {
                        "type": "string",
                        "enum": [
                          "viewSort"
                        ]
                      }
                    }
                  },
                  "workspaceId": {
                    "type": "string",
                    "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
                  },
                  "webhookId": {
                    "type": "string",
                    "example": "90056586-1228-4e03-a507-70140aa85c05"
                  },
                  "eventDate": {
                    "type": "string",
                    "example": "2024-02-14T11:27:01.779Z"
                  },
                  "record": {
                    "$ref": "#/components/schemas/ViewSortForResponse"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        }
      }
    },
    "ViewSort Updated": {
      "post": {
        "tags": [
          "viewSort"
        ],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": {
              "type": "string"
            },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": {
              "type": "string"
            },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": {
              "type": "string"
            },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": {
                    "type": "string",
                    "example": "https://example.com/incomingWebhook"
                  },
                  "eventName": {
                    "type": "string",
                    "example": "viewSort.updated"
                  },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "example": "370985db-22d8-4463-8e5f-2271d30913bd"
                      },
                      "nameSingular": {
                        "type": "string",
                        "enum": [
                          "viewSort"
                        ]
                      }
                    }
                  },
                  "workspaceId": {
                    "type": "string",
                    "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
                  },
                  "webhookId": {
                    "type": "string",
                    "example": "90056586-1228-4e03-a507-70140aa85c05"
                  },
                  "eventDate": {
                    "type": "string",
                    "example": "2024-02-14T11:27:01.779Z"
                  },
                  "record": {
                    "$ref": "#/components/schemas/ViewSortForResponse"
                  },
                  "updatedFields": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        }
      }
    },
    "ViewSort Deleted": {
      "post": {
        "tags": [
          "viewSort"
        ],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": {
              "type": "string"
            },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": {
              "type": "string"
            },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": {
              "type": "string"
            },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": {
                    "type": "string",
                    "example": "https://example.com/incomingWebhook"
                  },
                  "eventName": {
                    "type": "string",
                    "example": "viewSort.deleted"
                  },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "example": "370985db-22d8-4463-8e5f-2271d30913bd"
                      },
                      "nameSingular": {
                        "type": "string",
                        "enum": [
                          "viewSort"
                        ]
                      }
                    }
                  },
                  "workspaceId": {
                    "type": "string",
                    "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
                  },
                  "webhookId": {
                    "type": "string",
                    "example": "90056586-1228-4e03-a507-70140aa85c05"
                  },
                  "eventDate": {
                    "type": "string",
                    "example": "2024-02-14T11:27:01.779Z"
                  },
                  "record": {
                    "$ref": "#/components/schemas/ViewSortForResponse"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        }
      }
    },
    "WorkflowAutomatedTrigger Created": {
      "post": {
        "tags": [
          "workflowAutomatedTrigger"
        ],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": {
              "type": "string"
            },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": {
              "type": "string"
            },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": {
              "type": "string"
            },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": {
                    "type": "string",
                    "example": "https://example.com/incomingWebhook"
                  },
                  "eventName": {
                    "type": "string",
                    "example": "workflowAutomatedTrigger.created"
                  },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "example": "370985db-22d8-4463-8e5f-2271d30913bd"
                      },
                      "nameSingular": {
                        "type": "string",
                        "enum": [
                          "workflowAutomatedTrigger"
                        ]
                      }
                    }
                  },
                  "workspaceId": {
                    "type": "string",
                    "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
                  },
                  "webhookId": {
                    "type": "string",
                    "example": "90056586-1228-4e03-a507-70140aa85c05"
                  },
                  "eventDate": {
                    "type": "string",
                    "example": "2024-02-14T11:27:01.779Z"
                  },
                  "record": {
                    "$ref": "#/components/schemas/WorkflowAutomatedTriggerForResponse"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        }
      }
    },
    "WorkflowAutomatedTrigger Updated": {
      "post": {
        "tags": [
          "workflowAutomatedTrigger"
        ],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": {
              "type": "string"
            },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": {
              "type": "string"
            },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": {
              "type": "string"
            },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": {
                    "type": "string",
                    "example": "https://example.com/incomingWebhook"
                  },
                  "eventName": {
                    "type": "string",
                    "example": "workflowAutomatedTrigger.updated"
                  },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "example": "370985db-22d8-4463-8e5f-2271d30913bd"
                      },
                      "nameSingular": {
                        "type": "string",
                        "enum": [
                          "workflowAutomatedTrigger"
                        ]
                      }
                    }
                  },
                  "workspaceId": {
                    "type": "string",
                    "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
                  },
                  "webhookId": {
                    "type": "string",
                    "example": "90056586-1228-4e03-a507-70140aa85c05"
                  },
                  "eventDate": {
                    "type": "string",
                    "example": "2024-02-14T11:27:01.779Z"
                  },
                  "record": {
                    "$ref": "#/components/schemas/WorkflowAutomatedTriggerForResponse"
                  },
                  "updatedFields": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        }
      }
    },
    "WorkflowAutomatedTrigger Deleted": {
      "post": {
        "tags": [
          "workflowAutomatedTrigger"
        ],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": {
              "type": "string"
            },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": {
              "type": "string"
            },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": {
              "type": "string"
            },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": {
                    "type": "string",
                    "example": "https://example.com/incomingWebhook"
                  },
                  "eventName": {
                    "type": "string",
                    "example": "workflowAutomatedTrigger.deleted"
                  },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "example": "370985db-22d8-4463-8e5f-2271d30913bd"
                      },
                      "nameSingular": {
                        "type": "string",
                        "enum": [
                          "workflowAutomatedTrigger"
                        ]
                      }
                    }
                  },
                  "workspaceId": {
                    "type": "string",
                    "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
                  },
                  "webhookId": {
                    "type": "string",
                    "example": "90056586-1228-4e03-a507-70140aa85c05"
                  },
                  "eventDate": {
                    "type": "string",
                    "example": "2024-02-14T11:27:01.779Z"
                  },
                  "record": {
                    "$ref": "#/components/schemas/WorkflowAutomatedTriggerForResponse"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        }
      }
    },
    "WorkflowRun Created": {
      "post": {
        "tags": [
          "workflowRun"
        ],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": {
              "type": "string"
            },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": {
              "type": "string"
            },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": {
              "type": "string"
            },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": {
                    "type": "string",
                    "example": "https://example.com/incomingWebhook"
                  },
                  "eventName": {
                    "type": "string",
                    "example": "workflowRun.created"
                  },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "example": "370985db-22d8-4463-8e5f-2271d30913bd"
                      },
                      "nameSingular": {
                        "type": "string",
                        "enum": [
                          "workflowRun"
                        ]
                      }
                    }
                  },
                  "workspaceId": {
                    "type": "string",
                    "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
                  },
                  "webhookId": {
                    "type": "string",
                    "example": "90056586-1228-4e03-a507-70140aa85c05"
                  },
                  "eventDate": {
                    "type": "string",
                    "example": "2024-02-14T11:27:01.779Z"
                  },
                  "record": {
                    "$ref": "#/components/schemas/WorkflowRunForResponse"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        }
      }
    },
    "WorkflowRun Updated": {
      "post": {
        "tags": [
          "workflowRun"
        ],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": {
              "type": "string"
            },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": {
              "type": "string"
            },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": {
              "type": "string"
            },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": {
                    "type": "string",
                    "example": "https://example.com/incomingWebhook"
                  },
                  "eventName": {
                    "type": "string",
                    "example": "workflowRun.updated"
                  },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "example": "370985db-22d8-4463-8e5f-2271d30913bd"
                      },
                      "nameSingular": {
                        "type": "string",
                        "enum": [
                          "workflowRun"
                        ]
                      }
                    }
                  },
                  "workspaceId": {
                    "type": "string",
                    "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
                  },
                  "webhookId": {
                    "type": "string",
                    "example": "90056586-1228-4e03-a507-70140aa85c05"
                  },
                  "eventDate": {
                    "type": "string",
                    "example": "2024-02-14T11:27:01.779Z"
                  },
                  "record": {
                    "$ref": "#/components/schemas/WorkflowRunForResponse"
                  },
                  "updatedFields": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        }
      }
    },
    "WorkflowRun Deleted": {
      "post": {
        "tags": [
          "workflowRun"
        ],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": {
              "type": "string"
            },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": {
              "type": "string"
            },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": {
              "type": "string"
            },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": {
                    "type": "string",
                    "example": "https://example.com/incomingWebhook"
                  },
                  "eventName": {
                    "type": "string",
                    "example": "workflowRun.deleted"
                  },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "example": "370985db-22d8-4463-8e5f-2271d30913bd"
                      },
                      "nameSingular": {
                        "type": "string",
                        "enum": [
                          "workflowRun"
                        ]
                      }
                    }
                  },
                  "workspaceId": {
                    "type": "string",
                    "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
                  },
                  "webhookId": {
                    "type": "string",
                    "example": "90056586-1228-4e03-a507-70140aa85c05"
                  },
                  "eventDate": {
                    "type": "string",
                    "example": "2024-02-14T11:27:01.779Z"
                  },
                  "record": {
                    "$ref": "#/components/schemas/WorkflowRunForResponse"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        }
      }
    },
    "Workflow Created": {
      "post": {
        "tags": [
          "workflow"
        ],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": {
              "type": "string"
            },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": {
              "type": "string"
            },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": {
              "type": "string"
            },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": {
                    "type": "string",
                    "example": "https://example.com/incomingWebhook"
                  },
                  "eventName": {
                    "type": "string",
                    "example": "workflow.created"
                  },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "example": "370985db-22d8-4463-8e5f-2271d30913bd"
                      },
                      "nameSingular": {
                        "type": "string",
                        "enum": [
                          "workflow"
                        ]
                      }
                    }
                  },
                  "workspaceId": {
                    "type": "string",
                    "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
                  },
                  "webhookId": {
                    "type": "string",
                    "example": "90056586-1228-4e03-a507-70140aa85c05"
                  },
                  "eventDate": {
                    "type": "string",
                    "example": "2024-02-14T11:27:01.779Z"
                  },
                  "record": {
                    "$ref": "#/components/schemas/WorkflowForResponse"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        }
      }
    },
    "Workflow Updated": {
      "post": {
        "tags": [
          "workflow"
        ],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": {
              "type": "string"
            },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": {
              "type": "string"
            },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": {
              "type": "string"
            },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": {
                    "type": "string",
                    "example": "https://example.com/incomingWebhook"
                  },
                  "eventName": {
                    "type": "string",
                    "example": "workflow.updated"
                  },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "example": "370985db-22d8-4463-8e5f-2271d30913bd"
                      },
                      "nameSingular": {
                        "type": "string",
                        "enum": [
                          "workflow"
                        ]
                      }
                    }
                  },
                  "workspaceId": {
                    "type": "string",
                    "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
                  },
                  "webhookId": {
                    "type": "string",
                    "example": "90056586-1228-4e03-a507-70140aa85c05"
                  },
                  "eventDate": {
                    "type": "string",
                    "example": "2024-02-14T11:27:01.779Z"
                  },
                  "record": {
                    "$ref": "#/components/schemas/WorkflowForResponse"
                  },
                  "updatedFields": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        }
      }
    },
    "Workflow Deleted": {
      "post": {
        "tags": [
          "workflow"
        ],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": {
              "type": "string"
            },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": {
              "type": "string"
            },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": {
              "type": "string"
            },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": {
                    "type": "string",
                    "example": "https://example.com/incomingWebhook"
                  },
                  "eventName": {
                    "type": "string",
                    "example": "workflow.deleted"
                  },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "example": "370985db-22d8-4463-8e5f-2271d30913bd"
                      },
                      "nameSingular": {
                        "type": "string",
                        "enum": [
                          "workflow"
                        ]
                      }
                    }
                  },
                  "workspaceId": {
                    "type": "string",
                    "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
                  },
                  "webhookId": {
                    "type": "string",
                    "example": "90056586-1228-4e03-a507-70140aa85c05"
                  },
                  "eventDate": {
                    "type": "string",
                    "example": "2024-02-14T11:27:01.779Z"
                  },
                  "record": {
                    "$ref": "#/components/schemas/WorkflowForResponse"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        }
      }
    },
    "WorkflowVersion Created": {
      "post": {
        "tags": [
          "workflowVersion"
        ],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": {
              "type": "string"
            },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": {
              "type": "string"
            },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": {
              "type": "string"
            },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": {
                    "type": "string",
                    "example": "https://example.com/incomingWebhook"
                  },
                  "eventName": {
                    "type": "string",
                    "example": "workflowVersion.created"
                  },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "example": "370985db-22d8-4463-8e5f-2271d30913bd"
                      },
                      "nameSingular": {
                        "type": "string",
                        "enum": [
                          "workflowVersion"
                        ]
                      }
                    }
                  },
                  "workspaceId": {
                    "type": "string",
                    "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
                  },
                  "webhookId": {
                    "type": "string",
                    "example": "90056586-1228-4e03-a507-70140aa85c05"
                  },
                  "eventDate": {
                    "type": "string",
                    "example": "2024-02-14T11:27:01.779Z"
                  },
                  "record": {
                    "$ref": "#/components/schemas/WorkflowVersionForResponse"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        }
      }
    },
    "WorkflowVersion Updated": {
      "post": {
        "tags": [
          "workflowVersion"
        ],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": {
              "type": "string"
            },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": {
              "type": "string"
            },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": {
              "type": "string"
            },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": {
                    "type": "string",
                    "example": "https://example.com/incomingWebhook"
                  },
                  "eventName": {
                    "type": "string",
                    "example": "workflowVersion.updated"
                  },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "example": "370985db-22d8-4463-8e5f-2271d30913bd"
                      },
                      "nameSingular": {
                        "type": "string",
                        "enum": [
                          "workflowVersion"
                        ]
                      }
                    }
                  },
                  "workspaceId": {
                    "type": "string",
                    "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
                  },
                  "webhookId": {
                    "type": "string",
                    "example": "90056586-1228-4e03-a507-70140aa85c05"
                  },
                  "eventDate": {
                    "type": "string",
                    "example": "2024-02-14T11:27:01.779Z"
                  },
                  "record": {
                    "$ref": "#/components/schemas/WorkflowVersionForResponse"
                  },
                  "updatedFields": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        }
      }
    },
    "WorkflowVersion Deleted": {
      "post": {
        "tags": [
          "workflowVersion"
        ],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": {
              "type": "string"
            },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": {
              "type": "string"
            },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": {
              "type": "string"
            },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": {
                    "type": "string",
                    "example": "https://example.com/incomingWebhook"
                  },
                  "eventName": {
                    "type": "string",
                    "example": "workflowVersion.deleted"
                  },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "example": "370985db-22d8-4463-8e5f-2271d30913bd"
                      },
                      "nameSingular": {
                        "type": "string",
                        "enum": [
                          "workflowVersion"
                        ]
                      }
                    }
                  },
                  "workspaceId": {
                    "type": "string",
                    "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
                  },
                  "webhookId": {
                    "type": "string",
                    "example": "90056586-1228-4e03-a507-70140aa85c05"
                  },
                  "eventDate": {
                    "type": "string",
                    "example": "2024-02-14T11:27:01.779Z"
                  },
                  "record": {
                    "$ref": "#/components/schemas/WorkflowVersionForResponse"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        }
      }
    },
    "WorkspaceMember Created": {
      "post": {
        "tags": [
          "workspaceMember"
        ],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": {
              "type": "string"
            },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": {
              "type": "string"
            },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": {
              "type": "string"
            },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": {
                    "type": "string",
                    "example": "https://example.com/incomingWebhook"
                  },
                  "eventName": {
                    "type": "string",
                    "example": "workspaceMember.created"
                  },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "example": "370985db-22d8-4463-8e5f-2271d30913bd"
                      },
                      "nameSingular": {
                        "type": "string",
                        "enum": [
                          "workspaceMember"
                        ]
                      }
                    }
                  },
                  "workspaceId": {
                    "type": "string",
                    "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
                  },
                  "webhookId": {
                    "type": "string",
                    "example": "90056586-1228-4e03-a507-70140aa85c05"
                  },
                  "eventDate": {
                    "type": "string",
                    "example": "2024-02-14T11:27:01.779Z"
                  },
                  "record": {
                    "$ref": "#/components/schemas/WorkspaceMemberForResponse"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        }
      }
    },
    "WorkspaceMember Updated": {
      "post": {
        "tags": [
          "workspaceMember"
        ],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": {
              "type": "string"
            },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": {
              "type": "string"
            },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": {
              "type": "string"
            },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": {
                    "type": "string",
                    "example": "https://example.com/incomingWebhook"
                  },
                  "eventName": {
                    "type": "string",
                    "example": "workspaceMember.updated"
                  },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "example": "370985db-22d8-4463-8e5f-2271d30913bd"
                      },
                      "nameSingular": {
                        "type": "string",
                        "enum": [
                          "workspaceMember"
                        ]
                      }
                    }
                  },
                  "workspaceId": {
                    "type": "string",
                    "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
                  },
                  "webhookId": {
                    "type": "string",
                    "example": "90056586-1228-4e03-a507-70140aa85c05"
                  },
                  "eventDate": {
                    "type": "string",
                    "example": "2024-02-14T11:27:01.779Z"
                  },
                  "record": {
                    "$ref": "#/components/schemas/WorkspaceMemberForResponse"
                  },
                  "updatedFields": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        }
      }
    },
    "WorkspaceMember Deleted": {
      "post": {
        "tags": [
          "workspaceMember"
        ],
        "security": [],
        "parameters": [
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Signature",
            "schema": {
              "type": "string"
            },
            "description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Timestamp",
            "schema": {
              "type": "string"
            },
            "description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Twenty-Webhook-Nonce",
            "schema": {
              "type": "string"
            },
            "description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetUrl": {
                    "type": "string",
                    "example": "https://example.com/incomingWebhook"
                  },
                  "eventName": {
                    "type": "string",
                    "example": "workspaceMember.deleted"
                  },
                  "objectMetadata": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "example": "370985db-22d8-4463-8e5f-2271d30913bd"
                      },
                      "nameSingular": {
                        "type": "string",
                        "enum": [
                          "workspaceMember"
                        ]
                      }
                    }
                  },
                  "workspaceId": {
                    "type": "string",
                    "example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
                  },
                  "webhookId": {
                    "type": "string",
                    "example": "90056586-1228-4e03-a507-70140aa85c05"
                  },
                  "eventDate": {
                    "type": "string",
                    "example": "2024-02-14T11:27:01.779Z"
                  },
                  "record": {
                    "$ref": "#/components/schemas/WorkspaceMemberForResponse"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        }
      }
    }
  },
  "tags": [
    {
      "name": "General",
      "description": "General requests"
    },
    {
      "name": "attachments",
      "description": "Object `Attachments`"
    },
    {
      "name": "blocklists",
      "description": "Object `Blocklists`"
    },
    {
      "name": "calendarChannelEventAssociations",
      "description": "Object `CalendarChannelEventAssociations`"
    },
    {
      "name": "calendarChannels",
      "description": "Object `CalendarChannels`"
    },
    {
      "name": "calendarEventParticipants",
      "description": "Object `CalendarEventParticipants`"
    },
    {
      "name": "calendarEvents",
      "description": "Object `CalendarEvents`"
    },
    {
      "name": "companies",
      "description": "Object `Companies`"
    },
    {
      "name": "connectedAccounts",
      "description": "Object `ConnectedAccounts`"
    },
    {
      "name": "favoriteFolders",
      "description": "Object `FavoriteFolders`"
    },
    {
      "name": "favorites",
      "description": "Object `Favorites`"
    },
    {
      "name": "leadsLinkedinScrapings",
      "description": "Object `LeadsLinkedinScrapings`"
    },
    {
      "name": "messageChannelMessageAssociations",
      "description": "Object `MessageChannelMessageAssociations`"
    },
    {
      "name": "messageChannels",
      "description": "Object `MessageChannels`"
    },
    {
      "name": "messageFolders",
      "description": "Object `MessageFolders`"
    },
    {
      "name": "messageParticipants",
      "description": "Object `MessageParticipants`"
    },
    {
      "name": "messages",
      "description": "Object `Messages`"
    },
    {
      "name": "messageThreads",
      "description": "Object `MessageThreads`"
    },
    {
      "name": "notes",
      "description": "Object `Notes`"
    },
    {
      "name": "noteTargets",
      "description": "Object `NoteTargets`"
    },
    {
      "name": "opportunities",
      "description": "Object `Opportunities`"
    },
    {
      "name": "people",
      "description": "Object `People`"
    },
    {
      "name": "tasks",
      "description": "Object `Tasks`"
    },
    {
      "name": "taskTargets",
      "description": "Object `TaskTargets`"
    },
    {
      "name": "timelineActivities",
      "description": "Object `TimelineActivities`"
    },
    {
      "name": "viewFields",
      "description": "Object `ViewFields`"
    },
    {
      "name": "viewFilterGroups",
      "description": "Object `ViewFilterGroups`"
    },
    {
      "name": "viewFilters",
      "description": "Object `ViewFilters`"
    },
    {
      "name": "viewGroups",
      "description": "Object `ViewGroups`"
    },
    {
      "name": "views",
      "description": "Object `Views`"
    },
    {
      "name": "viewSorts",
      "description": "Object `ViewSorts`"
    },
    {
      "name": "workflowAutomatedTriggers",
      "description": "Object `WorkflowAutomatedTriggers`"
    },
    {
      "name": "workflowRuns",
      "description": "Object `WorkflowRuns`"
    },
    {
      "name": "workflows",
      "description": "Object `Workflows`"
    },
    {
      "name": "workflowVersions",
      "description": "Object `WorkflowVersions`"
    },
    {
      "name": "workspaceMembers",
      "description": "Object `WorkspaceMembers`"
    }
  ]
}